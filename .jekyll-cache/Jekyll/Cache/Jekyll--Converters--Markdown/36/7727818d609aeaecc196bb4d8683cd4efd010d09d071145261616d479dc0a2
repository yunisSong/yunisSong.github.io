I"0J<h1 id="jhchainableanimations源码学习">JHChainableAnimations源码学习</h1>

<h3 id="jhchainableanimations是什么">JHChainableAnimations是什么</h3>
<p><code class="language-plaintext highlighter-rouge">JHChainableAnimations</code> 是一个多系统动画封装的链式语法库。</p>

<p>原有的OC代码如果我们想写一个动画，需要这样写。</p>

<div class="language-objective_c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">[</span><span class="n">UIView</span> <span class="nf">animateWithDuration</span><span class="p">:</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span>
                          <span class="nl">delay:</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span>
         <span class="nl">usingSpringWithDamping:</span><span class="mi">0</span><span class="p">.</span><span class="mi">8</span>
          <span class="nl">initialSpringVelocity:</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span>
                        <span class="nl">options:</span><span class="mi">0</span> <span class="nf">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
                            <span class="n">CGPoint</span> <span class="n">newPosition</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">myView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">;</span>
                            <span class="n">newPosition</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mi">50</span><span class="p">;</span>
                            <span class="n">self</span><span class="p">.</span><span class="n">myView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span> <span class="o">=</span> <span class="n">newPosition</span><span class="p">;</span>
    <span class="p">}</span> <span class="n">completion</span><span class="o">:^</span><span class="p">(</span><span class="n">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">UIView</span> <span class="nf">animateWithDuration</span><span class="p">:</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span>
                              <span class="nl">delay:</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span>
                            <span class="nl">options:</span><span class="n">UIViewAnimationOptionCurveEaseIn</span>
                         <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
            <span class="n">self</span><span class="p">.</span><span class="n">myView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="nf">purpleColor</span><span class="p">];</span>
        <span class="p">}</span> <span class="nf">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
    <span class="p">}];</span>
</code></pre></div></div>

<p>使用 <code class="language-plaintext highlighter-rouge">JHChainableAnimations</code> 可以这样写：</p>

<div class="language-objective_c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JHChainableAnimator</span> <span class="o">*</span><span class="n">animator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">JHChainableAnimator</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithView</span><span class="p">:</span><span class="n">self</span><span class="p">.</span><span class="n">myView</span><span class="p">];</span>
<span class="n">animator</span><span class="p">.</span><span class="n">moveX</span><span class="p">(</span><span class="mi">50</span><span class="p">).</span><span class="n">spring</span><span class="p">.</span><span class="n">thenAfter</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">).</span><span class="n">makeBackground</span><span class="p">([</span><span class="n">UIColor</span> <span class="nf">purpleColor</span><span class="p">]).</span><span class="n">easeIn</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">);</span>
</code></pre></div></div>

<p>代码一下就显得特别清晰明了，<code class="language-plaintext highlighter-rouge">JHChainableAnimations</code> 采用了现在流行的链式语法，跟 <code class="language-plaintext highlighter-rouge">Masonry</code> 一样的语法。</p>
<h4 id="链式语法的特点是什么">链式语法的特点是什么</h4>
<p>链式编程特点：方法的返回值是block,block必须有返回值（本身对象），block参数（需要操作的值）</p>

<h3 id="jhchainableanimations代码具体分析">JHChainableAnimations代码具体分析</h3>

<p>首先看一段代码</p>

<div class="language-objective_c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JHChainableAnimator</span> <span class="o">*</span><span class="n">animator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">JHChainableAnimator</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithView</span><span class="p">:</span><span class="n">self</span><span class="p">.</span><span class="n">myView</span><span class="p">];</span>
<span class="n">animator</span><span class="p">.</span><span class="n">moveX</span><span class="p">(</span><span class="mi">100</span><span class="p">).</span><span class="n">animate</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

</code></pre></div></div>

<p>首先是将 <code class="language-plaintext highlighter-rouge">self.myView</code> 与 <code class="language-plaintext highlighter-rouge">JHChainableAnimator *animator</code> 关联起来，然后通过 <code class="language-plaintext highlighter-rouge">JHChainableAnimator *animator</code> 进行动画设置。</p>

<p>第二行代码
<code class="language-plaintext highlighter-rouge">animator.moveX(100).animate(2);</code></p>

<p>首先是 <code class="language-plaintext highlighter-rouge">animator</code> 调用 <code class="language-plaintext highlighter-rouge">moveX</code> 方法生成动画样式，这个方法从字面上面看 就是 移动视图的X轴，然后调用 <code class="language-plaintext highlighter-rouge">animate</code> 执行动画，设置动画时间。具体看先 它是如何实现的。</p>

<div class="language-objective_c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="n">JHChainableFloat</span><span class="p">)</span><span class="n">moveX</span>
<span class="p">{</span>
    <span class="n">JHChainableFloat</span> <span class="n">chainable</span> <span class="o">=</span> <span class="n">JHChainableFloat</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">{</span>
        
        <span class="p">[</span><span class="n">self</span> <span class="nf">addAnimationCalculationAction</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">__weak</span> <span class="n">UIView</span> <span class="o">*</span><span class="n">view</span><span class="p">,</span> <span class="n">__weak</span> <span class="n">JHChainableAnimator</span> <span class="o">*</span><span class="n">weakSelf</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">JHKeyframeAnimation</span> <span class="o">*</span><span class="n">positionAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">weakSelf</span> <span class="nf">basicAnimationForKeyPath</span><span class="p">:</span><span class="s">@"position.x"</span><span class="p">];</span>
            <span class="n">positionAnimation</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
            <span class="n">positionAnimation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="o">+</span><span class="n">f</span><span class="p">);</span>
            <span class="p">[</span><span class="n">weakSelf</span> <span class="nf">addAnimationFromCalculationBlock</span><span class="p">:</span><span class="n">positionAnimation</span><span class="p">];</span>
        <span class="p">}];</span>
        <span class="p">[</span><span class="n">self</span> <span class="nf">addAnimationCompletionAction</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">__weak</span> <span class="n">UIView</span> <span class="o">*</span><span class="n">view</span><span class="p">,</span> <span class="n">__weak</span> <span class="n">JHChainableAnimator</span> <span class="o">*</span><span class="n">weakSelf</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">CGPoint</span> <span class="n">position</span> <span class="o">=</span> <span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
            <span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">f</span><span class="p">;</span>
            <span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">position</span><span class="p">;</span>
        <span class="p">}];</span>
        
        <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="n">chainable</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>再来回顾下链式语法的特点：</p>
<blockquote>
  <p>方法的返回值是block,block必须有返回值（本身对象），block参数（需要操作的值）</p>
</blockquote>

<p>再来看上面这段代码：</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">moveX</code> 方法返回的是一个 <code class="language-plaintext highlighter-rouge">block chainable</code></li>
  <li><code class="language-plaintext highlighter-rouge">block</code> 的参数是一个 <code class="language-plaintext highlighter-rouge">float</code>，</li>
  <li><code class="language-plaintext highlighter-rouge">block chainable</code> 的返回值是当前类 <code class="language-plaintext highlighter-rouge">JHChainableAnimator</code> 实例。</li>
</ol>

<p>完全符合链式语法的特点。</p>
<h4 id="movex-具体实现">moveX 具体实现</h4>
<p>然后再来看具体实现，<code class="language-plaintext highlighter-rouge">moveX</code> 干了什么。</p>

<p>首先是返回了一个 <code class="language-plaintext highlighter-rouge">block</code>，然后这个 <code class="language-plaintext highlighter-rouge">block</code> 返回了这个类本身的实例。</p>

<h5 id="block-chainable-都做了什么"><code class="language-plaintext highlighter-rouge">block chainable</code> 都做了什么</h5>

<ol>
  <li>生成一个可执行的动画
    <div class="language-objective_c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">[</span><span class="n">self</span> <span class="nf">addAnimationCalculationAction</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">__weak</span> <span class="n">UIView</span> <span class="o">*</span><span class="n">view</span><span class="p">,</span> <span class="n">__weak</span> <span class="n">JHChainableAnimator</span> <span class="o">*</span><span class="n">weakSelf</span><span class="p">)</span> <span class="p">{</span>
         <span class="n">JHKeyframeAnimation</span> <span class="o">*</span><span class="n">positionAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">weakSelf</span> <span class="nf">basicAnimationForKeyPath</span><span class="p">:</span><span class="s">@"position.x"</span><span class="p">];</span>
         <span class="n">positionAnimation</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
         <span class="n">positionAnimation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="o">+</span><span class="n">f</span><span class="p">);</span>
         <span class="p">[</span><span class="n">weakSelf</span> <span class="nf">addAnimationFromCalculationBlock</span><span class="p">:</span><span class="n">positionAnimation</span><span class="p">];</span>
     <span class="p">}];</span>
</code></pre></div>    </div>
  </li>
  <li>生成有个动画执行完毕的回调，修改视图属性
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">[</span><span class="k">self</span> <span class="nv">addAnimationCompletionAction</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">__weak</span> <span class="kt">UIView</span> <span class="o">*</span><span class="n">view</span><span class="p">,</span> <span class="n">__weak</span> <span class="kt">JHChainableAnimator</span> <span class="o">*</span><span class="n">weakSelf</span><span class="p">)</span> <span class="p">{</span>
         <span class="kt">CGPoint</span> <span class="n">position</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">position</span><span class="p">;</span>
         <span class="n">position</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">f</span><span class="p">;</span>
         <span class="n">view</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">position</span><span class="p">;</span>
     <span class="p">}];</span>
</code></pre></div>    </div>
  </li>
  <li>返回 当前类本身</li>
</ol>

<h4 id="animate-具体实现">animate 具体实现</h4>

<div class="language-objective_c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="n">JHChainableAnimation</span><span class="p">)</span><span class="n">animate</span>
<span class="p">{</span>
    <span class="n">JHChainableAnimation</span> <span class="n">chainable</span> <span class="o">=</span> <span class="n">JHChainableAnimation</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
        
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">animateWithCompletion</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">completionBlock</span><span class="p">);</span>
    <span class="p">};</span>
    
    <span class="k">return</span> <span class="n">chainable</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>华丽的分割线
—-</p>
<blockquote>
  <p>感觉自己的语言表示能力有问题，突然不知道该怎么往下说下去了。
这个地方。</p>
</blockquote>

<blockquote>
  <p>重新描述下：</p>
</blockquote>

<blockquote>
  <p>首先是像</p>
  <div class="language-objective_c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="n">JHChainableFloat</span><span class="p">)</span><span class="n">moveX</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="n">JHChainableFloat</span><span class="p">)</span><span class="n">moveY</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="n">JHChainablePoint</span><span class="p">)</span><span class="n">moveXY</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="n">JHChainableFloat</span><span class="p">)</span><span class="n">moveHeight</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="n">JHChainableFloat</span><span class="p">)</span><span class="n">moveWidth</span><span class="p">;</span>
</code></pre></div>  </div>
  <p>这类方法调用的时间，会生成一些类的动画对象 <code class="language-plaintext highlighter-rouge">JHKeyframeAnimation</code> 然后存储到 <code class="language-plaintext highlighter-rouge">JHAnimationChainLink</code> 的动画数组里面。</p>
</blockquote>

<blockquote>
  <p>最终 <code class="language-plaintext highlighter-rouge">animate</code> 方法是循环调用 类数组里面存储的 <code class="language-plaintext highlighter-rouge">JHAnimationChainLink</code> 对象，执行 <code class="language-plaintext highlighter-rouge">JHAnimationChainLink</code> 对象的 <code class="language-plaintext highlighter-rouge">JHKeyframeAnimation</code>动画数组。
大致就是这样执行的，但是具体的实现有好多细节，动画的添加，动画执行的回调，取得当前执行的动画、如何暂停动画等。感觉自己目前的功力还很难描述清楚。就暂时先告一段落了。</p>
</blockquote>

:ET
I"!<h1 id="runtime-可以做什么">runtime 可以做什么</h1>
<blockquote>
  <p>这篇文字不扯淡，不讲runtime是什么，只总结下runtime 可以用来干什么。
这几篇文章写的很好：
<a href="http://tech.glowing.com/cn/objective-c-runtime/">Objective-C Runtime</a></p>
</blockquote>

<blockquote>
  <p><a href="http://tech.glowing.com/cn/method-swizzling-aop/">Method Swizzling 和 AOP 实践</a></p>

  <p><a href="http://southpeak.github.io/categories/objectivec/">南大(南锋子)的一系列文章</a>（打开稍慢）</p>

  <p><a href="http://blog.csdn.net/sps900608/article/details/51863147">精通Objective-C进阶技巧：使用运行时系统API</a></p>

  <p>然后饶神总结的也不错,里面好多干货
<a href="http://www.jianshu.com/p/64a7c9f7f6b2">iOS 基础知识点网址</a></p>

  <p>美团技术团队
<a href="http://tech.meituan.com/DiveIntoCategory.html">深入理解Objective-C：Category</a>
<a href="http://tech.meituan.com/DiveIntoMethodCache.html">深入理解Objective-C：方法缓存</a>
<a href="http://www.mulle-kybernetik.com/artikel/Optimization/opti-3-imp-deluxe.html">Obj-C Optimization: IMP Cacheing Deluxe</a></p>

  <p>杨小鱼（玉令天下）
<a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/">Objective-C Runtime</a></p>
</blockquote>

<h4 id="1获取类属性列表值方法">1，获取类属性列表、值、方法</h4>

<p><a href="https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/NSObject%2BProperty.m">获取model的属性、属性值、方法列表 demo地址</a></p>
<h4 id="2替换已有函数包括系统方法">2，替换已有函数(包括系统方法)</h4>
<p>可以把系统方法替换为我们自己的方法。</p>

<p><a href="https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/UIAlertController%2BexchangeMethod.m">替换系统弹框方法，统一修改弹框标题  demo地址</a></p>

<h4 id="3动态挂载对象">3，动态挂载对象</h4>

<p><a href="https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/UIView%2BredDot.m">为View 加一个小红点的公用方法  demo地址</a></p>
<h4 id="4动态创建类-kvo-底层实现原理">4,动态创建类 KVO 底层实现原理</h4>
<p><a href="http://www.jianshu.com/p/6305af232100">KVO的底层实现原理</a></p>
<h4 id="5自动归档归档解档">5，自动归档、归档解档</h4>

<p>           </p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[coder encodeObject:value forKey:propertyName];

[self setValue:value forKey:propertyName];
</code></pre></div></div>
<p><a href="https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/NSObject%2Bencode.m">统一为property添加方法 不用一个个的写 demo地址</a></p>
<h4 id="6给分类添加属性">6，给分类添加属性</h4>

<p><a href="https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/UIView%2BredDot.m">为View 加一个小红点的公用方法  demo地址</a></p>
<h4 id="7字典转模型">7，字典转模型</h4>

<p><a href="https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/NSObject%2BdicToModel.m">同样是获取类的属性，然后调用 <code class="language-plaintext highlighter-rouge">[instance setValue:value forKey:key]</code> 赋值  demo地址</a></p>

<h4 id="8-不会闪退的类-resolveinstancemethod-使用">8, 不会闪退的类 <code class="language-plaintext highlighter-rouge">resolveInstanceMethod</code> 使用</h4>

<p>在开发中，我们经常会碰到下面这样的错误信息。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-[ForwardingMessageModel test]: unrecognized selector sent to instance 0x60000000c8c0
</code></pre></div></div>

<p>这是调用了类不存在的方法导致的。</p>

<p>最近我们项目碰到了这样一个问题，因为项目中大量使用了 H5 页面，经常需要原生这边为 H5 提供调用方法，有些方法是后续版本才新加的，之前的版本并不支持，调用了后，就出现了上面的错误，程序直接闪退。</p>

<p>如何保证调用类中不存在的方法时，程序不会闪退呢？</p>

<p>我的做法相当的简单粗暴，在 <code class="language-plaintext highlighter-rouge">resolveInstanceMethod</code> 时直接指向一个空方法，上面都不做，具体实现如下：</p>

<div class="language-objective_c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*--ForwardingMessageModel.h--*/</span>
<span class="cp">#import &lt;Foundation/Foundation.h&gt;
</span>
<span class="k">@interface</span> <span class="nc">ForwardingMessageModel</span> <span class="p">:</span> <span class="nc">NSObject</span>

<span class="k">@end</span>

<span class="o">---</span>

<span class="cm">/*--ForwardingMessageModel.m--*/</span>
<span class="cp">#import "ForwardingMessageModel.h"
#import &lt;objc/runtime.h&gt;
</span><span class="k">@implementation</span> <span class="nc">ForwardingMessageModel</span>

<span class="kt">void</span> <span class="nf">rescueCrash</span> <span class="p">(</span><span class="n">id</span> <span class="n">self</span><span class="p">,</span><span class="n">SEL</span> <span class="n">_cmd</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@"成功的拯救了一次闪退"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">+</span> <span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="nf">resolveInstanceMethod</span><span class="p">:(</span><span class="n">SEL</span><span class="p">)</span><span class="nv">sel</span>
<span class="p">{</span>    
    <span class="n">class_addMethod</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">sel</span><span class="p">,</span> <span class="p">(</span><span class="n">IMP</span><span class="p">)</span><span class="n">rescueCrash</span><span class="p">,</span> <span class="s">"v:@:"</span><span class="p">);</span>
    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sayHello</span><span class="p">:(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span>
<span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@"Hello,%@"</span><span class="p">,</span><span class="n">name</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div></div>

<p>当再次调用不存在的方法时，动态添加方法，然后直接把方法的 <code class="language-plaintext highlighter-rouge">IMP</code> 指向  <code class="language-plaintext highlighter-rouge">rescueCrash</code> 的实现：</p>

<div class="language-objective_c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ForwardingMessageModel</span> <span class="o">*</span><span class="n">model</span> <span class="o">=</span> <span class="p">[</span><span class="n">ForwardingMessageModel</span> <span class="nf">new</span><span class="p">];</span>

<span class="p">[</span><span class="n">model</span> <span class="nf">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="nf">withObject</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>

<span class="p">[</span><span class="n">model</span> <span class="nf">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nf">test</span><span class="p">:)</span> <span class="n">withObject</span><span class="o">:</span><span class="s">@"11111"</span><span class="p">];</span>

<span class="p">[</span><span class="n">model</span> <span class="nf">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nf">sayHello</span><span class="p">:)</span> <span class="n">withObject</span><span class="o">:</span><span class="s">@"Yunis"</span><span class="p">];</span>
</code></pre></div></div>

:ET
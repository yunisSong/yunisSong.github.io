I")<h1 id="swift-中如何让子类必须重写父类方法">Swift 中如何让子类必须重写父类方法</h1>

<p>如何让子类必须实现父类中的方法呢？
有一种方法是结合 <code class="language-plaintext highlighter-rouge">protocol(BaseMustMethod)</code> 和 <code class="language-plaintext highlighter-rouge">父类(BaseTableViewController)</code> 来实现。</p>

<p>首先先实现一个 <code class="language-plaintext highlighter-rouge">父类(BaseTableViewController)</code>，然后 写一个 <code class="language-plaintext highlighter-rouge">protocol(BaseMustMethod)</code> ，把子类必须写的方法放入到 <code class="language-plaintext highlighter-rouge">protocol(BaseMustMethod)</code> 中。</p>

<p>然后 <code class="language-plaintext highlighter-rouge">typealias</code> 一个 <code class="language-plaintext highlighter-rouge">类型（BaseTableViewCtr）</code> 同时遵守 <code class="language-plaintext highlighter-rouge">父类(BaseTableViewController)</code> 和  <code class="language-plaintext highlighter-rouge">protocol(BaseMustMethod)</code>。</p>

<p>这样 遵守 <code class="language-plaintext highlighter-rouge">BaseTableViewCtr</code> 的类，就同时继承了 <code class="language-plaintext highlighter-rouge">父类(BaseTableViewController)</code>，还必须实现 <code class="language-plaintext highlighter-rouge">protocol(BaseMustMethod)</code> 规定的方法。</p>

<p>如下：</p>

<p>父类</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">BaseMustMethod</span> <span class="p">{</span>
	<span class="kd">func</span> <span class="nf">loadNewDate</span><span class="p">()</span>
<span class="p">}</span>
<span class="kd">typealias</span> <span class="kt">BaseTableViewCtr</span> <span class="o">=</span> <span class="kt">BaseTableViewController</span> <span class="o">&amp;</span> <span class="kt">BaseMustMethod</span>

<span class="kd">class</span> <span class="kt">BaseTableViewController</span><span class="p">:</span> <span class="kt">BaseViewController</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">ctr</span> <span class="o">=</span> <span class="k">self</span> <span class="k">as?</span> <span class="kt">BaseTableViewCtr</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">ctr</span><span class="o">.</span><span class="nf">loadNewDate</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>子类</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">TestBase1ViewController</span><span class="p">:</span> <span class="kt">BaseTableViewCtr</span> <span class="p">{</span>

<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">TestBase1ViewController</span> <span class="p">{</span>
	<span class="kd">func</span> <span class="nf">loadNewDate</span><span class="p">()</span> <span class="p">{</span>
		
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
:ET
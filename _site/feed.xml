<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>三十一</title>
    <description>潜心修行中。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 26 Oct 2017 17:47:15 +0800</pubDate>
    <lastBuildDate>Thu, 26 Oct 2017 17:47:15 +0800</lastBuildDate>
    <generator>Jekyll v3.4.1</generator>
    
      <item>
        <title>Python小工具-根据输入关键字自动打开百度搜索结果的第一页</title>
        <description>&lt;h1 id=&quot;python小工具-根据输入关键字自动打开百度搜索结果的第一页&quot;&gt;Python小工具-根据输入关键字自动打开百度搜索结果的第一页&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/234403-493ea52f7309279f.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;PythonBaidu.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/PythonBaidu.gif&quot; alt=&quot;PythonBaidu.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;步骤分析:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 伪装浏览器的 User-Agent
2. 读取输入参数并组装为请求参数
3. 使用 `requests` 模块请求数据
4. 使用 `bs4` 查找需要的链接数据
5. 使用`webbrowser`模块 打开链接。 代码如下：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- coding: UTF-8 -*-
import requests, sys, webbrowser, bs4

#伪装浏览器头
def camouflageWrowser():
    reload(sys)
    sys.setdefaultencoding('utf-8')
    headers = {'User-Agent':'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0'}
    return headers

# 读取输入参数并组装为搜索用的参数
def readInputParameterAndFormat():
    searchWorld =  ' '.join(sys.argv[1:])
    payload = {'wd':u'%s'%searchWorld}
    print(&quot;searchWorld = &quot; + searchWorld)
    return  payload

# 搜索关键字
def requestsWithParameter(headers,parameter):
    url = 'http://www.baidu.com/s'
    r = requests.get(url, params=parameter, headers=headers, timeout=5)
    return r

# 查找需要的内容
def findNeedResult(request):
    # 查找需要的内容
    soup = bs4.BeautifulSoup(request.text,&quot;html.parser&quot;)
    linkElems = soup.select('.result &amp;gt; .t &amp;gt; a[href]')
    topLinkElems = soup.select('.result-op &amp;gt; .t &amp;gt; a[href]')
    return linkElems + topLinkElems

# 打开全部搜索结果
def openElement(el):
    webbrowser.open(el.get('href'))


#伪装浏览器头
headers = camouflageWrowser()
# 读取输入参数
payload = readInputParameterAndFormat()
# 请求关键字数据
r = requestsWithParameter(headers,payload)
# 解析返回的结果
linkElems =  findNeedResult(r)

for el in linkElems:
    openElement(el)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 26 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/26/Python%E5%B0%8F%E5%B7%A5%E5%85%B7-%E6%A0%B9%E6%8D%AE%E8%BE%93%E5%85%A5%E5%85%B3%E9%94%AE%E5%AD%97%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%9A%84%E7%AC%AC%E4%B8%80%E9%A1%B5/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/26/Python%E5%B0%8F%E5%B7%A5%E5%85%B7-%E6%A0%B9%E6%8D%AE%E8%BE%93%E5%85%A5%E5%85%B3%E9%94%AE%E5%AD%97%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%9A%84%E7%AC%AC%E4%B8%80%E9%A1%B5/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>Python编程快速上手 — 让繁琐工作自动化</title>
        <description>&lt;h1 id=&quot;python编程快速上手--让繁琐工作自动化&quot;&gt;Python编程快速上手 — 让繁琐工作自动化&lt;/h1&gt;
&lt;h3 id=&quot;基础概念&quot;&gt;基础概念&lt;/h3&gt;
&lt;h4 id=&quot;导入模块&quot;&gt;导入模块&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;import string
import random,sys,os


&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from random import *
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用这种形式的 import 语句，调用 random 模块中的函数时不需要 random.前缀。 但是，使用完整的名称会让代码更可读，所以最好是使用普通形式的 import 语句。&lt;/p&gt;

&lt;h4 id=&quot;声明函数&quot;&gt;声明函数&lt;/h4&gt;
&lt;h5 id=&quot;不带参数&quot;&gt;不带参数&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def Hello():
    print(&quot;----hello world.----&quot;)

Hello()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;带有参数&quot;&gt;带有参数&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;输出中文需要在开头加入&lt;code class=&quot;highlighter-rouge&quot;&gt;# -*- coding: UTF-8 -*-&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;#coding=utf-8&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def Hello(name):
    print(&quot;----hello world.----&quot; + name)

Hello(&quot;Yunis&quot;)
Hello(&quot;三十一&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;带有多个参数&quot;&gt;带有多个参数&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def Hello(name,age):
    print( name + &quot; is &quot; + str(age) + &quot; years old this year&quot;)

Hello(&quot;Yunis&quot;,18)
Hello(&quot;三十一&quot;,25)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;关键字参数-和-print&quot;&gt;关键字参数 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  print('Hello')
  print('World')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello 
World
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这是因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt;函数自动在传入的字符串末尾 添加了换行符。
可以通过 end 关键字参数，设置这个末尾。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print('Hello', end='')
print('World')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HelloWorld
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;类似地，如果向 print()传入多个字符串值,该函数就会自动用一个空格分隔它们。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print('cats', 'dogs', 'mice') 
&amp;gt;&amp;gt;&amp;gt; cats dogs mice
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以传入 &lt;code class=&quot;highlighter-rouge&quot;&gt;sep&lt;/code&gt; 关键字参数，替换掉默认的分隔字符.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print('cats', 'dogs', 'mice', sep=',')
&amp;gt;&amp;gt;&amp;gt; cats,dogs,mice
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;作用域&quot;&gt;作用域&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;全局作用域中的代码不能使用任何局部变量;&lt;/li&gt;
  &lt;li&gt;但是，局部作用域可以访问全局变量;&lt;/li&gt;
  &lt;li&gt;一个函数的局部作用域中的代码，不能使用其他局部作用域中的变量。
  ⁃	* 如果在不同的作用域中，你可以用相同的名字命名不同的变量。也就是说，可以有一个名为 spam 的局部变量，和一个名为 spam 的全局变量。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果需要在一个函数内修改全局变量，就使用 global 语句。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def spam():
    global eggs
    eggs = 'spam'
      
eggs = 'global'
spam()
print(eggs)//spam
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;如果变量在全局作用域中使用(即在所有函数之外)，它就总是全局变量。&lt;/li&gt;
  &lt;li&gt;如果在一个函数中，有针对该变量的 global 语句，它就是全局变量。&lt;/li&gt;
  &lt;li&gt;否则，如果该变量用于函数中的赋值语句，它就是局部变量。&lt;/li&gt;
  &lt;li&gt;但是，如果该变量没有用在赋值语句中，它就是全局变量。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;异常处理&quot;&gt;异常处理&lt;/h4&gt;
&lt;p&gt;错误可以由 try 和 except 语句来处理。那些可能出错的语句被放在 try 子句中。 如果错误发生，程序执行就转到接下来的 except 子句开始处。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def spam(divideBy):
    try:
        return 42 / divideBy 
    except ZeroDivisionError:
        print('Error: Invalid argument.')
        
print(spam(2))
print(spam(12))
print(spam(1))

#Error: Invalid argument. 
#None
print(spam(0))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;列表&quot;&gt;列表&lt;/h4&gt;

&lt;h5 id=&quot;下标取值&quot;&gt;下标取值&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spam = ['cat', 'bat','dog']
print(spam[0])  #cat
print(spam[-1]) #dog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;cat&lt;/th&gt;
      &lt;th&gt;bat&lt;/th&gt;
      &lt;th&gt;dog&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;正向&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;负向&lt;/td&gt;
      &lt;td&gt;-3&lt;/td&gt;
      &lt;td&gt;-2&lt;/td&gt;
      &lt;td&gt;-1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;切片获取子列表&quot;&gt;切片获取子列表&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spam = ['cat', 'bat','dog']

print(spam[:-1])  #['cat', 'bat']
print(spam[0:-1]) #['cat', 'bat']
print(spam[0:1])  #['cat']
print(spam[:1])   #['cat']
print(spam[0:2])  #['cat', 'bat']
print(spam[0:3])  #['cat', 'bat', 'dog']
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;列表链接复制&quot;&gt;列表链接、复制&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 操作符可以连接两个列表，得到一个新列表。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spam = ['cat', 'bat','dog'] + [1,2,3]
print(spam)  #['cat', 'bat', 'dog', 1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;多重赋值技巧&quot;&gt;多重赋值技巧&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spam = ['cat', 'bat','dog']
x,y,z = spam
print(x)  #cat
print(y)  #bat
print(z)  #dog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;元组-字符串-列表--转换&quot;&gt;元组 、字符串 、列表  转换&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; tuple(['cat', 'dog', 5]) 
 ('cat', 'dog', 5)
&amp;gt;&amp;gt;&amp;gt; list(('cat', 'dog', 5)) 
 ['cat', 'dog', 5]
&amp;gt;&amp;gt;&amp;gt; list('hello')
['h', 'e', 'l', 'l', 'o']
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;自动化任务&quot;&gt;自动化任务&lt;/h3&gt;

&lt;h4 id=&quot;正则表达式&quot;&gt;正则表达式&lt;/h4&gt;
&lt;p&gt;Python 中所有正则表达式的函数都在 re 模块中。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; 匹配0次或者一次&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 匹配0次或者多次&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 匹配1次或者多次&lt;/li&gt;
  &lt;li&gt;{n}匹配 n 次前面的分组。&lt;/li&gt;
  &lt;li&gt;{n,}匹配 n 次或更多前面的分组。&lt;/li&gt;
  &lt;li&gt;{,m}匹配零次到 m 次前面的分组。&lt;/li&gt;
  &lt;li&gt;{n,m}匹配至少 n 次、至多 m 次前面的分组。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;n,m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;*?&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;+?&lt;/code&gt;对前面的分组进行非贪心匹配。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^spam&lt;/code&gt; 意味着字符串必须以 spam 开始。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spam$&lt;/code&gt;意味着字符串必须以 spam 结束。&lt;/li&gt;
  &lt;li&gt;.匹配所有字符，换行符除外。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\d&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;\w&lt;/code&gt; 和&lt;code class=&quot;highlighter-rouge&quot;&gt;\s&lt;/code&gt; 分别匹配数字、单词和空格。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\D&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;\W &lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;\S&lt;/code&gt; 分别匹配出数字、单词和空格外的所有字符。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[abc]&lt;/code&gt;匹配方括号内的任意字符(诸如 a、b 或 c)。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[^abc]&lt;/code&gt;匹配不在方括号内的任意字符。
    &lt;h5 id=&quot;用-sub方法替换字符串&quot;&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;sub()&lt;/code&gt;方法替换字符串&lt;/h5&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; namesRegex = re.compile(r'Agent \w+')
&amp;gt;&amp;gt;&amp;gt; namesRegex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.') 

'CENSORED gave the secret documents to CENSORED.'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有时候，你可能需要使用匹配的文本本身，作为替换的一部分。在 sub()的第一 个参数中，可以输入\1、\2、\3……。表示“在替换中输入分组 1、2、3……的文本”。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; agentNamesRegex = re.compile(r'Agent (\w)\w*')
&amp;gt;&amp;gt;&amp;gt; agentNamesRegex.sub(r'\1****', 'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.')

A**** told C**** that E**** knew B**** was a double agent.'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;读写文件&quot;&gt;读写文件&lt;/h4&gt;
&lt;h5 id=&quot;文件及文件路径&quot;&gt;文件及文件路径&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;相对路径：相对于程序的当前工作目录。&lt;/li&gt;
  &lt;li&gt;绝对路径：总是从根文件开始。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;os.makedirs()&lt;/code&gt; 创建文件夹&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;调用 os.path.abspath(path)将返回参数的绝对路径的字符串。这是将相对路径转 换为绝对路径的简便方法。&lt;/li&gt;
  &lt;li&gt;调用 os.path.isabs(path)，如果参数是一个绝对路径，就返回 True，如果参数是 一个相对路径，就返回 False。&lt;/li&gt;
  &lt;li&gt;调用 os.path.relpath(path, start)将返回从 start 路径到 path 的相对路径的字符串。 如果没有提供 start，就使用当前工作目录作为开始路径。&lt;/li&gt;
  &lt;li&gt;调用 os.path.getsize(path)将返回 path 参数中文件的字节数。&lt;/li&gt;
  &lt;li&gt;调用 os.listdir(path)将返回文件名字符串的列表，包含 path 参数中的每个文件 (请注意，这个函数在 os 模块中，而不是 os.path)。&lt;/li&gt;
  &lt;li&gt;检查路径有效性
    &lt;ul&gt;
      &lt;li&gt;如果 path 参数所指的文件或文件夹存在，调用 os.path.exists(path)将返回 True， 否则返回 False&lt;/li&gt;
      &lt;li&gt;如果 path 参数存在，并且是一个文件，调用 os.path.isfile(path)将返回 True，否 则返回 False&lt;/li&gt;
      &lt;li&gt;如果 path 参数存在，并且是一个文件夹，调用 os.path.isdir(path)将返回 True， 否则返回 False。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;===
在 Python 中，读写文件有 3 个步骤:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; 函数，返回一个 File 对象。&lt;/li&gt;
  &lt;li&gt;调用 File 对象的 &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt;或 &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt;方法。&lt;/li&gt;
  &lt;li&gt;调用 File 对象的&lt;code class=&quot;highlighter-rouge&quot;&gt; close()&lt;/code&gt;方法，关闭该文件。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helloFile = open('/Users/your_home_folder/hello.txt')

读文件
helloContent = helloFile.read()

写文件
baconFile = open('bacon.txt', 'w')
baconFile.write('Hello world!\n')
baconFile.close()




&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;项目-生成随机试卷及答案&quot;&gt;项目： 生成随机试卷及答案&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;创建35个试卷文件及对应的答案文件。&lt;/li&gt;
  &lt;li&gt;为每一个试卷随机生成50道题目，次序随机。&lt;/li&gt;
  &lt;li&gt;为每一个问题提供一个正确答案和三个错误答案，次序随机。&lt;/li&gt;
  &lt;li&gt;将测试题目写入试卷文件，将对应的答案写入相应的答案文件中。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- coding: UTF-8 -*-
import random
import os

# 进入工作目录
os.chdir('/Users/Yunis/Desktop/学习/Python/random')
# 打印当前工作目录
print(&quot;当前工作目录为 %s&quot;%(os.getcwd()))

# 首都以及首都集合字典 习题集及答案
capitals = {'Alabama': 'Montgomery', 'Alaska': 'Juneau', 'Arizona': 'Phoenix','Arkansas': 'Little Rock', 'California': 'Sacramento', 'Colorado': 'Denver', 'Connecticut': 'Hartford', 'Delaware': 'Dover', 'Florida': 'Tallahassee', 'Georgia': 'Atlanta', 'Hawaii': 'Honolulu', 'Idaho': 'Boise', 'Illinois': 'Springfield', 'Indiana': 'Indianapolis', 'Iowa': 'Des Moines', 'Kansas': 'Topeka', 'Kentucky': 'Frankfort', 'Louisiana': 'Baton Rouge', 'Maine': 'Augusta', 'Maryland': 'Annapolis', 'Massachusetts': 'Boston', 'Michigan': 'Lansing', 'Minnesota': 'Saint Paul', 'Mississippi': 'Jackson', 'Missouri': 'Jefferson City', 'Montana': 'Helena', 'Nebraska': 'Lincoln', 'Nevada': 'Carson City', 'New Hampshire': 'Concord', 'New Jersey': 'Trenton', 'New Mexico': 'Santa Fe', 'New York': 'Albany', 'North Carolina': 'Raleigh',
'North Dakota': 'Bismarck', 'Ohio': 'Columbus', 'Oklahoma': 'Oklahoma City', 'Oregon': 'Salem', 'Pennsylvania': 'Harrisburg', 'Rhode Island': 'Providence', 'South Carolina': 'Columbia', 'South Dakota': 'Pierre', 'Tennessee': 'Nashville', 'Texas': 'Austin', 'Utah': 'Salt Lake City', 'Vermont': 'Montpelier', 'Virginia': 'Richmond', 'Washington': 'Olympia', 'West Virginia': 'Charleston', 'Wisconsin': 'Madison', 'Wyoming': 'Cheyenne'}

# 循环35次 因为要出35分试卷
for quizNum in range(35):
    quizFile = open('capitalsquiz%s.txt' % (quizNum + 1), 'w')
    answerKeyFile = open('capitalsquiz_answers%s.txt' % (quizNum + 1), 'w')
    quizFile.write('Name:\n\nDate:\n\nPeriod:\n\n')
    quizFile.write((' ' * 20) + 'State Capitals Quiz (Form %s)' % (quizNum + 1))
    quizFile.write('\n\n')
    # 获取字典 keys
    states = list(capitals.keys())
    # 用于将一个列表中的元素打乱。
    random.shuffle(states)

    # 每份试卷有50道题目
    for questionNum in range(50):
        # Get right and wrong answers.
        correctAnswer = capitals[states[questionNum]]
        # 获取答案列表
        wrongAnswers = list(capitals.values())
        # 删除正确的答案选项
        del wrongAnswers[wrongAnswers.index(correctAnswer)]
        # 从错误的答案选项随机选出3个错误的答案
        wrongAnswers = random.sample(wrongAnswers, 3)
        # 给当前题目设置答案集合
        answerOptions = wrongAnswers + [correctAnswer]
        # 打乱 答案顺序
        random.shuffle(answerOptions)
        # 在试卷文件 写入 题号 以及题目
        quizFile.write('%s. What is the capital of %s?\n' % (questionNum + 1,states[questionNum]))
        # 在试卷文件 写入答案选项
        for i in range(4):
            quizFile.write(' %s. %s\n' % ('ABCD'[i], answerOptions[i]))
        quizFile.write('\n')
        # 把正确答案的题号以及正确答案写入答案文件
        answerKeyFile.write('%s. %s\n' % (questionNum + 1, 'ABCD'[
        answerOptions.index(correctAnswer)]))

    # 关闭试卷文件
    quizFile.close()
    # 关闭答案文件
    answerKeyFile.close()

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;项目-多重剪贴板&quot;&gt;项目： 多重剪贴板&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.pyw&lt;/code&gt; 扩展名意味着 Python 运行该程序时，不会显示终端窗口。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- coding: UTF-8 -*-
# mcb.pyw - Saves and loads pieces of text to the clipboard.
#  Usage: py.exe mcb.pyw save &amp;lt;keyword&amp;gt; - Saves clipboard to keyword.
#         py.exe mcb.pyw &amp;lt;keyword&amp;gt; - Loads keyword to clipboard.
#         py.exe mcb.pyw list - Loads all keywords to clipboard.
import shelve, pyperclip, sys
# .pyw 扩展名意味着 Python 运行该程序时，不会显示终端窗口

# 进入工作目录
os.chdir('/Users/Yunis/Desktop/学习/Python/mcb')
# 打印当前工作目录
print(&quot;当前工作目录为 %s&quot;%(os.getcwd()))

# shelve是一额简单的数据存储方案，他只有一个函数就是open()，这个函数接收一个参数就是文件名，然后返回一个shelf对象，你可以用他来存储东西，就可以简单的把他当作一个字典，当你存储完毕的时候，就调用close函数来关闭

# 建立一个存储容器
mcbShelf = shelve.open('mcb')

# 判断参数有几个，
if len(sys.argv) == 3:
    # 判断第2个参数是否为save
    if sys.argv[1].lower() == 'save' :
        # 把粘贴板的值保存在 mcbShelf
        mcbShelf[sys.argv[2]] = pyperclip.paste()
    elif  sys.argv[1].lower() == 'del' :
        # 删除关键字对应的值
        mcbShelf.pop(sys.argv[2])
elif len(sys.argv) == 2:
    if sys.argv[1].lower() == 'list':
        # 把容器中保存的key 填充到粘贴板
        pyperclip.copy(str(list(mcbShelf.keys())))
    elif sys.argv[1] in mcbShelf:
        # 根据传的参数，把容器中对应key的值取出来放置在粘贴板中
        pyperclip.copy(mcbShelf[sys.argv[1]])
# 关闭
mcbShelf.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;组织文件&quot;&gt;组织文件&lt;/h4&gt;
&lt;h5 id=&quot;shutil-模块&quot;&gt;shutil 模块&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;shutil.copy(source, destination)
    &lt;ol&gt;
      &lt;li&gt;将路径 source 处的文件复制到路径 destination 处的文件夹(source 和 destination 都是字符串)&lt;/li&gt;
      &lt;li&gt;如果 destination 是一个文件名，它将 作为被复制文件的新名字。&lt;/li&gt;
      &lt;li&gt;该函数返回一个字符串，表示被复制文件的路径。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;shutil.copytree(source, destination)
    &lt;ol&gt;
      &lt;li&gt;将路径source处的文件 夹，包括它的所有文件和子文件夹，复制到路径 destination 处的文件夹。&lt;/li&gt;
      &lt;li&gt;source 和 destination 参数都是字符串。&lt;/li&gt;
      &lt;li&gt;该函数返回一个字符串，是新复制的文件夹的路径。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;shutil.move(source, destination)
    &lt;ol&gt;
      &lt;li&gt;将路径 source 处的文件夹移动到路径 destination，并返回新位置的绝对路径的字符串。&lt;/li&gt;
      &lt;li&gt;如果 destination 指向一个文件夹，source 文件将移动到 destination 中，并保持 原来的文件名。&lt;/li&gt;
      &lt;li&gt;destination 路径也可以指定一个文件名。source 文件被移动 并改名。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;用 os.unlink(path)将删除 path 处的文件。&lt;/li&gt;
  &lt;li&gt;调用 os.rmdir(path)将删除 path 处的文件夹。该文件夹必须为空，其中没有任
何文件和文件夹。&lt;/li&gt;
  &lt;li&gt;调用 shutil.rmtree(path)将删除 path 处的文件夹，它包含的所有文件和文件夹都会被删除。&lt;/li&gt;
  &lt;li&gt;os.walk()函数 被传入一个字符串值，即一个文件夹的路径。你可以在一个 for 循环语句中使用 os.walk()函数，遍历目录树，就像使用 range()函数遍历一个范围的 数字一样。
    &lt;ol&gt;
      &lt;li&gt;当前文件夹名称的字符串。&lt;/li&gt;
      &lt;li&gt;当前文件夹中子文件夹的字符串的列表。&lt;/li&gt;
      &lt;li&gt;当前文件夹中文件的字符串的列表。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- coding: UTF-8 -*-
import os
for folderName, subfolders, filenames in os.walk('/Users/Yunis/Desktop/学习/Python'):
    print('The current folder is ' + folderName)
    for subfolder in subfolders:
        print('SUBFOLDER OF ' + folderName + ': ' + subfolder)
    for filename in filenames:
        print('FILE INSIDE ' + folderName + ': '+ filename)
    print('')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;zipfile-模块&quot;&gt;zipfile 模块&lt;/h5&gt;

&lt;h6 id=&quot;读取-zip-文件&quot;&gt;读取 ZIP 文件&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;# -*- coding: UTF-8 -*-
import os,zipfile

os.chdir('/Users/Yunis/Desktop/学习/Python/zipfile')
exampleZip = zipfile.ZipFile('t.txt.zip')
# 获取压缩文件集合
print(exampleZip.namelist())
# 获取指定文件信息
spamInfo = exampleZip.getinfo('t.txt')
# 文件真实大小
print(spamInfo.file_size)
# 文件压缩后的大小
print(spamInfo.compress_size)
exampleZip.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;从-zip-文件中解压缩&quot;&gt;从 ZIP 文件中解压缩&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;extractall()
    &lt;ul&gt;
      &lt;li&gt;extractall()方法从 ZIP 文件中解压缩所有文件和文件夹&lt;/li&gt;
      &lt;li&gt;可以向 extractall()传递的一个文件夹名称，它将文件解压缩到那个文件夹，而不是当前工作 目录。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;extract()
    &lt;ul&gt;
      &lt;li&gt;extract()方法从 ZIP 文件中解压缩单个文件&lt;/li&gt;
      &lt;li&gt;传递给 extract()的字符串，必须匹配 namelist()返回的字符串列表中的一个。&lt;/li&gt;
      &lt;li&gt;extract()传递第二个参数，将文件解压缩到指定的文件夹，而不是当 前工作目录。如果第二个参数指定的文件夹不存在，Python 就会创建它。&lt;/li&gt;
      &lt;li&gt;extract() 的返回值是被压缩后文件的绝对路径。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- coding: UTF-8 -*-
import os,zipfile
os.chdir('/Users/Yunis/Desktop/学习/Python/zipfile')
exampleZip = zipfile.ZipFile('t.txt.zip')
# 解压缩所用文件和文件夹 'Yunis' 为路径参数，表示解压缩到这个路径，参数为空表示解压缩到当前路径
# exampleZip.extractall('Yunis')
# 解压缩 单个't.txt' 文件到 'SSY' 路径下，路径为空解压到当前路径
exampleZip.extract('t.txt','SSY')
exampleZip.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;创建和添加到-zip-文件&quot;&gt;创建和添加到 ZIP 文件&lt;/h5&gt;

&lt;p&gt;要创建你自己的压缩 ZIP 文件，必须以“写模式”打开 ZipFile 对象，即传入’w’ 作为第二个参数(这类似于向 open()函数传入’w’，以写模式打开一个文本文件)。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exampleZip = zipfile.ZipFile('t.txt.zip','w')&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- coding: UTF-8 -*-
import os,zipfile
os.chdir('/Users/Yunis/Desktop/学习/Python/zipfile')
# 创建压缩文件
newZip = zipfile.ZipFile('new.zip','w')
# 把 t.txt 文件 写入 压缩文件内 compress_type ：压缩方式
newZip.write('t.txt', compress_type=zipfile.ZIP_DEFLATED)
newZip.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;将带有美国风格日期的文件改名为欧洲风格日期&quot;&gt;将带有美国风格日期的文件改名为欧洲风格日期&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- coding: UTF-8 -*-
import shutil,os,re

def renameDatesInpath(path):
    # 获取文件路径下的文件集合
    # print(path)
    # 创建正则表达式
    datePattern = re.compile(r'^(.*?)((0|1)\d)-((0|1|2|3)\d)-((19|20)\d\d)(.*?)$')

    # 获取文件路径下的文件集合
    for amerFilename in os.listdir(path):
        # 正则表达式对象匹配结果
        # Regex 对象的 search()方法查找传入的字符串，寻找该正则表达式的所有匹配。如 果字符串中没有找到该正则表达式模式，search()方法将返回 None。如果找到了该模式， search()方法将返回一个 Match 对象。Match 对象有一个 group()方法，它返回被查找字 符串中实际匹配的文本
        mo = datePattern.search(amerFilename)
        # 如果这个文件没有匹配，开始匹配下个文件
        if mo == None :
            continue
        # re.compile(r'^(.*?)((0|1)\d)-((0|1|2|3)\d)-((19|20)\d\d)(.*?)$')
        # group index
        # datePattern = re.compile(r'^(1)((2)3)-((4)5)-((6)7)(8)$')

        # 获取 Match 对象 对应的字符串
        beforePart = mo.group(1)
        monthPart = mo.group(2)
        dayPart = mo.group(4)
        yearPart = mo.group(6)
        afterPart = mo.group(8)
        # 组成新的文件名
        euroFilename = beforePart + dayPart + '-' + monthPart + '-' + yearPart + afterPart


        absWorkingDir = os.path.abspath(path)
        amerFilename = os.path.join(absWorkingDir, amerFilename)
        euroFilename = os.path.join(absWorkingDir, euroFilename)
        print('Renaming &quot;%s&quot; to &quot;%s&quot;...' % (amerFilename, euroFilename))
        shutil.move(amerFilename, euroFilename) # uncomment after testing

renameDatesInpath('/Users/Yunis/Desktop/学习/Python/date')

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;从-web-抓取信息&quot;&gt;从 Web 抓取信息&lt;/h4&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt; 下载文件，并保存到硬盘。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;调用 requests.get()下载该文件。&lt;/li&gt;
  &lt;li&gt;用’wb’调用 open()，以写二进制的方式打开一个新文件。&lt;/li&gt;
  &lt;li&gt;利用 Respose 对象的 iter_content()方法做循环。&lt;/li&gt;
  &lt;li&gt;在每次迭代中调用 write()，将内容写入该文件。&lt;/li&gt;
  &lt;li&gt;调用 close()关闭该文件。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- coding: UTF-8 -*-
import requests,os,sys

currentFilePath = sys.path[0]
webFilePath = os.path.join(currentFilePath, &quot;file&quot;)
os.chdir(webFilePath)
print(os.getcwd())
res = requests.get(&quot;http://static.open-open.com/lib/uploadImg/20160623/20160623173015_416.png&quot;)
playFile = open('python.jpg', 'wb')
for chunk in res.iter_content(100000):
    playFile.write(chunk)
playFile.close()

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;用-beautifulsoup-模块解析-html&quot;&gt;用 BeautifulSoup 模块解析 HTML&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;传递给 select()方法的选择器&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;将匹配…&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;soup.select('div')&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;所有名为&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;的元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;soup.select('#author')&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;带有 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; 属性为 &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; 的元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;soup.select('.notice')&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;所有使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;CSS class&lt;/code&gt; 属性名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;notice&lt;/code&gt; 的元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;soup.select('div span')&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;所有在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;元素之内的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt;元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;soup.select('div &amp;gt; span')&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;所有直接在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;元素之内的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt;元素，中间没有其他元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;soup.select('input[name]')&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;所有名为&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt;，并有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; 属性，其值无所谓的元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;soup.select('input[type=&quot;button&quot;]')&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;所有名为&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt;，并有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; 属性，其值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;button&lt;/code&gt; 的元素&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这段代码将带有 id=&quot;author&quot;的元素，从示例 HTML 中找出来

elems = exampleSoup.select('#author')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;im-feeling-lucky-百度-查找&quot;&gt;“I’m Feeling Lucky” 百度 查找&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://yunissong.github.io/2017/10/26/Python%E5%B0%8F%E5%B7%A5%E5%85%B7-%E6%A0%B9%E6%8D%AE%E8%BE%93%E5%85%A5%E5%85%B3%E9%94%AE%E5%AD%97%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%9A%84%E7%AC%AC%E4%B8%80%E9%A1%B5/&quot;&gt;Python小工具-根据输入关键字自动打开百度搜索结果的第一页&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/12/Python%E7%BC%96%E7%A8%8B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E8%AE%A9%E7%B9%81%E7%90%90%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/12/Python%E7%BC%96%E7%A8%8B%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E8%AE%A9%E7%B9%81%E7%90%90%E5%B7%A5%E4%BD%9C%E8%87%AA%E5%8A%A8%E5%8C%96/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>七周七语言：理解多种编程范型--Ruby</title>
        <description>&lt;h1 id=&quot;七周七语言理解多种编程范型ruby&quot;&gt;七周七语言：理解多种编程范型–Ruby&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;无论用哪一类语言，都必须全面、透彻地理解集合。&lt;/li&gt;
  &lt;li&gt;当你新接触一门语言的时候，有些问题是需要首先去思考的，“这门语言的编程模型是什么”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ruby&quot;&gt;Ruby&lt;/h3&gt;
&lt;h4 id=&quot;基本语法&quot;&gt;基本语法&lt;/h4&gt;
&lt;p&gt;解释型， 意味着Ruby代码由解释器而非编译器执行。
动态类型，意味着类型在运行时而非编译时绑定。
尽管从执行速度上说，Ruby 谈不上有多高效，但它却能让程序员的编程效率大幅提高。
在Ruby中，一切皆 为对象，就连每个单独的数字也不例外。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;irb(main):009:0&amp;gt; 4.class
=&amp;gt; Integer
irb(main):011:0&amp;gt; 4.methods
=&amp;gt; [:%, :&amp;amp;, :*, :+, :-, :/, :&amp;lt;, :&amp;gt;, :^, :|, :~, :-@, :**, :&amp;lt;=&amp;gt;, :&amp;lt;&amp;lt;, :&amp;gt;&amp;gt;, :&amp;lt;=, :&amp;gt;=, :==, :===, :[], :inspect, :size, :succ, :to_int, :to_s, :to_i, :to_f, :next, :div, :upto, :chr, :ord, :coerce, :divmod, :fdiv, :modulo, :remainder, :abs, :magnitude, :integer?, :floor, :ceil, :round, :truncate, :odd?, :even?, :downto, :times, :pred, :bit_length, :digits, :to_r, :numerator, :denominator, :rationalize, :gcd, :lcm, :gcdlcm, :+@, :eql?, :singleton_method_added, :i, :real?, :zero?, :nonzero?, :finite?, :infinite?, :step, :positive?, :negative?, :quo, :arg, :rectangular, :rect, :polar, :real, :imaginary, :imag, :abs2, :angle, :phase, :conjugate, :conj, :to_c, :between?, :clamp, :instance_of?, :kind_of?, :is_a?, :tap, :public_send, :remove_instance_variable, :singleton_method, :instance_variable_set, :define_singleton_method, :method, :public_method, :extend, :to_enum, :enum_for, :=~, :!~, :respond_to?, :freeze, :object_id, :send, :display, :nil?, :hash, :class, :singleton_class, :clone, :dup, :itself, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :frozen?, :methods, :singleton_methods, :protected_methods, :private_methods, :public_methods, :instance_variable_get, :instance_variables, :instance_variable_defined?, :!, :!=, :__send__, :equal?, :instance_eval, :instance_exec, :__id__]
irb(main):018:0&amp;gt; 4.to_f
=&amp;gt; 4.0
irb(main):027:0&amp;gt; false.class
=&amp;gt; FalseClass
irb(main):028:0&amp;gt; true.class
=&amp;gt; TrueClass
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;irb(main):002:0&amp;gt; x = 4
=&amp;gt; 4
irb(main):003:0&amp;gt; puts &quot;判断语句&quot; if x == 4
判断语句
=&amp;gt; nil
irb(main):004:0&amp;gt; puts &quot;判断语句&quot; unless x == 4
=&amp;gt; nil
irb(main):005:0&amp;gt; puts &quot;判断语句&quot; unless x == 5
判断语句
=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;irb(main):006:0&amp;gt; x = x + 2 while x &amp;lt; 10
=&amp;gt; nil
irb(main):007:0&amp;gt; x
=&amp;gt; 10


irb(main):008:0&amp;gt; x = x - 1 until x == 1
=&amp;gt; nil
irb(main):009:0&amp;gt; x
=&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 之外，其他的都代表 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 。&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; 也是 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 
 除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 之外，其他的都代表 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 。&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; 也是 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 
 除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 之外，其他的都代表 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 。&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; 也是 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; 也是 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 
&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; 也是 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 
&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; 也是 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; 等同于 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; 等同于 &lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;直到真正尝试执代码时，&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; 才进行类型检查。这一概念叫做 &lt;code class=&quot;highlighter-rouge&quot;&gt;动态类型&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在面向对象设计思想中，有这样一个重要原则:对&lt;code class=&quot;highlighter-rouge&quot;&gt;接口&lt;/code&gt;编码，不对实现编码。&lt;/p&gt;

&lt;h4 id=&quot;ruby-与-正则表达式&quot;&gt;Ruby 与 正则表达式&lt;/h4&gt;
&lt;h5 id=&quot;创建正则表达式&quot;&gt;创建正则表达式&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;将模式的定义放在两个正斜杠之间,返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Regexp&lt;/code&gt;对象 &lt;code class=&quot;highlighter-rouge&quot;&gt;reg1 = /^[a-z]*$/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Regexp&lt;/code&gt;对象 &lt;code class=&quot;highlighter-rouge&quot;&gt;reg2 = Regexp.new(‘^[a-z]*$’) &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;使用前置的&lt;code class=&quot;highlighter-rouge&quot;&gt;%r&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;reg3 = %r{^[a-z]*$}  &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;匹配&quot;&gt;匹配&lt;/h5&gt;
&lt;p&gt;匹配正则式: String和Regexp都支持以下两个方法&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt;方法: 匹配成功时返回&lt;code class=&quot;highlighter-rouge&quot;&gt;MatchData&lt;/code&gt;类的一个实例；否则返回nil；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;=~&lt;/code&gt; 操作符: 匹配成功,返回一个索引(integer)；否则,返回nil；&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;    puts( /abc/ =~ 'abc' )              #=&amp;gt;return 0
    puts( /abc/ =~ 'cdg' )              #=&amp;gt;return nil
    puts( /abc/.match('abc') )          #=&amp;gt;return abc
    puts( /abc/.match('cdg') )          #=&amp;gt;return nil
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;联系1&quot;&gt;联系1&lt;/h4&gt;

&lt;h5 id=&quot;ruby-替换字符串的方法&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; 替换字符串的方法。&lt;/h5&gt;
&lt;p&gt;1，通过 正则&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;irb(main):005:0&amp;gt; string = &quot;Hello Ruby.&quot;
=&amp;gt; &quot;Hello Ruby.&quot;
irb(main):006:0&amp;gt; string.gsub(/Ruby/,'world')
=&amp;gt; &quot;Hello world.&quot;


irb(main):025:0&amp;gt; string = &quot;Hello Ruby.&quot;
=&amp;gt; &quot;Hello Ruby.&quot;
irb(main):026:0&amp;gt; string.gsub(/(.)/,'&amp;lt;\1&amp;gt;')
=&amp;gt; &quot;&amp;lt;H&amp;gt;&amp;lt;e&amp;gt;&amp;lt;l&amp;gt;&amp;lt;l&amp;gt;&amp;lt;o&amp;gt;&amp;lt; &amp;gt;&amp;lt;R&amp;gt;&amp;lt;u&amp;gt;&amp;lt;b&amp;gt;&amp;lt;y&amp;gt;&amp;lt;.&amp;gt;&quot;


irb(main):001:0&amp;gt; string = &quot;Hello Ruby.&quot;
=&amp;gt; &quot;Hello Ruby.&quot;
irb(main):002:0&amp;gt;  string.gsub(/(\w)/,'&amp;lt;\1&amp;gt;')
=&amp;gt; &quot;&amp;lt;H&amp;gt;&amp;lt;e&amp;gt;&amp;lt;l&amp;gt;&amp;lt;l&amp;gt;&amp;lt;o&amp;gt; &amp;lt;R&amp;gt;&amp;lt;u&amp;gt;&amp;lt;b&amp;gt;&amp;lt;y&amp;gt;.&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2,&lt;code class=&quot;highlighter-rouge&quot;&gt;replace&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;irb(main):027:0&amp;gt; string = &quot;Hello Ruby.&quot;
=&amp;gt; &quot;Hello Ruby.&quot;
irb(main):028:0&amp;gt; string.replace(&quot;Yunis.&quot;)
=&amp;gt; &quot;Yunis.&quot;
irb(main):029:0&amp;gt; puts string
Yunis.
=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;range&quot;&gt;range&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;irb(main):030:0&amp;gt; rang1 = (1..10).to_a
=&amp;gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
irb(main):031:0&amp;gt; range2 = ('bar'..'bat').to_a
=&amp;gt; [&quot;bar&quot;, &quot;bas&quot;, &quot;bat&quot;]




irb(main):046:0&amp;gt; (1..10).each{puts &quot;Yunis&quot;}
Yunis
Yunis
Yunis
Yunis
Yunis
Yunis
Yunis
Yunis
Yunis
Yunis
=&amp;gt; 1..10



irb(main):047:0&amp;gt; (1..10).each{|index| puts &quot;Yunis #{index}&quot;}
Yunis 1
Yunis 2
Yunis 3
Yunis 4
Yunis 5
Yunis 6
Yunis 7
Yunis 8
Yunis 9
Yunis 10
=&amp;gt; 1..10
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;执行-ruby-文件&quot;&gt;执行 Ruby 文件&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$-&amp;gt; ruby /Users/Yunis/Desktop/First.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;正则匹配规则&quot;&gt;正则匹配规则&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;规则&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/a/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配字符 a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/\?/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配特殊字符?。特殊字符包括^, $, ? , ., /, \, [, ], {, }, (, ), +, *.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配任意字符，例如/a./匹配ab和ac。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/[ab]c/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配ac和bc,[]之间代表范围,例如：/[a-z]/ , /[a-zA-Z0-9]/。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/[^a-zA-Z0-9]/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配不在该范围内的字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/[\d]/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;代表任意数字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/[\w]/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;代表任意字母，数字或者_&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/[\s]/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;代表空白字符，包括空格，TAB和换行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/[\D]/,/[\W]/,/[\S]/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;均为上述的否定情况&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;代表0或1个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;代表0或多个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;代表1或多个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/d{3}/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配3个数字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/d{1,10}/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配1-10个数字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d{3,}/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配3个数字以上&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/([A-Z]\d){5}/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配首位是大写字母，后面4个是数字的字符串&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;猜数字的程序&quot;&gt;猜数字的程序。&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;number = rand(10)


def testRuby(number1,number2)
    
    if (number1 &amp;gt; number2)
        puts &quot;你输入的数字#{number1}大于随机数&quot;
        inputNumber = gets().to_i
        testRuby(inputNumber,number2)
        
        elsif (number1 &amp;lt; number2)
        puts &quot;你输入的数字#{number1}小于随机数&quot;
        inputNumber = gets().to_i
        testRuby(inputNumber,number2)
        
        else
        puts &quot;恭喜你猜对了。&quot;
    end
    
end


puts &quot;猜猜数字是多少？&quot;
inputNumber = gets().to_i
testRuby(inputNumber,number)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;函数&quot;&gt;函数&lt;/h4&gt;
&lt;h5 id=&quot;定义函数&quot;&gt;定义函数&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irb(main):001:0&amp;gt; def rubyTest
irb(main):002:1&amp;gt; true
irb(main):003:1&amp;gt; end
=&amp;gt; :rubyTest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;数组&quot;&gt;数组&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irb(main):015:0&amp;gt; aniamls = [&quot;lions&quot;,&quot;tigers&quot;,&quot;bears&quot;]
=&amp;gt; [&quot;lions&quot;, &quot;tigers&quot;, &quot;bears&quot;]
irb(main):016:0&amp;gt; aniamls[0]
=&amp;gt; &quot;lions&quot;
irb(main):017:0&amp;gt; aniamls[0..2]
=&amp;gt; [&quot;lions&quot;, &quot;tigers&quot;, &quot;bears&quot;]
irb(main):018:0&amp;gt; aniamls[-2]
=&amp;gt; &quot;tigers&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ruby 中数组 可以塞不同是数据类型。&lt;/p&gt;
&lt;h5 id=&quot;散列表&quot;&gt;散列表&lt;/h5&gt;
&lt;p&gt;集合里面就是一个个用来存储对象的桶。在 散列表的桶里，每个对象上都贴着一张标识。这标识就是键，而对象就是键所对应的值。散列表就是一串这样的键值对。&lt;/p&gt;
&lt;h5 id=&quot;代码块和-yield&quot;&gt;代码块和 yield&lt;/h5&gt;
&lt;h5 id=&quot;定义类&quot;&gt;定义类&lt;/h5&gt;
&lt;h5 id=&quot;编写-mixin&quot;&gt;编写 Mixin&lt;/h5&gt;
&lt;h5 id=&quot;模块可枚举和集合&quot;&gt;模块、可枚举和集合&lt;/h5&gt;

</description>
        <pubDate>Thu, 21 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/21/%E4%B8%83%E5%91%A8%E4%B8%83%E8%AF%AD%E8%A8%80-%E7%90%86%E8%A7%A3%E5%A4%9A%E7%A7%8D%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B-Ruby/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/21/%E4%B8%83%E5%91%A8%E4%B8%83%E8%AF%AD%E8%A8%80-%E7%90%86%E8%A7%A3%E5%A4%9A%E7%A7%8D%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B-Ruby/</guid>
        
        <category>内功</category>
        
        <category>七周七语言</category>
        
        
      </item>
    
      <item>
        <title>iOS 11、iPhone X、Xcode9适配</title>
        <description>&lt;h1 id=&quot;ios-11iphone-xxcode9适配&quot;&gt;iOS 11、iPhone X、Xcode9适配&lt;/h1&gt;

&lt;p&gt;遇到的问题&lt;/p&gt;

&lt;h3 id=&quot;1-启动图变形&quot;&gt;1 启动图变形。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/media/15059019605960/%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%8F%98%E5%BD%A2.png&quot; alt=&quot;启动图变形&quot; /&gt;&lt;/p&gt;

&lt;p&gt;项目采用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;LaunchScreen.storyboard&lt;/code&gt; 当启动视图，&lt;code class=&quot;highlighter-rouge&quot;&gt;LaunchScreen.storyboard&lt;/code&gt;里面加载一个图片填充了整个视图，由于之前的 &lt;code class=&quot;highlighter-rouge&quot;&gt;iPhone&lt;/code&gt; 宽高比例差别不到，也就没有注意到图片的变形，今天 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;iPhone X&lt;/code&gt; 上图片变形严重。
解决方案：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;LaunchImage&lt;/code&gt;，但是美工需要切各个不同 &lt;code class=&quot;highlighter-rouge&quot;&gt;iPhone&lt;/code&gt; 的图片。&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;LaunchScreen.storyboard&lt;/code&gt;，重新设置 图片的约束。设置left、right、top与视图相同，比例设置为原图片比例。然后视图背景设置为与图片边框相同的背景。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2-导航视图上移被-刘海遮挡&quot;&gt;2 导航视图上移，被 刘海遮挡&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/media/15059019605960/15059020743807.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/media/15059019605960/15059020905209.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/media/15059019605960/15059021153942.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们项目中的导航视图都是自定义的导航视图，所以会出现这样的问题。
这个解决起来就简单粗暴了。
判断 手机型号，然后重新设置视图高度。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;UIDevice+SYHelp.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UIDevice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;SYHelp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isiPhoneX&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIScreen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;812&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isiOS11&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIDevice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;currentDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;systemVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floatValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;3-mjrefresh-视图不隐藏&quot;&gt;3 MJRefresh 视图不隐藏&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/media/15059019605960/15059023075980.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个解决方法就是判断手机型号和系统版本号，然后让视图上移。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    BOOL isIphoneX = [UIDevice isiPhoneX];
    BOOL isiOS11 = [UIDevice isiOS11];
    [mainScrollView mas_makeConstraints:^(MASConstraintMaker *make) {
        if (isiOS11) {
            make.left.right.bottom.equalTo(self);
            if (isIphoneX) {
                make.top.equalTo(self).offset(- 44);//兼容mj bug
            }else{
                make.top.equalTo(self).offset(- 20);//兼容mj bug
            }
        }else
        {
            make.edges.equalTo(self);

        }
  
    }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;或者也可以使用最新版的 &lt;code class=&quot;highlighter-rouge&quot;&gt;MJRefresh&lt;/code&gt; 也许作者已经适配了 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS 11&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;xcode-9&quot;&gt;Xcode 9&lt;/h3&gt;

&lt;p&gt;目前使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode 9&lt;/code&gt; 没有发现有特殊需要修改的地方。&lt;/p&gt;

&lt;p&gt;使用半天的感受：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;代码提示更烂了，感觉还不如 8，有时候输入回车键不会自动填充大括号了。&lt;/li&gt;
  &lt;li&gt;使用起来略卡。&lt;/li&gt;
  &lt;li&gt;支持多开模拟器，安装app 也很方便，直接把 &lt;code class=&quot;highlighter-rouge&quot;&gt;.app&lt;/code&gt; 文件拖拽就可以安装。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;–&lt;/h3&gt;
&lt;p&gt;总体来说，我们的项目适配的工作量还是很小的，我用了一个下午把两个工程的适配都做好了，主要是我们工程中大量的采用 &lt;code class=&quot;highlighter-rouge&quot;&gt;H5&lt;/code&gt; 页面，适配的工作没有那么大。&lt;/p&gt;

</description>
        <pubDate>Wed, 20 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/20/iOS-11-iPhone-X-Xcode9%E9%80%82%E9%85%8D/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/20/iOS-11-iPhone-X-Xcode9%E9%80%82%E9%85%8D/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Swift30Projects</title>
        <description>&lt;h1 id=&quot;swift30projects&quot;&gt;Swift30Projects&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;0-goodasoldphones&quot;&gt;0 GoodAsOldPhones&lt;/h2&gt;

&lt;h3 id=&quot;使用-storyboard-默认加载-tabbar&quot;&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt; 默认加载 &lt;code class=&quot;highlighter-rouge&quot;&gt;tabbar&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt; 加载 &lt;code class=&quot;highlighter-rouge&quot;&gt;tabbar&lt;/code&gt; 时，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Editor&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Embed In&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Tab Bar Controller&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/media/15048621506323/15048622289028.jpg&quot; alt=&quot;tabbar&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;为-tabbar-添加控制器&quot;&gt;为 &lt;code class=&quot;highlighter-rouge&quot;&gt;tabbar&lt;/code&gt; 添加控制器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;把 &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; 加入到 &lt;code class=&quot;highlighter-rouge&quot;&gt;tabbar&lt;/code&gt; 控制器，需要先选择  &lt;code class=&quot;highlighter-rouge&quot;&gt;tabbar&lt;/code&gt; 控制器，然后 按着 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; 键 拖线到  &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;,选择 &lt;code class=&quot;highlighter-rouge&quot;&gt;View controllers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/media/15048621506323/q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;类-和-结构-的区别&quot;&gt;类 和 结构 的区别&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;类 和 结构 的区别
    &lt;ol&gt;
      &lt;li&gt;Structures
        &lt;ol&gt;
          &lt;li&gt;Useful for representing values
            &lt;ul&gt;
              &lt;li&gt;Implicit copying of values&lt;/li&gt;
              &lt;li&gt;Data is immutable&lt;/li&gt;
              &lt;li&gt;Fast memory allocation (stack)
    * Classes&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Useful for representing objects
            &lt;ul&gt;
              &lt;li&gt;Implicit sharing of objects&lt;/li&gt;
              &lt;li&gt;Data is mutable&lt;/li&gt;
              &lt;li&gt;Slower memory allocation (heap)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;guard-语句&quot;&gt;guard 语句&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;与if语句相同的是，guard也是基于一个表达式的布尔值去判断一段代码是否该被执行。与if语句不同的是，guard只有在条件不满足的时候才会执行这段代码。你可以把guard近似的看做是Assert，但是你可以优雅的退出而非崩溃。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func fooGuard(x: Int?) {
    guard let x = x where x &amp;gt; 0 else {
        // 变量不符合条件判断时，执行下面代码
        return
    }

    // 使用x
    x.description
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 08 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/08/Swift30Projects/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/08/Swift30Projects/</guid>
        
        <category>Swift</category>
        
        
      </item>
    
      <item>
        <title>命令行软件</title>
        <description>&lt;h1 id=&quot;命令行软件&quot;&gt;命令行软件&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mac&lt;/code&gt; 下安装命令行软件 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install&lt;/code&gt;，譬如 安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;tree&lt;/code&gt; ，就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install tree&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tree&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tree&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;列出文件层级&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/15046854241597/shell_tree.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;shellcheck&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shellcheck&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;检查脚本的错误&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/15046854241597/15046866221935.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;thefuck&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;thefuck&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;安装后，记得替换别名&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alias fuck='eval $(thefuck $(fc -ln -1)); history -r'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/15046854241597/15046870856588.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cloc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cloc&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;代码统计神器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/15046854241597/15046872073389.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cowsay&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cowsay&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;额，其实就是个恶趣味，挺有趣的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/15046854241597/15046872820303.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;figlet&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;figlet&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;将输入字符转换成艺术字体。
&lt;code class=&quot;highlighter-rouge&quot;&gt;figlet &quot;Y u n i s&quot;&lt;/code&gt;
&lt;img src=&quot;/media/15046854241597/WX20171023-150731@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;bwm-ng&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bwm-ng&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;实时网速查看
&lt;code class=&quot;highlighter-rouge&quot;&gt;bwm-ng  -d&lt;/code&gt;
&lt;img src=&quot;/media/15046854241597/WX20171023-150816@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;htop&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;htop&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;进程管理软件
&lt;code class=&quot;highlighter-rouge&quot;&gt;htop&lt;/code&gt;
&lt;img src=&quot;/media/15046854241597/WX20171023-150840@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/06/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BD%AF%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/06/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BD%AF%E4%BB%B6/</guid>
        
        <category>内功</category>
        
        
      </item>
    
      <item>
        <title>单元测试</title>
        <description>&lt;h1 id=&quot;单元测试&quot;&gt;单元测试&lt;/h1&gt;
&lt;h3 id=&quot;为什么要写单元测试&quot;&gt;为什么要写单元测试&lt;/h3&gt;
&lt;h3 id=&quot;如何写单元测试&quot;&gt;如何写单元测试&lt;/h3&gt;
&lt;h4 id=&quot;那些应该写单元测试那些不应该&quot;&gt;那些应该写单元测试。那些不应该&lt;/h4&gt;

&lt;p&gt;为了更方便地进行单元测试，业务代码应避免以下情况：&lt;/p&gt;

&lt;p&gt;存在太多条件逻辑
构造函数中做的事情太多
存在太多全局状态
混杂了太多无关的逻辑
存在太多静态方法
存在过多外部依赖&lt;/p&gt;

&lt;p&gt;http://liuyanwei.jumppo.com/2016/03/10/iOS-unit-test.html&lt;/p&gt;

&lt;p&gt;http://www.hollischuang.com/archives/972&lt;/p&gt;

&lt;p&gt;单元测试在实际工作无法推进的原因，无外乎以下两点：缺乏实施动力和缺少实战经验。&lt;/p&gt;

&lt;p&gt;http://xiangwangfeng.com/2016/10/17/%E8%B5%B0%E5%87%BA-iOS-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9B%B0%E5%A2%83/&lt;/p&gt;

&lt;p&gt;SDWeb 如何写单元测试&lt;/p&gt;

&lt;p&gt;http://www.uml.org.cn/Test/201306072.asp&lt;/p&gt;

&lt;p&gt;https://www.wangjiawen.com/ios/ios-unit-testing-of-kiwi&lt;/p&gt;

&lt;p&gt;http://tmq.qq.com/2017/07/ios/&lt;/p&gt;

&lt;p&gt;http://draveness.me/ios-kai-fa-zhong-de-zhong-gou.html&lt;/p&gt;

&lt;p&gt;https://doc.yonyoucloud.com/doc/FunctionalReactiveProgrammingOniOS/chapter6/testing_viewModels.html&lt;/p&gt;

&lt;p&gt;https://charminglee1973.wordpress.com/2015/06/02/ios%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8Bviewcontroller%E7%AF%87/&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/31/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/31/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
        
        <category>内功</category>
        
        
      </item>
    
      <item>
        <title>NSAssert简单使用</title>
        <description>&lt;h1 id=&quot;nsassert简单使用&quot;&gt;NSAssert简单使用&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSAssert&lt;/code&gt; 的定义如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define NSAssert(condition, desc, ...)	\
    do {				\
	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
	if (!(condition)) {		\
        NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
            __assert_file__ = __assert_file__ ? __assert_file__ : @&quot;&amp;lt;Unknown File&amp;gt;&quot;; \
	    [[NSAssertionHandler currentHandler] handleFailureInMethod:_cmd \
		object:self file:__assert_file__ \
	    	lineNumber:__LINE__ description:(desc), ##__VA_ARGS__]; \
	}				\
        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
    } while(0)
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;当 &lt;code class=&quot;highlighter-rouge&quot;&gt;condition&lt;/code&gt; 判断条件为 &lt;code class=&quot;highlighter-rouge&quot;&gt;假&lt;/code&gt; 的时候，程序终止，提示错误，提示语为 &lt;code class=&quot;highlighter-rouge&quot;&gt;desc&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;当 &lt;code class=&quot;highlighter-rouge&quot;&gt;condition&lt;/code&gt; 判断条件为 &lt;code class=&quot;highlighter-rouge&quot;&gt;真&lt;/code&gt; 的时候，程序继续运行。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; NSAssert(self.umPushAppKey != nil, @&quot;请设置友盟key&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;当 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.umPushAppKey&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;，判断条件 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.umPushAppKey != nil&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;假&lt;/code&gt;，程序终止，提示 &lt;code class=&quot;highlighter-rouge&quot;&gt;请设置友盟key&lt;/code&gt;。
    &lt;ul&gt;
      &lt;li&gt;提示语为： &lt;code class=&quot;highlighter-rouge&quot;&gt;Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: '请设置友盟key'&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;当 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.umPushAppKey&lt;/code&gt; 不为 &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;，判断条件 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.umPushAppKey != nil&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;真&lt;/code&gt;，程序继续运行。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; NSAssert(self.umPushAppKey, @&quot;请设置友盟key&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;当 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.umPushAppKey&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;，判断条件 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.umPushAppKey&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;假&lt;/code&gt;，程序终止，提示 &lt;code class=&quot;highlighter-rouge&quot;&gt;请设置友盟key&lt;/code&gt;。
    &lt;ul&gt;
      &lt;li&gt;提示语为： &lt;code class=&quot;highlighter-rouge&quot;&gt;Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: '请设置友盟key'&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;当 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.umPushAppKey&lt;/code&gt; 不为 &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;，判断条件 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.umPushAppKey&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;真&lt;/code&gt;，程序继续运行。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 28 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/28/NSAssert%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/28/NSAssert%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
        
        
      </item>
    
      <item>
        <title>iOS应用架构谈学习笔记</title>
        <description>&lt;h1 id=&quot;ios应用架构谈学习笔记&quot;&gt;iOS应用架构谈学习笔记&lt;/h1&gt;

&lt;p&gt;本文是学习 &lt;a href=&quot;https://casatwy.com/&quot;&gt;反革命工程师&lt;/a&gt; 关于架构的的一系列博文的笔记。&lt;/p&gt;

&lt;p&gt;原博文链接：
&lt;a href=&quot;https://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html&quot;&gt;iOS应用架构谈 开篇&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://casatwy.com/iosying-yong-jia-gou-tan-viewceng-de-zu-zhi-he-diao-yong-fang-an.html&quot;&gt;iOS应用架构谈 view层的组织和调用方案&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html&quot;&gt;iOS应用架构谈 网络层设计方案&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://casatwy.com/iosying-yong-jia-gou-tan-ben-di-chi-jiu-hua-fang-an-ji-dong-tai-bu-shu.html&quot;&gt;iOS应用架构谈 本地持久化方案及动态部署&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://casatwy.com/iOS-Modulization.html&quot;&gt;iOS应用架构谈 组件化方案&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;view层的组织和调用方案&quot;&gt;view层的组织和调用方案&lt;/h2&gt;

&lt;h3 id=&quot;代码布局&quot;&gt;代码布局&lt;/h3&gt;
&lt;p&gt;代码布局的大概样式。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark - Life Cycle

- (void)viewDidLoad {
    [super viewDidLoad];
    //加载页面
}
- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    //布局
}
- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    //监听事件
}
- (void)dealloc
{
    
}
#pragma mark - Intial Methods
//初始化数据
- (void)assignDate
{
    
}
- (void)settingAppearance
{
    
}
- (void)loadSubViews
{
    
}
#pragma mark - Target Methods
//点击事件或通知事件

#pragma mark - Network Methods
//网络请求

#pragma mark - Public Method
//外部方法

#pragma mark - Private Method
//本类方法

#pragma mark - Delegate
//代理方法


#pragma mark - Lazy Loads
//懒加载 Getter方法

#pragma mark - set
//Setter方法
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;每一个delegate都把对应的protocol名字带上，delegate方法不要到处乱写，写到一块区域里面去&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;在ios开发领域中怎样才算是mvc划分的正确姿势&quot;&gt;在iOS开发领域中，怎样才算是MVC划分的正确姿势？&lt;/h3&gt;

&lt;p&gt;M应该做的事：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;给ViewController提供数据&lt;/li&gt;
  &lt;li&gt;给ViewController存储数据提供接口&lt;/li&gt;
  &lt;li&gt;提供经过抽象的业务基本组件，供Controller调度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C应该做的事：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;管理View Container的生命周期&lt;/li&gt;
  &lt;li&gt;负责生成所有的View实例，并放入View Container&lt;/li&gt;
  &lt;li&gt;监听来自View与业务有关的事件，通过与Model的合作，来完成对应事件的业务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;V应该做的事：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;响应与业务无关的事件，并因此引发动画效果，点击反馈（如果合适的话，尽量还是放在View去做）等。&lt;/li&gt;
  &lt;li&gt;界面元素表达&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;拆分的心法&quot;&gt;拆分的心法&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;第一心法：保留最重要的任务，拆分其它不重要的任务&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;在iOS开发领域内，UIViewController承载了非常多的事情，比如View的初始化，业务逻辑，事件响应，数据加工等等，当然还有更多我现在也列举不出来，但是我们知道有一件事情Controller肯定逃不掉要做：协调V和M。也就是说，不管怎么拆，协调工作是拆不掉的。那么剩下的事情我们就可以拆了，比如    UITableView的DataSource。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第二心法：拆分后的模块要尽可能提高可复用性，尽量做到DRY&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;根据第一心法拆开来的东西，很有可能还是强业务相关的，这种情况有的时候无法避免。但我们拆也要拆得好看，拆出来的部分最好能够归成某一类对象，然后最好能够抽象出一个通用逻辑出来，使他能够复用。即使不能抽出通用逻辑，那也尽量抽象出一个protocol，来实现IOP。这里有篇关于&lt;a href=&quot;https://casatwy.com/tiao-chu-mian-xiang-dui-xiang-si-xiang-er-duo-tai.html&quot;&gt;IOP的文章&lt;/a&gt;，大家看了就明白优越性了。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第三心法：要尽可能提高拆分模块后的抽象度&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;尽量高层级的抽象。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;设计心法&quot;&gt;设计心法&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;第一心法：尽可能减少继承层级，涉及苹果原生对象的尽量不要继承
    &lt;ul&gt;
      &lt;li&gt;继承是罪恶，尽量不要继承。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第二心法：做好代码规范，规定好代码在文件中的布局，尤其是ViewController
    &lt;ul&gt;
      &lt;li&gt;这主要是为了提高可维护性。在一个文件非常大的对象中，尤其要限制好不同类型的代码在文件中的布局。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第三心法：能不放在Controller做的事情就尽量不要放在Controller里面去做&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;小总结&quot;&gt;小总结&lt;/h4&gt;

&lt;p&gt;其实针对View层的架构设计，还是要做好三点：&lt;code class=&quot;highlighter-rouge&quot;&gt;代码规范&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;架构模式&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;工具集&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;代码规范对于View层来说意义重大，毕竟View层非常重业务，如果代码布局混乱，后来者很难接手，也很难维护。&lt;/p&gt;

&lt;p&gt;架构模式具体如何选择，完全取决于业务复杂度。如果业务相当相当复杂，那就可以使用VIPER，如果相对简单，那就直接MVC稍微改改就好了。每一种已经成为定式的架构模式不见得都适合各自公司对应的业务，所以需要各位架构师根据情况去做一些拆分或者改变。拆分一般都不会出现问题，改变的时候，只要别把MVC三个角色搞混就好了，M该做啥做啥，C该做啥做啥，V该做啥做啥，不要乱来。关于大部分的架构模式应该是什么样子，这篇文章里都已经说过了，不过我认为最重要的还是后面的心法，模式只是招术，熟悉了心法才能大巧不工。&lt;/p&gt;

&lt;p&gt;View层的工具集主要还是集中在如何对View进行布局，以及一些特定的View，比如带搜索提示的搜索框这种。这篇文章只提到了View布局的工具集，其它的工具集相对而言是更加取决于各自公司的业务的，各自实现或者使用CocoaPods里现成的都不是很难。&lt;/p&gt;

&lt;p&gt;对于小规模或者中等规模iOS开发团队来说，做好以上三点就足够了。在大规模团队中，有一个额外问题要考虑，就是跨业务页面调用方案的设计。&lt;/p&gt;

</description>
        <pubDate>Wed, 23 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/23/iOS%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E8%B0%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/23/iOS%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E8%B0%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>内功</category>
        
        
      </item>
    
      <item>
        <title>runtime 可以做什么</title>
        <description>&lt;h1 id=&quot;runtime-可以做什么&quot;&gt;runtime 可以做什么&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;这篇文字不扯淡，不讲runtime是什么，只总结下runtime 可以用来干什么。
这几篇文章写的很好：
&lt;a href=&quot;http://tech.glowing.com/cn/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://tech.glowing.com/cn/method-swizzling-aop/&quot;&gt;Method Swizzling 和 AOP 实践&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://southpeak.github.io/categories/objectivec/&quot;&gt;南大(南锋子)的一系列文章&lt;/a&gt;（打开稍慢）&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/sps900608/article/details/51863147&quot;&gt;精通Objective-C进阶技巧：使用运行时系统API&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;然后饶神总结的也不错,里面好多干货
&lt;a href=&quot;http://www.jianshu.com/p/64a7c9f7f6b2&quot;&gt;iOS 基础知识点网址&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;美团技术团队
&lt;a href=&quot;http://tech.meituan.com/DiveIntoCategory.html&quot;&gt;深入理解Objective-C：Category&lt;/a&gt;
&lt;a href=&quot;http://tech.meituan.com/DiveIntoMethodCache.html&quot;&gt;深入理解Objective-C：方法缓存&lt;/a&gt;
&lt;a href=&quot;http://www.mulle-kybernetik.com/artikel/Optimization/opti-3-imp-deluxe.html&quot;&gt;Obj-C Optimization: IMP Cacheing Deluxe&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;杨小鱼（玉令天下）
&lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;1获取类属性列表值方法&quot;&gt;1，获取类属性列表、值、方法&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/NSObject%2BProperty.m&quot;&gt;获取model的属性、属性值、方法列表 demo地址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;2替换已有函数包括系统方法&quot;&gt;2，替换已有函数(包括系统方法)&lt;/h4&gt;
&lt;p&gt;可以把系统方法替换为我们自己的方法。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/UIAlertController%2BexchangeMethod.m&quot;&gt;替换系统弹框方法，统一修改弹框标题  demo地址&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;3动态挂载对象&quot;&gt;3，动态挂载对象&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/UIView%2BredDot.m&quot;&gt;为View 加一个小红点的公用方法  demo地址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;4动态创建类-kvo-底层实现原理&quot;&gt;4,动态创建类 KVO 底层实现原理&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/6305af232100&quot;&gt;KVO的底层实现原理&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;5自动归档归档解档&quot;&gt;5，自动归档、归档解档&lt;/h4&gt;

&lt;p&gt;           &lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[coder encodeObject:value forKey:propertyName];

[self setValue:value forKey:propertyName];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/NSObject%2Bencode.m&quot;&gt;统一为property添加方法 不用一个个的写 demo地址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;6给分类添加属性&quot;&gt;6，给分类添加属性&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/UIView%2BredDot.m&quot;&gt;为View 加一个小红点的公用方法  demo地址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;7字典转模型&quot;&gt;7，字典转模型&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yunisSong/RunTimeDemo/blob/master/RunTimeDemo/NSObject%2BdicToModel.m&quot;&gt;同样是获取类的属性，然后调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;[instance setValue:value forKey:key]&lt;/code&gt; 赋值  demo地址&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 21 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/21/runtime-%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E4%B9%88/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/21/runtime-%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E4%B9%88/</guid>
        
        <category>iOS</category>
        
        <category>内功</category>
        
        
      </item>
    
  </channel>
</rss>

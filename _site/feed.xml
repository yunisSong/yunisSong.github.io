<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>三十一</title>
    <description>潜心修行中。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 17 Aug 2017 10:35:06 +0800</pubDate>
    <lastBuildDate>Thu, 17 Aug 2017 10:35:06 +0800</lastBuildDate>
    <generator>Jekyll v3.4.1</generator>
    
      <item>
        <title>使用wkhtmltopdf将Markdown转为带有标签的PDF</title>
        <description>&lt;h1 id=&quot;使用-wkhtmltopdf-将-markdown-文件转为带有标签的-pdf-文件&quot;&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;wkhtmltopdf&lt;/code&gt; 将 &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; 文件转为带有标签的 PDF 文件&lt;/h1&gt;

&lt;h3 id=&quot;1使用-mweb-编写-markdown-文档&quot;&gt;1，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;MWeb&lt;/code&gt; 编写 &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; 文档&lt;/h3&gt;
&lt;p&gt;。。。。&lt;/p&gt;
&lt;h3 id=&quot;2导出为-html&quot;&gt;2，导出为 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/markDownToHtml.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3编辑-html-样式&quot;&gt;3，编辑 HTML 样式&lt;/h3&gt;
&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;sublime text&lt;/code&gt; 打开 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; 文件我这边主要修改了宽度、代码背景色、字体大小和粗体字体颜色。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.markdown-body {
  min-width: 200px;
  max-width: none;/* 修改 */
  margin: 0 auto;
  padding: 20px;

  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  color: #333;
  overflow: hidden;
  font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Segoe UI&quot;, Arial, freesans, sans-serif;
  font-size: 58px;/* 修改 */
  line-height: 1.6;
  word-wrap: break-word;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.markdown-body code {
  padding: 0;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
  margin: 0;
  font-size: 85%;
  background-color: #e8f2fb;/* 修改 */
  border-radius: 3px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.markdown-body pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #e8f2fb;/* 修改 */
  border-radius: 3px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.markdown-body strong {
  font-weight: bold;
  color: #0a366f;/* 修改 */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;4下载-wkhtmltopdf&quot;&gt;4，下载 &lt;code class=&quot;highlighter-rouge&quot;&gt;wkhtmltopdf&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;下载地址为 &lt;a href=&quot;https://wkhtmltopdf.org/downloads.html&quot;&gt;wkhtmltopdf&lt;/a&gt;.
建议打开 VPN ，不然下载速度好慢的。&lt;/p&gt;
&lt;h3 id=&quot;4使用-wkhtmltopdf-转换为-pdf&quot;&gt;4，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;wkhtmltopdf&lt;/code&gt; 转换为 PDF&lt;/h3&gt;
&lt;p&gt;进入 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; 文件所在目录，使用命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$-&amp;gt; wkhtmltopdf  index.html 编码规范.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 为刚才导出的文件 ，&lt;code class=&quot;highlighter-rouge&quot;&gt;编码规范.pdf&lt;/code&gt; 为你要生成的PDF 文件&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;一定要到&lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; 文件所在目录执行这个命令。我因为这个原因傻逼的找了半天错误原因。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;样式大概是这个样子的：
&lt;img src=&quot;/img/in-post/wkhtmltopdfDemo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 17 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/17/%E4%BD%BF%E7%94%A8wkhtmltopdf%E5%B0%86MarkDown%E8%BD%AC%E4%B8%BA%E5%B8%A6%E6%9C%89%E6%A0%87%E7%AD%BE%E7%9A%84PDF/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/17/%E4%BD%BF%E7%94%A8wkhtmltopdf%E5%B0%86MarkDown%E8%BD%AC%E4%B8%BA%E5%B8%A6%E6%9C%89%E6%A0%87%E7%AD%BE%E7%9A%84PDF/</guid>
        
        
      </item>
    
      <item>
        <title>小团队的iOS代码规范</title>
        <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;小团队的ios代码规范&quot;&gt;小团队的iOS代码规范&lt;/h1&gt;

&lt;p&gt;本文摘抄自&lt;a font=&quot;24px&quot;&gt;&lt;a href=&quot;https://knightsj.github.io/2017/06/14/iOS%20%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/#more&quot;&gt;iOS 代码规范&lt;/a&gt;&lt;/a&gt;，稍加修改。&lt;/p&gt;

&lt;h2 id=&quot;1-核心原则&quot;&gt;1 核心原则&lt;/h2&gt;
&lt;h3 id=&quot;11-代码应该简洁易懂逻辑清晰&quot;&gt;1.1 代码应该简洁易懂，逻辑清晰&lt;/h3&gt;
&lt;p&gt;因为软件是需要人来维护的。这个人在未来很可能不是你。所以首先是为人编写程序，其次才是计算机：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不要过分追求技巧，降低程序的可读性。&lt;/li&gt;
  &lt;li&gt;简洁的代码可以让bug无处藏身。要写出明显没有bug的代码，而不是没有明显bug的代码。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12-编程时首先达到正确性其次考虑效率&quot;&gt;1.2 编程时首先达到正确性，其次考虑效率&lt;/h3&gt;
&lt;p&gt;在正确可用的代码写出之前就过度地考虑扩展，重用的问题，使得工程过度复杂。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;先把眼前的问题解决掉，解决好，再考虑将来的扩展问题。&lt;/li&gt;
  &lt;li&gt;先写出可用的代码，反复推敲，再考虑是否需要重用的问题。&lt;/li&gt;
  &lt;li&gt;先写出可用，简单，明显没有bug的代码，再考虑测试的问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;13-面向变化编程而不是面向需求编程&quot;&gt;1.3 面向变化编程，而不是面向需求编程&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;不要相信产品说的话，要时刻做好需求会改的准备。&lt;/strong&gt;
&lt;strong&gt;不要相信产品说的话，要时刻做好需求会改的准备。&lt;/strong&gt;
&lt;strong&gt;不要相信产品说的话，要时刻做好需求会改的准备。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每次迭代不能仅仅为了当前的需求，写出扩展性强，易修改的程序才是负责任的做法，对自己负责，对公司负责。&lt;/p&gt;
&lt;h2 id=&quot;2-具体规范&quot;&gt;2 具体规范&lt;/h2&gt;
&lt;h3 id=&quot;21-变量属性&quot;&gt;2.1 变量、属性&lt;/h3&gt;
&lt;h6 id=&quot;211-命名必须使用驼峰格式&quot;&gt;2.1.1 命名必须使用驼峰格式&lt;/h6&gt;
&lt;p&gt;类，协议使用大驼峰&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HomePageViewController.h
&amp;lt;HeaderViewDelegate&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;对象等局部变量使用小驼峰：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString *personName = @&quot;&quot;;
NSUInteger totalCount = 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;212-变量的名称必须同时包含功能与类型&quot;&gt;2.1.2 变量的名称必须同时包含功能与类型&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UIButton *addBtn //添加按钮
UILabel *nameLbl //名字标签
NSString *addressStr//地址字符串
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;213-系统常用类作实例变量声明时加入后缀&quot;&gt;2.1.3 系统常用类作实例变量声明时加入后缀&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;后缀&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;UIViewController&lt;/td&gt;
      &lt;td&gt;VC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UIView&lt;/td&gt;
      &lt;td&gt;View&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UILabel&lt;/td&gt;
      &lt;td&gt;Lbl&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UIButton&lt;/td&gt;
      &lt;td&gt;Btn&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UIImage&lt;/td&gt;
      &lt;td&gt;Img&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UIImageView&lt;/td&gt;
      &lt;td&gt;ImagView&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NSArray&lt;/td&gt;
      &lt;td&gt;Array&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NSMutableArray&lt;/td&gt;
      &lt;td&gt;Marray&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NSDictionary&lt;/td&gt;
      &lt;td&gt;Dict&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NSMutableDictionary&lt;/td&gt;
      &lt;td&gt;Mdict&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NSString&lt;/td&gt;
      &lt;td&gt;Str&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NSMutableString&lt;/td&gt;
      &lt;td&gt;MStr&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NSSet&lt;/td&gt;
      &lt;td&gt;Set&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NSMutableSet&lt;/td&gt;
      &lt;td&gt;Mset&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;213-下划线不应出现在局部变量&quot;&gt;2.1.3 下划线不应出现在局部变量&lt;/h4&gt;
&lt;p&gt;推荐：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSDictionary *notificationInfo;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不推荐：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSDictionary *_notificationInfo;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;214-定义指针类型的变量&quot;&gt;2.1.4 定义指针类型的变量&lt;/h4&gt;
&lt;p&gt;定义指针类型的变量时,&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;放在变量前，与类型保持一个空格。
推荐：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSDictionary *notificationInfo;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不推荐：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSDictionary*notificationInfo;
NSDictionary* notificationInfo;
NSDictionary * notificationInfo;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;215-不要出现仅依靠大小写区分的命名&quot;&gt;2.1.5 不要出现仅依靠大小写区分的命名&lt;/h4&gt;
&lt;p&gt;程序中不要出现仅靠大小区分的相似的标识符。
不推荐：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSDictionary *notificationInfo;
NSDictionary *NotificationInfo;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;216-私有属性应放到匿名分类中&quot;&gt;2.1.6 私有属性应放到匿名分类中&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RWTDetailViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GADBannerView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleAdView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADBannerView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iAdView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIWebView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adXWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;217-形容词性的bool属性的getter应该加上is前缀&quot;&gt;2.1.7 形容词性的BOOL属性的getter应该加上is前缀&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEditable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;218-使用getter方法做懒加载&quot;&gt;2.1.8 使用getter方法做懒加载&lt;/h4&gt;

&lt;p&gt;实例化一个对象是需要耗费资源的，如果这个对象里的某个属性的实例化要调用很多配置和计算，就需要懒加载它，在使用它的前一刻对它进行实例化：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//推荐这样写
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;demoView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;demoView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_demoView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_demoView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_demoView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但是也有对这种做法的争议，但是整体利大于弊，推荐使用。&lt;/p&gt;

&lt;h4 id=&quot;219-除了-init-和-dealloc-方法建议都使用点语法访问属性&quot;&gt;2.1.9 除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;dealloc&lt;/code&gt; 方法，建议都使用点语法访问属性&lt;/h4&gt;

&lt;p&gt;使用点语法的好处：
&lt;code class=&quot;highlighter-rouge&quot;&gt;setter&lt;/code&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setter&lt;/code&gt; 会遵守内存管理语义(&lt;code class=&quot;highlighter-rouge&quot;&gt;strong&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt;)。&lt;/li&gt;
  &lt;li&gt;通过在内部设置断点，有助于调试bug。&lt;/li&gt;
  &lt;li&gt;可以过滤一些外部传入的值。&lt;/li&gt;
  &lt;li&gt;捕捉 &lt;code class=&quot;highlighter-rouge&quot;&gt;KVO&lt;/code&gt; 通知。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;允许子类化。&lt;/li&gt;
  &lt;li&gt;通过在内部设置断点，有助于调试bug。&lt;/li&gt;
  &lt;li&gt;实现懒加载（&lt;code class=&quot;highlighter-rouge&quot;&gt;lazy initialization&lt;/code&gt;）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;懒加载的属性，必须通过点语法来读取数据。因为懒加载是通过重写 &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt; 方法来初始化实例变量的，如果不通过属性来读取该实例变量，那么这个实例变量就永远不会被初始化。&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;dealloc&lt;/code&gt; 方法里面使用点语法的后果是：因为没有绕过 &lt;code class=&quot;highlighter-rouge&quot;&gt;setter&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt; ，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;setter&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt; 里面可能会有很多其他的操作。而且如果它的子类重载了它的 &lt;code class=&quot;highlighter-rouge&quot;&gt;setter&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt; 方法，那么就可能导致该子类调用其他的方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2110-属性声明严把权限&quot;&gt;2.1.10 属性声明严把权限&lt;/h4&gt;

&lt;p&gt;对不需要外部修改的属性使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt; 。&lt;/p&gt;

&lt;h4 id=&quot;2111-尽量使用不可变对象&quot;&gt;2.1.11 尽量使用不可变对象&lt;/h4&gt;
&lt;p&gt;建议尽量把对外公布出来的属性设置为只读，在实现文件内部设为读写。具体做法是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在头文件中，设置对象属性为 &lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在实现文件中设置为 &lt;code class=&quot;highlighter-rouge&quot;&gt;readwrite&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22-函数&quot;&gt;2.2 函数&lt;/h3&gt;

&lt;h4 id=&quot;221-函数保持单一性&quot;&gt;2.2.1 函数保持单一性&lt;/h4&gt;
&lt;p&gt;函数是为一特定功能而编写，不是万能工具箱，保持单一性，一个函数只做一件事情。&lt;/p&gt;

&lt;h4 id=&quot;222-函数名与形参不能留空格返回类型与函数标识符有一个空格&quot;&gt;2.2.2 函数名与形参不能留空格，返回类型与函数标识符有一个空格&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)someMethod:(id)parameter;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;223-如果参数过长则每个参数一行以冒号对齐&quot;&gt;2.2.3 如果参数过长，则每个参数一行，以冒号对齐。&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)someMethod:(id)parameter
        parameter1:(id)parameter1
        parameter2:(id)parameter2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;224-如果函数名比参数名短则每个参数占用一行垂直对齐非冒号对齐&quot;&gt;2.2.4 如果函数名比参数名短，则每个参数占用一行,垂直对齐（非冒号对齐）&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)someMethod:(id)parameter
        a:(id)parameter1
        b:(id)parameter2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;225-函数名用小写字母开头的单词组合而成&quot;&gt;2.2.5 函数名用小写字母开头的单词组合而成&lt;/h4&gt;

&lt;p&gt;函数名力求清晰、明了、通过函数名就能够判断函数的主要功能。函数名中不同意义字段之间不要用下划线连接，而要把每个字段的首字母大写以示区分。&lt;/p&gt;

&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (NSString *)descriptionWithLocale:(id)locale;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (NSString *)DescriptionWithLocale:(id)locale;
- (NSString *)description_locale:(id)locale;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;226-避免函数有太多的参数参数个数尽量控制在5个以内&quot;&gt;2.2.6 避免函数有太多的参数，参数个数尽量控制在5个以内&lt;/h4&gt;
&lt;p&gt;如果参数的确比较多，考虑这些参数定义成一个结构（或一个类）。&lt;/p&gt;

&lt;h4 id=&quot;227-对输入参数的正确性和有效性进行检查&quot;&gt;2.2.7 对输入参数的正确性和有效性进行检查&lt;/h4&gt;
&lt;p&gt;很多程序错误和崩溃是由非法参数引起的。对外提供的函数接口，一定要检查输入参数。
对输入参数的正确性和有效性进行检查，参数错误立即返回。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void function(param1,param2)
{
      if(param1 is unavailable) {
           return;
      }
    
      if(param2 is unavailable) {
           return;
      }
     //Do some right thing
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;228-函数方法体的规模不能太大&quot;&gt;2.2.8 函数（方法）体的规模不能太大&lt;/h4&gt;
&lt;p&gt;函数（方法）体的规模不能太大，尽量控制在可以在一屏幕内显示。&lt;/p&gt;

&lt;h4 id=&quot;229-对于有返回值的函数方法每一个分支都必须有返回值&quot;&gt;2.2.9 对于有返回值的函数（方法），每一个分支都必须有返回值&lt;/h4&gt;

&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int function()
{
    if(condition1) {
        return count1
    }
    else if(condition2) {
        return count2
    }
    else {
       return defaultCount
    } 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;不推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int function()
{
    if(condition1) {
        return count1
    }
    else if(condition2) {
        return count2
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2210-如果在不同的函数内部有相同的功能&quot;&gt;2.2.10 如果在不同的函数内部有相同的功能&lt;/h4&gt;
&lt;p&gt;如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数&lt;/p&gt;

&lt;h4 id=&quot;2211-方法名前缀&quot;&gt;2.2.11 方法名前缀&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;刷新视图的方法名要以 &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh&lt;/code&gt; 为首。&lt;/li&gt;
  &lt;li&gt;更新数据的方法名要以 &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; 为首。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)refreshHeaderViewWithCount:(NSUInteger)count;

- (void)updateDataSourceWithViewModel:(ViewModel *)viewModel;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2212-函数之间保留一个空行&quot;&gt;2.2.12 函数之间保留一个空行&lt;/h4&gt;
&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)refreshHeaderViewWithCount:(NSUInteger)count;

- (void)updateDataSourceWithViewModel:(ViewModel *)viewModel;

- (void)refreshHeaderViewWithCount:(NSUInteger)count
{
}

- (void)updateDataSourceWithViewModel:(ViewModel *)viewModel
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2213-初始化方法&quot;&gt;2.2.13 初始化方法&lt;/h4&gt;
&lt;p&gt;初始化方法返回类型必须是 &lt;code class=&quot;highlighter-rouge&quot;&gt;instancetype&lt;/code&gt; ，不能是 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (instancetype)init { 
    self = [super init]; // call the designated initializer 
    if (self) { 
        // Custom initialization 
    } 
    return self; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;23-if-语句&quot;&gt;2.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 语句&lt;/h3&gt;

&lt;h4 id=&quot;231-必须列出所有分支穷举所有的情况而且每个分支都必须给出明确的结果&quot;&gt;2.3.1 必须列出所有分支（穷举所有的情况），而且每个分支都必须给出明确的结果&lt;/h4&gt;
&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var hintStr;
if (count &amp;lt; 3) {
  hintStr = &quot;Good&quot;;
} 
else {
  hintStr = &quot;&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;不推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var hintStr;
if (count &amp;lt; 3) {
 hintStr = &quot;Good&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;232-不要使用过多的分支要善于使用-return-来提前返回错误的情况&quot;&gt;2.3.2 不要使用过多的分支，要善于使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 来提前返回错误的情况&lt;/h4&gt;
&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)someMethod { 
  if (!goodCondition) {
    return;
  }
  //Do something
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;不推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)someMethod { 
  if (goodCondition) {
    //Do something
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;233-条件表达式如果很长则需要将他们提取出来赋给一个-bool-值&quot;&gt;2.3.3 条件表达式如果很长，则需要将他们提取出来赋给一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;BOOL&lt;/code&gt; 值&lt;/h4&gt;
&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let nameContainsSwift = sessionName.hasPrefix(&quot;Swift&quot;)
let isCurrentYear = sessionDateCompontents.year == 2014
let isSwiftSession = nameContainsSwift &amp;amp;&amp;amp; isCurrentYear
if (isSwiftSession) { 
   // Do something
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ( sessionName.hasPrefix(&quot;Swift&quot;) &amp;amp;&amp;amp; (sessionDateCompontents.year == 2014) ) { 
    // Do something
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;234-条件语句的判断应该是变量在左常量在右&quot;&gt;2.3.4 条件语句的判断应该是变量在左，常量在右&lt;/h4&gt;
&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ( count == 6 ) {
}

if ( count == 6 ) {
}

if ( object == nil ) {
}

if ( !object ) {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ( 6 == count ) {
}

if ( nil == object ) {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;235-每个分支的实现代码都必须被大括号包围&quot;&gt;2.3.5 每个分支的实现代码都必须被大括号包围&lt;/h4&gt;
&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ( !error ) {
  return success;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;不推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ( !error )
    return success;

if ( !error ) return success;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;236--条件过多过长的时候应该换行&quot;&gt;2.3.6  条件过多，过长的时候应该换行&lt;/h4&gt;
&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (condition1() &amp;amp;&amp;amp; 
    condition2() &amp;amp;&amp;amp; 
    condition3() &amp;amp;&amp;amp; 
    condition4()) {
  // Do something
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;不推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (condition1() &amp;amp;&amp;amp; condition2() &amp;amp;&amp;amp; condition3() &amp;amp;&amp;amp; condition4()) {
  // Do something
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;24-注释&quot;&gt;2.4 注释&lt;/h3&gt;
&lt;p&gt;推荐写注释，但不是必须的，有以下几种情况是必须写注释的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;公共接口（注释要告诉阅读代码的人，当前类能实现什么功能）。&lt;/li&gt;
  &lt;li&gt;涉及到比较深层专业知识的代码（注释要体现出实现原理和思想）。&lt;/li&gt;
  &lt;li&gt;容易产生歧义的代码（但是严格来说，容易让人产生歧义的代码是不允许存在的）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;每次修改代码后，要相应的修改注释。
每次修改代码后，要相应的修改注释。
每次修改代码后，要相应的修改注释。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;25-运算符&quot;&gt;2.5 运算符&lt;/h3&gt;

&lt;h4 id=&quot;251-一元运算符与变量之间没有空格&quot;&gt;2.5.1 一元运算符与变量之间没有空格&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!bValue
~iValue
++iCount
*strSource
&amp;amp;fSum
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;252-二元运算符与变量之间必须有空格&quot;&gt;2.5.2 二元运算符与变量之间必须有空格&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fWidth = 5 + 5;
fLength = fWidth * 2;
fHeight = fWidth + fLength;
for(int i = 0; i &amp;lt; 10; i++)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;253-多个不同的运算符同时存在时应该使用括号来明确优先级&quot;&gt;2.5.3 多个不同的运算符同时存在时应该使用括号来明确优先级&lt;/h4&gt;

&lt;p&gt;在多个不同的运算符同时存在的时候应该合理使用括号，不要盲目依赖操作符优先级。
因为有的时候不能保证阅读你代码的人就一定能了解你写的算式里面所有操作符的优先级。&lt;/p&gt;
&lt;h3 id=&quot;26-switch-语句&quot;&gt;2.6 &lt;code class=&quot;highlighter-rouge&quot;&gt;Switch&lt;/code&gt; 语句&lt;/h3&gt;

&lt;h4 id=&quot;261-每个分支都必须用大括号括起来&quot;&gt;2.6.1 每个分支都必须用大括号括起来&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;switch (integer) {  
  case 1:  {
    // ...  
    break;  
   }
  case 2: {  
    // ...  
    break;  
  }  
  case 3: {
    // ...  
    break; 
  }
  default:{
    // ...  
    break; 
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;262--使用枚举类型时不能有-default-分支-除了使用枚举类型以外都必须有-default-分支&quot;&gt;2.6.2  使用枚举类型时，不能有 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 分支， 除了使用枚举类型以外，都必须有 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 分支&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RWTLeftMenuTopItemType menuType = RWTLeftMenuTopItemMain;  
switch (menuType) {  
  case RWTLeftMenuTopItemMain: {
    // ...  
    break; 
   }
  case RWTLeftMenuTopItemShows: {
    // ...  
    break; 
  }
  case RWTLeftMenuTopItemSchedule: {
    // ...  
    break; 
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;27-单例模式&quot;&gt;2.7 单例模式&lt;/h3&gt;
&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (instancetype)sharedInstance {
    static id sharedInstance = nil;
    static dispatch_once_t onceToken = 0;
    dispatch_once(&amp;amp;onceToken, ^{
        sharedInstance = [[self alloc] init];
    });
    return sharedInstance;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;不推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (instancetype)sharedInstance {
    static id sharedInstance;
    @synchronized(self) {
        if (sharedInstance == nil) {
            sharedInstance = [[MyClass alloc] init];
        } }
    return sharedInstance; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;28-文件目录&quot;&gt;2.8 文件目录&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; 工程文件的物理路径要和逻辑路径保持一致。&lt;/p&gt;
&lt;h3 id=&quot;29-字面量&quot;&gt;2.9 字面量&lt;/h3&gt;
&lt;p&gt;在编码中应多用字面量语法，少用与之等价的方法。&lt;/p&gt;

&lt;h4 id=&quot;291-声明时的字面量语法&quot;&gt;2.9.1 声明时的字面量语法&lt;/h4&gt;
&lt;p&gt;在声明 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNumber&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;NSArray&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDictionary&lt;/code&gt; 时，应该尽量使用简洁字面量语法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSNumber *intNumber = @1;
NSNumber *floatNumber = @2.5f;
NSArray *animals = @[@&quot;cat&quot;, @&quot;dog&quot;,@&quot;mouse&quot;, @&quot;badger&quot;];
Dictionary *dict = @{@&quot;animal&quot;:@&quot;tiger&quot;,@&quot;phone&quot;:@&quot;iPhone 6&quot;};

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;292-集合类取下标的字面量语法&quot;&gt;2.9.2 集合类取下标的字面量语法&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString *cat = animals[0];
NSString *iphone = dict[@&quot;phone&quot;];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;210-nsarray-和-nsdictionary&quot;&gt;2.10 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSArray&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDictionary&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&quot;2101-尽可能的使用字面量初始化&quot;&gt;2.10.1 尽可能的使用字面量初始化&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSArray *animals = @[@&quot;cat&quot;, @&quot;dog&quot;,@&quot;mouse&quot;, @&quot;badger&quot;];
Dictionary *dict = @{@&quot;animal&quot;:@&quot;tiger&quot;,@&quot;phone&quot;:@&quot;iPhone 6&quot;};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2102-使用泛型&quot;&gt;2.10.2 使用泛型&lt;/h4&gt;
&lt;p&gt;在定义 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSArray&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDictionary&lt;/code&gt; 时使用泛型，可以保证程序的安全性，而且在使用 枚举块 函数时会自动识别 &lt;strong&gt;item&lt;/strong&gt; 类型&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSArray &amp;lt;NSString *&amp;gt;*testArr = [NSArray arrayWithObjects:@&quot;Hello&quot;, @&quot;world&quot;, nil];
NSDictionary &amp;lt;NSString *, NSNumber *&amp;gt;*dic = @{@&quot;key&quot;:@(1), @&quot;age&quot;:@(10)};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2103-判断边界&quot;&gt;2.10.3 判断边界&lt;/h4&gt;
&lt;p&gt;数组取下标的时候尽可能的判断是否越界。&lt;/p&gt;

&lt;h4 id=&quot;2104-取第一个元素或最后一个元素的时候使用系统提供的方法&quot;&gt;2.10.4 取第一个元素或最后一个元素的时候使用系统提供的方法&lt;/h4&gt;
&lt;p&gt;取第一个元素或最后一个元素的时候使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;firtstObject&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;lastObject&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;2105--非空判断&quot;&gt;2.10.5  非空判断&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addObject&lt;/code&gt; 之前要非空判断。&lt;/p&gt;

&lt;h4 id=&quot;2106-多用枚举块&quot;&gt;2.10.6 多用枚举块&lt;/h4&gt;
&lt;p&gt;当遍历集合元素时，建议使用块枚举，因为相对于传统的 &lt;strong&gt;for&lt;/strong&gt; 循环，它更加高效，而且简洁,还能获取到用传统的 &lt;strong&gt;for&lt;/strong&gt; 循环无法提供的值.&lt;/p&gt;

&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSArray &amp;lt;SYPushUserModel *&amp;gt;*sourceArray = @[...];
[sourceArray enumerateObjectsUsingBlock:^(SYPushUserModel * obj, NSUInteger idx, BOOL * stop) {
            
}];

NSDictionary &amp;lt;NSString *,SYPushUserModel *&amp;gt;*sourceDic = @{...};
[sourceDic enumerateKeysAndObjectsUsingBlock:^(NSString * key, SYPushUserModel * obj, BOOL * stop) {
        
}];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;211-类&quot;&gt;2.11 类&lt;/h3&gt;

&lt;h4 id=&quot;2111-类的布局&quot;&gt;2.11.1 类的布局&lt;/h4&gt;
&lt;p&gt;推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark - Life Cycle
- (instancetype)init;

- (void)viewDidLoad;

- (void)viewWillAppear:(BOOL)animated;

- (void)viewDidAppear:(BOOL)animated;

- (void)dealloc

#pragma mark - Intial Methods
//初始化数据
- (void)assignDate

- (void)settingAppearance

- (void)loadSubViews

#pragma mark - Target Methods
//点击事件或通知事件

#pragma mark - Network Methods
//网络请求

#pragma mark - Public Method
//外部方法

#pragma mark - Private Method
//本类方法

#pragma mark - Delegate
//代理方法

#pragma mark - Lazy Loads
//懒加载 Getter方法

#pragma mark - set
//Setter方法
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2112-在类声明中包含多个-protocol&quot;&gt;2.11.2 在类声明中包含多个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Protocol&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;如果在类声明中包含多个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Protocol&lt;/code&gt;，每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Protocol&lt;/code&gt; 占用一行，与第一个对齐，保持清晰易读。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@interface SYNotificationTool : NSObject&amp;lt;UNUserNotificationCenterDelegate,
                                         UITableViewDelegate,
                                         UITableViewDataSource,
                                         UITabBarControllerDelegate,
                                         UIContentSizeCategoryAdjusting&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果第一行显示不完全，推荐&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@interface SYOpenMessageListNotificationTool : NSObject
&amp;lt;
UNUserNotificationCenterDelegate,
UITableViewDelegate,
UITableViewDataSource,
UITabBarControllerDelegate,
UIContentSizeCategoryAdjusting
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2113-把类的实现代码分散到便于管理的多个分类中&quot;&gt;2.11.3 把类的实现代码分散到便于管理的多个分类中&lt;/h4&gt;
&lt;p&gt;一个类可能会有很多公共方法，而且这些方法往往可以用某种特有的逻辑来分组。我们可以利用 &lt;strong&gt;Objecctive-C&lt;/strong&gt; 的分类机制，将类的这些方法按一定的逻辑划入几个分区中。使得代码逻辑清晰，便于维护。&lt;/p&gt;

&lt;h3 id=&quot;212-枚举&quot;&gt;2.12 枚举&lt;/h3&gt;
&lt;p&gt;要多使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;NS_ENUM&lt;/code&gt;,尽量少使用 C 语言风格的&lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;2121-用枚举表示状态选项状态码&quot;&gt;2.12.1 用枚举表示状态，选项，状态码&lt;/h4&gt;
&lt;p&gt;推荐使用用枚举表示状态，选项，状态码。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef NS_ENUM(NSUInteger, EOCConnectionState) {
  EOCConnectionStateDisconnected,
  EOCConnectionStateConnecting,
  EOCConnectionStateConnected,
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2122-使用枚举类型时不能有-default-分支&quot;&gt;2.12.2 使用枚举类型时，不能有 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 分支&lt;/h4&gt;
&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Switch&lt;/code&gt; 语句使用枚举类型时，不能有 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 分支， 除了使用枚举类型以外，都必须有 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 分支
在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Switch&lt;/code&gt; 语句使用枚举类型的时候，如果使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 分支，在将来就无法通过编译器来检查新增的枚举类型了。&lt;/p&gt;

&lt;h3 id=&quot;213-大括号该不该换行&quot;&gt;2.13 大括号该不该换行&lt;/h3&gt;
&lt;p&gt;仁者见仁，智者见智的问题。&lt;/p&gt;

&lt;p&gt;程序的分界符 &lt;strong&gt;{&lt;/strong&gt; 和 &lt;strong&gt;}&lt;/strong&gt; 在 &lt;strong&gt;if&lt;/strong&gt;、&lt;strong&gt;else&lt;/strong&gt;、&lt;strong&gt;else if&lt;/strong&gt;、&lt;strong&gt;for&lt;/strong&gt;、&lt;strong&gt;while&lt;/strong&gt;、&lt;strong&gt;do&lt;/strong&gt;等语句时， &lt;strong&gt;{&lt;/strong&gt; 前添加空格紧跟语句后，空格分割。在方法（函数）应独占一行并且位于同一列，同时与引用他们的语句对齐。 &lt;strong&gt;{}&lt;/strong&gt; 之内的代码块使用缩进规则对齐。&lt;/p&gt;

&lt;p&gt;推荐：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)dealloc
{
    // Do Something
}

if (isUpdated) {
    // Do Something
}

if (user.isHappy) {
    //Do something
}
else {
    //Do something else
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;214-常量&quot;&gt;2.14 常量&lt;/h3&gt;

&lt;h4 id=&quot;2141-常量应该以相关类名作为前缀&quot;&gt;2.14.1 常量应该以相关类名作为前缀&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;推荐：
static const NSTimeInterval ZOCSignInViewControllerFadeOutAnimationDuration = 0.4;
不推荐：
static const NSTimeInterval fadeOutTime = 0.4;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2142-建议使用类型常量不建议使用-define-预处理命令&quot;&gt;2.14.2 建议使用类型常量，不建议使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;#define&lt;/code&gt; 预处理命令&lt;/h4&gt;
&lt;p&gt;首先比较一下这两种声明常量的区别：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;预处理命令：简单的文本替换，不包括类型信息，并且可被任意修改。&lt;/li&gt;
  &lt;li&gt;类型常量：包括类型信息，并且可以设置其使用范围，而且不可被修改。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用预处理虽然能达到替换文本的目的，但是本身还是有局限性的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不具备类型信息。&lt;/li&gt;
  &lt;li&gt;可以被任意修改。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2143-对外公开某个常量&quot;&gt;2.14.3 对外公开某个常量&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;推荐：
//头文件
extern NSString *const ZOCCacheControllerDidClearCacheNotification;
//实现文件
static NSString * const ZOCCacheControllerDidClearCacheNotification = @&quot;ZOCCacheControllerDidClearCacheNotification&quot;;
static const CGFloat ZOCImageThumbnailHeight = 50.0f;

不推荐：
#define CompanyName @&quot;Apple Inc.&quot; 
#define magicNumber 42
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;215-宏&quot;&gt;2.15 宏&lt;/h3&gt;

&lt;h4 id=&quot;2151-宏常量名都要使用大写字母用下划线-_-分割单词&quot;&gt;2.15.1 宏、常量名都要使用大写字母，用下划线 &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; 分割单词。&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define URL_GAIN_QUOTE_LIST @&quot;/v1/quote/list&quot;
#define URL_UPDATE_QUOTE_LIST @&quot;/v1/quote/update&quot;
#define URL_LOGIN  @&quot;/v1/user/login”
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2152-宏定义中如果包含表达式或变量表达式和变量必须用小括号括起来&quot;&gt;2.15.2 宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define MY_MIN(A, B)  ((A)&amp;gt;(B)?(B):(A))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;216-其他&quot;&gt;2.16 其他&lt;/h3&gt;

&lt;h4 id=&quot;2161-小括号内联复合表达式&quot;&gt;2.16.1 小括号内联复合表达式&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;A compound statement enclosed in parentheses&lt;/em&gt;。推荐使用，形式如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RETURN_VALUE_RECEIVER = {(
    // Do whatever you want
    RETURN_VALUE; // 返回值
)};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;初始化时推荐使用，有点像&lt;strong&gt;block&lt;/strong&gt;和内联函数的结合体，它最大的意义在于将代码整理分块，将同一个逻辑层级的代码包在一起；逻辑清晰，也方便拷贝使用。
推荐：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UIView *backgroundView = ({
    UIView *view = [[UIView alloc] initWithFrame:self.view.bounds];
    view.backgroundColor = [UIColor redColor];
    view.alpha = 0.8f;
    view;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2162-源代码中关系较为紧密的代码应尽可能相邻&quot;&gt;2.16.2 源代码中关系较为紧密的代码应尽可能相邻&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CGFloat fWidth;
CGFloat fLength;
CGFloat fHeight;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2163-相关的赋值语句等号对齐&quot;&gt;2.16.3 相关的赋值语句等号对齐&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;promotionsEntity.promotionImageStr   = activityItemDict[@&quot;promotion_image&quot;];
promotionsEntity.promotionIdNum      = activityItemDict[@&quot;promotion_id&quot;];
promotionsEntity.promotionNameStr    = activityItemDict[@&quot;promotion_name&quot;];
promotionsEntity.promotionColorStr   = activityItemDict[@&quot;promotion_color&quot;];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 11 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/11/%E5%B0%8F%E5%9B%A2%E9%98%9F%E7%9A%84iOS%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/11/%E5%B0%8F%E5%9B%A2%E9%98%9F%E7%9A%84iOS%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
        
        
      </item>
    
      <item>
        <title>正则表达式必知必会</title>
        <description>&lt;h1 id=&quot;正则表达式必知必会&quot;&gt;正则表达式必知必会&lt;/h1&gt;
&lt;h3 id=&quot;匹配单个字符&quot;&gt;匹配单个字符&lt;/h3&gt;

&lt;h4 id=&quot;匹配纯文本&quot;&gt;匹配纯文本&lt;/h4&gt;
&lt;p&gt;相当于文本查找的功能（CMD + F）。但是一般的正则表达式引擎默认返回第一个匹配结果。&lt;/p&gt;
&lt;h4 id=&quot;大小写匹配&quot;&gt;大小写匹配&lt;/h4&gt;
&lt;h4 id=&quot;匹配任意字符&quot;&gt;匹配任意字符&lt;/h4&gt;
&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 来匹配任意字符。
譬如：使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;yunis.&lt;/code&gt; 来匹配，&lt;code class=&quot;highlighter-rouge&quot;&gt;yunis1&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;yunis2&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;yunis3&lt;/code&gt;都是符合搜索结果的。&lt;/p&gt;
&lt;h4 id=&quot;匹配特殊字符&quot;&gt;匹配特殊字符&lt;/h4&gt;
&lt;p&gt;如果需要匹配特殊字符（ &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 等）就需要使用元字符（ &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 反斜杠）来对他进行转义。
譬如：使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;yunis\.&lt;/code&gt; 来匹配， &lt;code class=&quot;highlighter-rouge&quot;&gt;yunis.&lt;/code&gt; 是符合匹配结果的。&lt;/p&gt;
&lt;h3 id=&quot;匹配一组字符&quot;&gt;匹配一组字符&lt;/h3&gt;
&lt;h4 id=&quot;匹配多个字符串中的任意一个&quot;&gt;匹配多个字符串中的任意一个&lt;/h4&gt;
&lt;p&gt;譬如：使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;[abc]hhhh&lt;/code&gt; 进行匹配。&lt;code class=&quot;highlighter-rouge&quot;&gt;ahhhh&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;bhhhh&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;chhhh&lt;/code&gt; 都是符合条件的搜索结果。&lt;/p&gt;
&lt;h4 id=&quot;例如字符集合区间&quot;&gt;例如字符集合区间&lt;/h4&gt;
&lt;p&gt;譬如：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;[a-c]hhh&lt;/code&gt; 进行匹配，&lt;code class=&quot;highlighter-rouge&quot;&gt;ahhhh&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;bhhhh&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;chhhh&lt;/code&gt; 都是符合条件的搜索结果。
使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;[0-9]hhh&lt;/code&gt; 进行匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;0hhh&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;1hhh&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;2hhh&lt;/code&gt; 。。。 &lt;code class=&quot;highlighter-rouge&quot;&gt;9hhh&lt;/code&gt; 都是符合条件的搜索结果。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A-Z 匹配 A 到 Z 的所有大写字母。&lt;/li&gt;
  &lt;li&gt;a-z 匹配 a 到 z 的所有小写字母。&lt;/li&gt;
  &lt;li&gt;A-F 匹配 A 到 F 的所有大写字母。&lt;/li&gt;
  &lt;li&gt;A-z 匹配从 &lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt; 字符 A 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt; 字符 z 的所有字母。&lt;/li&gt;
  &lt;li&gt;同一个字符集合里面可以给出多个字符区间。譬如 &lt;code class=&quot;highlighter-rouge&quot;&gt;[A-Za-z0-9]&lt;/code&gt; 可以匹配任何字母和数字。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;取非匹配&quot;&gt;取非匹配&lt;/h4&gt;
&lt;p&gt;可以使用元字符 &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; 来标明你想对一个字符集合取非匹配结果。
譬如：使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;a[\^0-9]&lt;/code&gt; 进行匹配, as,ab,ac 都是符合调剂的搜索结果，a0，a1,a2不是符合条件的搜索结果。&lt;/p&gt;
&lt;h3 id=&quot;使用元字符&quot;&gt;使用元字符&lt;/h3&gt;
&lt;h4 id=&quot;对特殊字符使用转义&quot;&gt;对特殊字符使用转义&lt;/h4&gt;
&lt;p&gt;如果想匹配元字符需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 反斜杠来转义。
譬如：匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 本身就需要转义，需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;\\&lt;/code&gt;来匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;。
    匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt; 需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;\[&lt;/code&gt; 来进行匹配。&lt;/p&gt;

&lt;h4 id=&quot;匹配空白字符&quot;&gt;匹配空白字符&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\f&lt;/code&gt; 换页符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; 换行符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\r&lt;/code&gt; 回车符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt; 制表符（Tab）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\v&lt;/code&gt; 垂直制表符
    &lt;h4 id=&quot;匹配数字&quot;&gt;匹配数字&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\d&lt;/code&gt; 匹配任意一个数字字符 等价于 &lt;code class=&quot;highlighter-rouge&quot;&gt;[0-9]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\D&lt;/code&gt; 匹配任意一个非数字字符 等价于 &lt;code class=&quot;highlighter-rouge&quot;&gt;[^0-9]&lt;/code&gt;
    &lt;h4 id=&quot;匹配字母与数字&quot;&gt;匹配字母与数字&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\w&lt;/code&gt; 匹配任意一个字母、数字或者下划线字符，等价于 &lt;code class=&quot;highlighter-rouge&quot;&gt;[a-zA-z0-9_]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\W&lt;/code&gt; 匹配任何一个非字母、数字或者下划线字符，等价于 &lt;code class=&quot;highlighter-rouge&quot;&gt;[^a-zA-z0-9_]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;匹配空白字符-1&quot;&gt;匹配空白字符&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\s&lt;/code&gt; 任意一个空白符 ，等价于 &lt;code class=&quot;highlighter-rouge&quot;&gt;[\f\n\r\t\v]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\S&lt;/code&gt; 任意一个非空白符 ，等价于 &lt;code class=&quot;highlighter-rouge&quot;&gt;[^\f\n\r\t\v]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;重复匹配&quot;&gt;重复匹配&lt;/h3&gt;
&lt;h4 id=&quot;匹配一个或多个字符&quot;&gt;匹配一个或多个字符&lt;/h4&gt;
&lt;p&gt;想要匹配同一个字符或者字符集合的多次重复，只需要简单的给这个字符或字符集合加上一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 字符作为后缀就行了。
&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 匹配一个或者多个字符（至少一个，不匹配零个字符的情况）。譬如 a 匹配 a 本身，a+ 将匹配一个或多个连续出现的 a 。类似的 ,&lt;code class=&quot;highlighter-rouge&quot;&gt;[0-9]&lt;/code&gt; 匹配任意一个数字，&lt;code class=&quot;highlighter-rouge&quot;&gt;[0-9]+&lt;/code&gt; 匹配一个或多个连续的数字。&lt;/p&gt;

&lt;p&gt;匹配邮箱：&lt;code class=&quot;highlighter-rouge&quot;&gt;[\w.]+@[\w.]\.\w+&lt;/code&gt;
一般来说，在字符集合里面的元字符将被解释为普通字符，不需要被转义，但转义了也没有坏处。 &lt;code class=&quot;highlighter-rouge&quot;&gt;[\w.]&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;[\w\\.]&lt;/code&gt; 是一样的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 是一个元字符。如果需要匹配 + 本身，需要转义。&lt;/p&gt;

&lt;h4 id=&quot;匹配零个或者多个字符&quot;&gt;匹配零个或者多个字符&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 匹配一个或者多个字符，&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 匹配零个或者多个字符。
&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 是元字符，匹配他本身需要转义。&lt;/p&gt;
&lt;h4 id=&quot;匹配零个或者一个字符&quot;&gt;匹配零个或者一个字符&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; 元字符 &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; 的意思是匹配一个字符一次或者零次。
譬如：&lt;code class=&quot;highlighter-rouge&quot;&gt;https?&lt;/code&gt; 进行匹配，&lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; 都是符合条件的搜索结果。&lt;/p&gt;
&lt;h4 id=&quot;匹配重复次数&quot;&gt;匹配重复次数&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 匹配的字符个数没有上限。我们无法为他们将匹配的字符个数设定一个最大值。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 、&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;？&lt;/code&gt; 至少匹配零个或者一个字符。无法为他们匹配的字符个数设定一个最小值。&lt;/li&gt;
  &lt;li&gt;如果只使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 我们无法将他们匹配的字符个数设定为一个精确的数字。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;为重复匹配设定一个精确的值&quot;&gt;为重复匹配设定一个精确的值&lt;/h5&gt;
&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; 表示前一个字符匹配6次。
譬如 &lt;code class=&quot;highlighter-rouge&quot;&gt;y{6}&lt;/code&gt; 进行匹配，&lt;code class=&quot;highlighter-rouge&quot;&gt;yyyyyy&lt;/code&gt; 是符合条件的匹配结果。&lt;/p&gt;
&lt;h5 id=&quot;为重复匹配设定一个区间&quot;&gt;为重复匹配设定一个区间&lt;/h5&gt;
&lt;p&gt;譬如使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;y{2,4}&lt;/code&gt; 进行匹配，&lt;code class=&quot;highlighter-rouge&quot;&gt;yy&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;yyy&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;yyyy&lt;/code&gt; 都是符合条件的搜索结果。&lt;/p&gt;
&lt;h5 id=&quot;为重复匹配设定一个最小重复数字&quot;&gt;为重复匹配设定一个最小重复数字&lt;/h5&gt;
&lt;p&gt;譬如使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;y{2,}&lt;/code&gt; 进行匹配，&lt;code class=&quot;highlighter-rouge&quot;&gt;yy&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;yyy&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;yyyy&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;yyyyyyyyyyyy&lt;/code&gt; 都是符合条件的搜索结果。
这个正则的意思是y至少重复2次。&lt;/p&gt;
&lt;h5 id=&quot;防止过度匹配&quot;&gt;防止过度匹配&lt;/h5&gt;
&lt;p&gt;下面一段文本 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;1234&amp;lt;/b&amp;gt;qweqweqweqweqweqweqw&amp;lt;b&amp;gt;5678&amp;lt;/b&amp;gt;&lt;/code&gt;
当我们使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;.*&amp;lt;/b&amp;gt;&lt;/code&gt; 进行匹配时，我们希望得到的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;1234&amp;lt;/b&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;5678&amp;lt;/b&amp;gt;&lt;/code&gt; ，但是我们得到的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;1234&amp;lt;/b&amp;gt;qweqweqweqweqweqweqw&amp;lt;b&amp;gt;5678&amp;lt;/b&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这是因为什么呢？
因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;贪婪型&lt;/code&gt; 的元字符，它们进行匹配时的模式是多多益善而不是适可而止。它们会尽可能的从一段文本的开头一直匹配到这段文本的结尾，而不是从文本的开头匹配到第一个匹配时为止。&lt;/p&gt;

&lt;p&gt;当不需要这种贪婪型模式时怎么办？使用它们的懒惰型版本，懒惰型版本会尽可能少的匹配字符。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;贪婪型元字符&lt;/th&gt;
      &lt;th&gt;懒惰型元字符&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*?&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+?&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;n,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;n,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;当我们使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;.*?&amp;lt;/b&amp;gt;&lt;/code&gt; 进行匹配时，就能得到的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;1234&amp;lt;/b&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;5678&amp;lt;/b&amp;gt;&lt;/code&gt; 的匹配结果。&lt;/p&gt;

&lt;h3 id=&quot;位置匹配&quot;&gt;位置匹配&lt;/h3&gt;
&lt;h4 id=&quot;单词边界&quot;&gt;单词边界&lt;/h4&gt;
&lt;p&gt;文本 &lt;code class=&quot;highlighter-rouge&quot;&gt;dog hjhjdogkjhkj hhh dogs.&lt;/code&gt; 当我们使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dog&lt;/code&gt; 进行匹配时，我们只希望匹配到第一个单词 &lt;code class=&quot;highlighter-rouge&quot;&gt;dog&lt;/code&gt;，但是匹配的结果是 &lt;strong&gt;dog&lt;/strong&gt; hjhj&lt;strong&gt;dog&lt;/strong&gt;kjhkj hhh &lt;strong&gt;dog&lt;/strong&gt;s.&lt;/p&gt;

&lt;p&gt;这个时间就需要使用单词边界来限定了，单词边界由限定符 &lt;code class=&quot;highlighter-rouge&quot;&gt;\b&lt;/code&gt; 表示。&lt;/p&gt;

&lt;p&gt;当我们使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;\bdog\b&lt;/code&gt; 来匹配时，只会匹配到第一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;dog&lt;/code&gt; 单词。&lt;/p&gt;
&lt;h4 id=&quot;字符串边界&quot;&gt;字符串边界&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; 匹配一个字符串的开始。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 匹配一个字符串的结尾。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?m)&lt;/code&gt; 匹配一行的开始。
    &lt;h3 id=&quot;使用子表达式&quot;&gt;使用子表达式&lt;/h3&gt;
    &lt;p&gt;子表达式是一个更大的表达式的一部分；把一个表达式划分为一系列子表达式的目的是为了把那些子表达式当作一个独立的元素来使用。子表达式必须使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt; 括起来。
譬如：使用&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.){3}((1\d{1,2})|(\d{1,2})|(2[0-4]\d)|(25[0-5]))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;来匹配合法 IP 地址。
这个正则的意思是：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.155.149&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;任何一个1位或者2位数字 &lt;code class=&quot;highlighter-rouge&quot;&gt;\d{1,2})&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;任何一个以1开头的3位数字 &lt;code class=&quot;highlighter-rouge&quot;&gt;(1\d{2})&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;任何一个以2开头、第2位数字在0-4之间的3位数字 &lt;code class=&quot;highlighter-rouge&quot;&gt;(2[0-4]\d)&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;任何一个以25开头、第3位数字在0-5之间的3位数字 &lt;code class=&quot;highlighter-rouge&quot;&gt;(25[0-5])&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;然后拼接上 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;然后重复3次。&lt;/li&gt;
  &lt;li&gt;最后拼接上一个1到3位数字，这个数字是：
    &lt;ul&gt;
      &lt;li&gt;任何一个1位或者2位数字 &lt;code class=&quot;highlighter-rouge&quot;&gt;\d{1,2})&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;任何一个以1开头的3位数字 &lt;code class=&quot;highlighter-rouge&quot;&gt;(1\d{2})&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;任何一个以2开头、第2位数字在0-4之间的3位数字 &lt;code class=&quot;highlighter-rouge&quot;&gt;(2[0-4]\d)&lt;/code&gt;。&lt;/li&gt;
      &lt;li&gt;任何一个以25开头、第3位数字在0-5之间的3位数字 &lt;code class=&quot;highlighter-rouge&quot;&gt;(25[0-5])&lt;/code&gt;。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;回溯引用前后一致匹配&quot;&gt;回溯引用：前后一致匹配&lt;/h3&gt;
&lt;p&gt;先看一个正则表达式：
&lt;code class=&quot;highlighter-rouge&quot;&gt;[ ]+(\w+)[ ]+\1&lt;/code&gt;
这个表达式的意思是首先 &lt;code class=&quot;highlighter-rouge&quot;&gt;[ ]+&lt;/code&gt; 匹配一个或者多个空格，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;(\w+)&lt;/code&gt; 匹配一个或者多个字母或者数字字符，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;[ ]+&lt;/code&gt; 匹配一个或者多个空格，最后 &lt;code class=&quot;highlighter-rouge&quot;&gt;\1&lt;/code&gt; 的意思是一个回溯引用，它引用的是前面的表达式的第一个表达式。同理 &lt;code class=&quot;highlighter-rouge&quot;&gt;\2&lt;/code&gt; 表示引用的是前面第2个表达式，&lt;code class=&quot;highlighter-rouge&quot;&gt;\3&lt;/code&gt; 表示引用的是前面第3个表达式.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(Y)(N).+\2&lt;/code&gt;  这个表达式的意思是：
首先匹配一个字母Y，然后匹配一个字母N，然后匹配一个或者多个任意字符，最后的 &lt;code class=&quot;highlighter-rouge&quot;&gt;\2&lt;/code&gt; 表示引用之前的第2个表达式，这里引用的就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;(N)&lt;/code&gt; 表达式。&lt;/p&gt;

&lt;p&gt;这种引用是基于位置的引用，如果表达式的位置发生变化，可能就导致引用失效。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在一些比较新的正则表达式支持“命名捕获”，支持位子表达式起一个唯一的名字，可以重复使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;回溯引用在替换操作中的作用&quot;&gt;回溯引用在替换操作中的作用&lt;/h4&gt;
&lt;p&gt;在替换操作中，回溯引用可以起到很大的作用。
譬如下面一段文本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;186-123-425
345-456-132
132-345-234
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;是以&lt;code class=&quot;highlighter-rouge&quot;&gt;XXX-XXX-XXX&lt;/code&gt; 的形式来展示的，如果想改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;(XXX)(XXX)(XXX)&lt;/code&gt; 的话，只需要先使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;(\d{3})(-)(\d{3})(-)(\d{3})&lt;/code&gt;
把之前的符合替换规则的文本找出来，然后使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;($1)($3)($5)&lt;/code&gt; 进行替换就行了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(186)(123)(425)
(345)(456)(132)
(132)(345)(234)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&quot;大小写装换&quot;&gt;大小写装换&lt;/h6&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;元字符&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\E&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;结束 &lt;code class=&quot;highlighter-rouge&quot;&gt;\L&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;\U&lt;/code&gt; 装换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\l&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;把下一个字符装换为小写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\L&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;把 &lt;code class=&quot;highlighter-rouge&quot;&gt;\L&lt;/code&gt; 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;\E&lt;/code&gt; 之间的字符全部装换为小写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\u&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;把下一个字符装换大写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\U&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;把 &lt;code class=&quot;highlighter-rouge&quot;&gt;\U&lt;/code&gt; 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;\E&lt;/code&gt; 之间的字符全部装换为大写&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;下面是一段 html 文本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Head First Lounge&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome to the New and Improved Head First Lounge&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://img.sootuu.com/vector/2006-4/2006420114643989.jpg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当我们想把 h1标签中的文本全部改为大写时，可以这样操作。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(&amp;lt;h1&amp;gt;)(.*?)(&amp;lt;/h1&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$1\U$2\E$3&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;前后查找&quot;&gt;前后查找&lt;/h3&gt;
&lt;h4 id=&quot;向前查找&quot;&gt;向前查找&lt;/h4&gt;
&lt;p&gt;从语法上看，一个向前查找模式其实就是一个以 &lt;code class=&quot;highlighter-rouge&quot;&gt;?=&lt;/code&gt; 开头的子表达式，需要匹配的文本跟在 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 后面。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;文本：
http://www.baidu.com
https://yunissong.github.io/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;.+(?=:)&lt;/code&gt; 查找时，&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; 前面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt; 会被匹配出来。&lt;/p&gt;
&lt;h4 id=&quot;向后查找&quot;&gt;向后查找&lt;/h4&gt;
&lt;p&gt;向后查找的操作符是 &lt;code class=&quot;highlighter-rouge&quot;&gt;?&amp;lt;=&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;文本：
http://www.baidu.com
https://yunissong.github.io/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;=:).+&lt;/code&gt; 查找时， &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; 后面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;//www.baidu.com&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;//yunissong.github.io/&lt;/code&gt; 会被匹配出来。&lt;/p&gt;

&lt;h4 id=&quot;前后查找-1&quot;&gt;前后查找&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;h1&amp;gt;welcome to the New and Improved Head First Lounge&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;=&amp;lt;h1&amp;gt;)(.*?)(?=&amp;lt;/h1&amp;gt;)&lt;/code&gt;,就能把 &lt;code class=&quot;highlighter-rouge&quot;&gt;h1&lt;/code&gt; 标签之间的内容匹配出来。&lt;/p&gt;
&lt;h4 id=&quot;对前后查找取非&quot;&gt;对前后查找取非&lt;/h4&gt;
&lt;p&gt;之前看到过对字符集合取非使用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; 操作符。但是对去前后查找，取非是使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; 来替换 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 取非。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;操作符&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?=)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;正向前查找&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?!)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;负向前查找&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;=)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;正向后查找&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;!)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;负向后查找&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;嵌入条件&quot;&gt;嵌入条件&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;(123)456-7890 和 123-456-7890 都是可以接受的北美号码，而1234567890、(123)-456-7890和(123-456-7890)虽然包含了正确的数字，但是格式不对，如果我们使用下面的正则来匹配：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;文本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;123-456-7890
(123)456-7890
(123)-456-7890
(123-456-7890
1234567890
123 456 7890
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;正则：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\(?\d{3}\)?-?\d{3}-\d{4}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这段正则的意思：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\(?&lt;/code&gt; 匹配了一个可选左括号；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\d{3}&lt;/code&gt; 匹配了3位数字；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\)?&lt;/code&gt;  匹配了一个可选右括号&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-?&lt;/code&gt; 匹配了一个可选的连字符；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\d{3}&lt;/code&gt; 匹配了3位数字；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 匹配了一个连字符；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\d{4}&lt;/code&gt; 匹配了4位数字。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;符合匹配的结果有：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;123-456-7890
(123)456-7890
(123)-456-7890
(123-456-7890
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;并不能排除不正确格式的电话号码。&lt;/p&gt;

&lt;h4 id=&quot;正则表达式里的条件&quot;&gt;正则表达式里的条件&lt;/h4&gt;

&lt;p&gt;正则表达式里的条件要用 &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; 来定义。
之前我们已经见过几种特定的条件了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; 匹配前一个字符或者表达式，如果它存在的话；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?=&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;?&amp;lt;=&lt;/code&gt; 匹配前面或者后面的文本，如果它存在的话；&lt;/li&gt;
  &lt;li&gt;嵌入语法也使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;根据一个回溯引用来进行条件处理。&lt;/li&gt;
      &lt;li&gt;根据一个前后查找来进行条件处理。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;回溯引用条件&quot;&gt;回溯引用条件&lt;/h4&gt;
&lt;p&gt;回溯引用条件只有在前面一个表达式搜索取得成功的情况下才允许使用的一个表达式。&lt;/p&gt;

&lt;p&gt;需要把文本里面 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;IMG&amp;gt;&lt;/code&gt; 标签全都找去来，不仅如此，如果某个 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;IMG&amp;gt;&lt;/code&gt; 标签是一个链接 (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;A&amp;gt;&lt;/code&gt; 标签包裹)，还需要把链接匹配出来。&lt;/p&gt;

&lt;p&gt;文本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- Nav bar --&amp;gt;
&amp;lt;TD&amp;gt;
  &amp;lt;A href=&quot;/home&quot;&amp;gt;&amp;lt;IMG src=&quot;/images/home.gif&quot;&amp;gt;&amp;lt;/A&amp;gt;
  &amp;lt;IMG src=&quot;/images/home.gif&quot;&amp;gt;
  &amp;lt;A href=&quot;/home&quot;&amp;gt;&amp;lt;IMG src=&quot;/images/home.gif&quot;&amp;gt;&amp;lt;/A&amp;gt;
  &amp;lt;IMG src=&quot;/images/home.gif&quot;&amp;gt;
  &amp;lt;A href=&quot;/home&quot;&amp;gt;&amp;lt;IMG src=&quot;/images/home.gif&quot;&amp;gt;&amp;lt;/A&amp;gt;
  &amp;lt;IMG src=&quot;/images/home.gif&quot;&amp;gt;
&amp;lt;/TD&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;正则：
&lt;code class=&quot;highlighter-rouge&quot;&gt;(&amp;lt;[Aa]\s+[^&amp;gt;]+&amp;gt;\s*)?&amp;lt;[Ii][Mm][Gg]\s+[^&amp;gt;]+&amp;gt;(?(1)\s*&amp;lt;/[Aa]&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;解析：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(&amp;lt;[Aa]\s+[^&amp;gt;]+&amp;gt;\s*)?&lt;/code&gt; 将匹配一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;A&amp;gt;&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 标签，以及标签内部的任何属性，这个标签可有可无，因为后面跟了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;？&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;[Ii][Mm][Gg]\s+[^&amp;gt;]+&amp;gt;&lt;/code&gt; 匹配一个 &lt;img /&gt; (大小写均可) 标签以及任意属性。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?(1)\s*&amp;lt;/[Aa]&amp;gt;)&lt;/code&gt;  是一个回溯引用条件，&lt;code class=&quot;highlighter-rouge&quot;&gt;?(1)&lt;/code&gt; 的意思是：如果第一个回溯引用存在这个例子中就是前面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;A&amp;gt;&lt;/code&gt; 标签），则使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;\s*&amp;lt;/[Aa]&amp;gt;&lt;/code&gt; 继续匹配。只有前面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;A&amp;gt;&lt;/code&gt; 标签匹配成功，才继续进行后面的匹配。如果(1) 存在，&lt;code class=&quot;highlighter-rouge&quot;&gt;\s*&amp;lt;/[Aa]&amp;gt;&lt;/code&gt; 将匹配 结束标签 &amp;lt;/A&amp;gt; 之前的任意空白字符。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;回溯引用条件否表达式&quot;&gt;回溯引用条件否表达式&lt;/h5&gt;
&lt;p&gt;形式：
&lt;code class=&quot;highlighter-rouge&quot;&gt;(?(backreference)true-regex|false-regex)&lt;/code&gt;
如果 backreference 成立 执行 true-regex ，不成了，执行 false-regex。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;!!!! 本来想用这个查找下代码里面有多少是换行后的&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt; 多少是空格后的&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; 竟然不支持条件查找!!!.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再来看之前那个电话号码的例子，正则改为：
&lt;code class=&quot;highlighter-rouge&quot;&gt;(\()?\d{3}(?(1)\)|-)\d{3}-\d{4}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;解析：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(\()?&lt;/code&gt; 匹配了一个可选左括号；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\d{3}&lt;/code&gt; 匹配了3位数字；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?(1)\)|-)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?(1)&lt;/code&gt; 判断前面的条件是否成立，&lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt; 是否存在。&lt;/li&gt;
      &lt;li&gt;存在 执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;\)&lt;/code&gt;；&lt;/li&gt;
      &lt;li&gt;不存在，执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\d{3}&lt;/code&gt; 匹配了3位数字&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 匹配了一个连字符；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\d{4}&lt;/code&gt; 匹配了4位数字。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;前后查找条件&quot;&gt;前后查找条件&lt;/h4&gt;

&lt;p&gt;其实就是之前的回溯引用差不多，不同的就是，这里的回溯条件使用了自定义的子正则表达式。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d{5}(?(?=-)-\d{4})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?(?=-)-\d{4})&lt;/code&gt; 的意思是如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;(?=-)&lt;/code&gt; 成立，则进行后面 &lt;code class=&quot;highlighter-rouge&quot;&gt;-\d{4}&lt;/code&gt; 的匹配。&lt;/p&gt;

</description>
        <pubDate>Mon, 07 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</guid>
        
        <category>内功</category>
        
        <category>正则表达式</category>
        
        
      </item>
    
      <item>
        <title>Processing symbol files</title>
        <description>&lt;h1 id=&quot;xcode真机调试出现-is-busy-processing-symbol-files&quot;&gt;Xcode真机调试出现“* is busy: Processing symbol files”&lt;/h1&gt;

&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;重新插拔数据线；&lt;/li&gt;
  &lt;li&gt;打开iTunes；&lt;/li&gt;
  &lt;li&gt;终极解决方案：重启手机。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 04 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/04/Xcode%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E5%87%BA%E7%8E%B0-is-busy-Processing-symbol-files/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/04/Xcode%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E5%87%BA%E7%8E%B0-is-busy-Processing-symbol-files/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>jekyll启动本地服务时报端口错误</title>
        <description>&lt;h1 id=&quot;jekyll启动本地服务时报端口错误&quot;&gt;jekyll启动本地服务时报端口错误&lt;/h1&gt;

&lt;p&gt;报错内容为：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Auto-regeneration: enabled for ‘/Users/Yunis/Documents/Github/yunisSong.github.io’
Configuration file: /Users/Yunis/Documents/Github/yunisSong.github.io/_config.yml
jekyll 3.4.1 | Error:  Address already in use - bind(2) for 127.0.0.1:4000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一直本地的服务启动不起来，是端口被占用了，应该是我之前启动的jekyll 服务没有关闭，导致新服务启动不了。最终的解决方案如下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/jekyll端口错误.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1,查看占用端口的进程&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 查看占用4000端口的服务
sudo lsof -wni tcp:4000

结果如下：
COMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
ruby    15149 Yunis    8u  IPv4 0xb0723eb7e38e11c5      0t0  TCP 127.0.0.1:terabase (LISTEN)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2，杀掉占用端口的进程（sudo kill -9 PID）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo kill -9 15149
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3，再次启动 jekyll 服务正常。&lt;/p&gt;

&lt;p&gt;参考链接：https://stackoverflow.com/a/39351624/7771598&lt;/p&gt;

</description>
        <pubDate>Wed, 02 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/02/jekyll%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%97%B6%E6%8A%A5%E7%AB%AF%E5%8F%A3%E9%94%99%E8%AF%AF/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/02/jekyll%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%97%B6%E6%8A%A5%E7%AB%AF%E5%8F%A3%E9%94%99%E8%AF%AF/</guid>
        
        <category>jekyll</category>
        
        
      </item>
    
      <item>
        <title>iOS蓝牙框架的简单实用</title>
        <description>&lt;h1 id=&quot;ios蓝牙框架的简单实用&quot;&gt;iOS蓝牙框架的简单实用&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreBluetooth&lt;/code&gt; 分为两种模式：&lt;/p&gt;

&lt;p&gt;1，&lt;code class=&quot;highlighter-rouge&quot;&gt;peripheral&lt;/code&gt; 外设&lt;/p&gt;

&lt;p&gt;2，&lt;code class=&quot;highlighter-rouge&quot;&gt;central&lt;/code&gt; 中心&lt;/p&gt;

&lt;h3 id=&quot;蓝牙中心模式流程&quot;&gt;蓝牙中心模式流程&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;建立中心角色&lt;/li&gt;
  &lt;li&gt;扫描外设（discover）&lt;/li&gt;
  &lt;li&gt;连接外设(connect)&lt;/li&gt;
  &lt;li&gt;扫描外设中的服务和特征(discover)
    &lt;ul&gt;
      &lt;li&gt;4.1 获取外设的services&lt;/li&gt;
      &lt;li&gt;4.2 获取外设的Characteristics,获取Characteristics的值，获取Characteristics的Descriptor和Descriptor的值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;与外设做数据交互(explore and interact)&lt;/li&gt;
  &lt;li&gt;订阅Characteristic的通知&lt;/li&gt;
  &lt;li&gt;断开连接(disconnect)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;蓝牙外设模式流程&quot;&gt;蓝牙外设模式流程&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;启动一个Peripheral管理对象&lt;/li&gt;
  &lt;li&gt;本地Peripheral设置服务,特性,描述，权限等等&lt;/li&gt;
  &lt;li&gt;Peripheral发送广告&lt;/li&gt;
  &lt;li&gt;设置处理订阅、取消订阅、读characteristic、写characteristic的委托方法&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;示意图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/iOS_CoreBluetooth.png&quot; alt=&quot;思维导图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大神写的文章，写的很详细，最后提供了一个蓝牙库，封装的很简便。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://liuyanwei.jumppo.com/2015/07/17/ios-BLE-1.html&quot;&gt;iOS蓝牙开发（一）蓝牙相关基础知识&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://liuyanwei.jumppo.com/2015/08/14/ios-BLE-2.html&quot;&gt;ios蓝牙开发（二）ios连接外设的代码实现&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://liuyanwei.jumppo.com/2015/09/07/ios-BLE-3.html&quot;&gt;ios蓝牙开发（三）app作为外设被连接的实现&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://liuyanwei.jumppo.com/2015/09/11/ios-BLE-4.html&quot;&gt;ios蓝牙开发（四）BabyBluetooth蓝牙库介绍&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 01 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/01/iOS%E8%93%9D%E7%89%99%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/01/iOS%E8%93%9D%E7%89%99%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8/</guid>
        
        <category>蓝牙</category>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Head First HTML与CSS</title>
        <description>&lt;h1 id=&quot;head-first-html与css&quot;&gt;Head First HTML与CSS&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;构建网页的文件名称不要有空格
&amp;lt;a href=&quot;test.html&quot;&amp;gt;点击跳转到同级目录下test.html 文件&amp;lt;/a&amp;gt;
&amp;lt;a href=&quot;../test.html&quot;&amp;gt;点击跳转到上级目录下test.html 文件&amp;lt;/a&amp;gt;
&amp;lt;a href=&quot;Yunis/test.html&quot;&amp;gt;点击跳转到Yunis目录下test.html 文件&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;列表&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;....&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;....&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;....&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;


&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;....&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;....&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;....&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;跳转到页面指定位置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;index.html :
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Head First Lounge Directions&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jump&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Directions&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;




当使用

&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index.html#jump&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;跳转&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

会跳转到 index.html 页面 ID 为jump 的位置。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;相对路径、绝对路径&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;http&quot;//www.Yunis.com/demo/test/play.html&quot;&amp;gt;网页&amp;lt;/a&amp;gt;

&amp;lt;a href=&quot;demo/test/play.html&quot;&amp;gt;网页&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 元素&lt;/p&gt;

&lt;p&gt;alt&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;当 图片不可显示时，显示 alt 内容
    &amp;lt;img src=&quot;images/00drinks.gif&quot; alt=&quot;这是一个备选的显示&quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;CSS&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;一个元素可以有多个规则。
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        p {
            color: maroon;
        }
    
        h1,h2 {
            font-family :sans-serif;
            color :gray;
        }
    
        h1 {
            border-bottom:1px solid black;
        }
    
    &amp;lt;/style&amp;gt;
    
    
    
    也可以这样引入 CSS 样式
 &amp;lt;link type = &quot;text/css&quot; rel = &quot;stylesheet&quot; href = &quot;lounge.css&quot;&amp;gt;


rel 属性指定了 HTML 文件和所链接的文件之间的关系。

&amp;lt;link&amp;gt; 是一个 void 元素。



可以为一个元素增加 class 属性，然后单独为这个属性的值设置样式。

&amp;lt;p class=&quot;greentea&quot;&amp;gt;
      &amp;lt;img src=&quot;../images/green.jpg&quot;&amp;gt;
      Chock full of vitamins and minerals, this elixir
      combines the healthful benefits of green tea with
      a twist of chamomile blossoms and ginger root.
    &amp;lt;/p&amp;gt;
p.greentea {
    color:green;
}

这样的话只要 class 是 greentea 这个值的话，都会设置为这个样式。
.greentea {
    color:green;
}

class 可以有多个值 使用空格分割。

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;逻辑区，包围标签，相当于 一个块的概念，把里面的元素当做一个整体处理。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;创建内联字符和元素的逻辑分组。功能等同 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 27 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/07/27/Head-First-HTML%E4%B8%8ECSS/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/27/Head-First-HTML%E4%B8%8ECSS/</guid>
        
        <category>前端</category>
        
        
      </item>
    
      <item>
        <title>自动化的一些实践</title>
        <description>&lt;h1 id=&quot;自动化的一些实践&quot;&gt;自动化的一些实践&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;更新 Xcode 升级到8.3.3 以后，原有打包脚本出错，需要在指定目录添加一个plist文件，现修改如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;plist 文件内容如下，参考链接 &lt;a href=&quot;https://stackoverflow.com/a/43154970/7771598&quot;&gt;stackoverflow&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;You’ll have to at least specifiy an entry for method (app-store, ad-hoc, enterprise etc. - defaults to development).&lt;/p&gt;

&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;method&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;development&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;需要放在脚本里面 targerIPA_parth 路径下。&lt;/p&gt;

&lt;p&gt;今天尝试了下使用脚本自动化打包并发布到蒲公英，现记录如下：&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;
&lt;h1 id=&quot;---coding-utf-8---&quot;&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em&gt;-&lt;/h1&gt;
&lt;p&gt;import os
import sys
import time&lt;/p&gt;

&lt;p&gt;#发布到蒲公英的说明文档
updateDescription = “”&lt;/p&gt;
&lt;h1 id=&quot;项目根目录&quot;&gt;项目根目录&lt;/h1&gt;
&lt;p&gt;project_path = “”&lt;/p&gt;

&lt;p&gt;#打包证书名称
cerName = “”
#发布证书
#cerName = “”
#工程名称
projectName = “”+”.xcodeproj”
#scheme
scheme = “”&lt;/p&gt;
&lt;h1 id=&quot;打包后ipa存储目录&quot;&gt;打包后ipa存储目录&lt;/h1&gt;
&lt;p&gt;targerIPA_parth = “”&lt;/p&gt;

&lt;p&gt;#时间戳
timeStr = time.strftime(‘%Y-%m-%d%H%M%S’,time.localtime(time.time()))
#activePath
activePath = targerIPA_parth +timeStr+”.xcarchive”
#蒲公英Key
PGY_key=””
#蒲公英APIKey
PGY_APIkey=””&lt;/p&gt;

&lt;h1 id=&quot;清理项目-创建build目录&quot;&gt;清理项目 创建build目录&lt;/h1&gt;
&lt;p&gt;def clean_project_mkdir_build():
    print(“&lt;strong&gt;**&lt;/strong&gt;clean&lt;strong&gt;**&lt;/strong&gt;”)
    os.system(‘cd %s;xcodebuild clean -project “%s” -scheme %s -configuration release’ % (project_path,projectName,scheme)) # clean 项目&lt;/p&gt;

&lt;p&gt;def build_project():
    print(“build xcarchive start”)
    os.system (‘xcodebuild -list’)
    os.system (‘cd %s;xcodebuild archive -project “%s” -scheme %s -configuration release -sdk iphoneos10.3  IPHONEOS_DEPLOYMENT_TARGET=9.0 -archivePath %s;’ % (project_path,projectName,scheme,activePath))
    print(“build xcarchive end”)&lt;/p&gt;

&lt;h1 id=&quot;打包ipa-并且保存在桌面&quot;&gt;打包ipa 并且保存在桌面&lt;/h1&gt;
&lt;p&gt;def build_ipa():
    print(“build IPA start”)
    os.chdir(targerIPA_parth)
    os.system (‘xcodebuild -exportArchive -archivePath %s -exportPath %s -exportOptionsPlist %sIPA.plist’%(activePath,targerIPA_parth,targerIPA_parth))
    print(“build IPA end”)&lt;/p&gt;

&lt;p&gt;def updateIPAToPGY():
    print(“开始上传蒲公英”)
    os.system (‘curl -F &quot;updateDescription=%s&quot; -F &quot;file=@%scopm_cust.ipa&quot; -F &quot;uKey=%s&quot; -F &quot;_api_key=%s&quot; https://qiniu-storage.pgyer.com/apiv1/app/upload’%(updateDescription,targerIPA_parth,PGY_key,PGY_APIkey))
    print(“上传蒲公英完成”)&lt;/p&gt;

&lt;p&gt;def updateSVN():
    print(“更新SVN数据”)
    os.chdir(project_path)  &lt;br /&gt;
    os.system (‘svn upgrade ‘)
    os.system (‘svn update ‘)  &lt;br /&gt;
    print(“更新SVN完成”)&lt;/p&gt;

&lt;p&gt;def main():&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#更新SVN
updateSVN()
# 清理并创建build目录
clean_project_mkdir_build()
# 编译coocaPods项目文件并 执行编译目录
build_project()
# 打包ipa 并制定到桌面
build_ipa()
#上传到蒲公英
updateIPAToPGY()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;执行&quot;&gt;执行&lt;/h1&gt;
&lt;p&gt;main()```&lt;/p&gt;

</description>
        <pubDate>Thu, 13 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/07/13/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/13/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5/</guid>
        
        <category>内功</category>
        
        
      </item>
    
      <item>
        <title>基与CocosPods和SVN的一次组件化实践</title>
        <description>&lt;p&gt;TODO:如何添加到 SVN
 文件描述 与 文件层级的关系。&lt;/p&gt;
&lt;h1 id=&quot;基与cocospods和svn的一次组件化实践&quot;&gt;基与CocosPods和SVN的一次组件化实践&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;入职新公司，发现两个工程共享一套代码，每次修改一个地方，就要同步到另外一个地方去修改，有时间就会很容易遗忘修改另外一个工程。刚好之前看过一些模块化的文章，这次就尝试下，把公用的代码打成一个私有库，每次更新代码都去到私有库去更新，只需要更新一个，两个工程就都可以兼顾到。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;记录下步骤：&lt;/p&gt;

&lt;h3 id=&quot;1安装-cocoapods-repo-svn-插件&quot;&gt;1,安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods-repo-svn&lt;/code&gt; 插件&lt;/h3&gt;
&lt;p&gt;没什么好说的，就是一行命令。
&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install cocoapods-repo-svn&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;2提取共有代码创建-podspec-文件&quot;&gt;2，提取共有代码，创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;podspec&lt;/code&gt; 文件&lt;/h3&gt;
&lt;p&gt;提取两个工程中的共有代码，然后进入目录，创建&lt;code class=&quot;highlighter-rouge&quot;&gt;podspec&lt;/code&gt; 文件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod spec create CommonWebTools&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CommonWebTools&lt;/code&gt; 是你提取的私有库的名称。&lt;/p&gt;

&lt;h3 id=&quot;3编辑podspec文件内容&quot;&gt;3，编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;podspec&lt;/code&gt;文件内容&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Pod::Spec.new do |s|

    s.name         = &quot;CommonWebTools&quot;

    s.version      = &quot;0.0.1&quot;

    s.summary      = &quot;提取公用代码.&quot;

    s.description  = &quot;Good&quot;

    s.homepage     = &quot;http://www.baidu.com&quot;

    s.license      = &quot;MIT&quot;

    s.author             = { &quot;iThinkerYZ&quot; =&amp;gt; &quot;xxxxxxxx@qq.com&quot; }

  s.source       = { :svn =&amp;gt; &quot;http://xxxxxx/svn/DIC-TS-eBOSS/SourceCode/50-COPMO2O/1_Develop/00-IOS/ComponentTestDemo&quot; }

 s.source_files = &quot;CommonWebTools&quot;, &quot;CommonWebTools/*.{h,m}&quot;


  end

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;多个s.source_files文件使用 ， 分割&lt;/p&gt;

&lt;h3 id=&quot;4使用&quot;&gt;4，使用：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;target 'TestComponentDemo' do
pod 'CommonWebTools', :svn =&amp;gt; &quot;http://xxxxxxxx/svn/DIC-TS-eBOSS/SourceCode/50-COPMO2O/1_Develop/00-IOS/ComponentTestDemo&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;5如何更新代码&quot;&gt;5，如何更新代码&lt;/h3&gt;

&lt;p&gt;提交代码后，
使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod update --verbose --no-repo-update&lt;/code&gt;
即可生效。&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/07/12/%E5%9F%BA%E4%B8%8ECocosPods%E5%92%8CSVN%E7%9A%84%E4%B8%80%E6%AC%A1%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AE%9E%E8%B7%B5/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/12/%E5%9F%BA%E4%B8%8ECocosPods%E5%92%8CSVN%E7%9A%84%E4%B8%80%E6%AC%A1%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AE%9E%E8%B7%B5/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>输入框切换键盘卡顿的解决办法</title>
        <description>&lt;h1 id=&quot;输入框切换键盘卡顿的解决办法&quot;&gt;输入框切换键盘卡顿的解决办法&lt;/h1&gt;

&lt;p&gt;今天开发碰到一个问题：
有两个输入框，一个输入手机号码、一个输入验证码。
客户要求：手机号输入框输入满11位时，切换到验证码输入框。&lt;/p&gt;

&lt;p&gt;很常见的需求，也很好解决,观察输入框内容的变化，然后切换键盘响应：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    //监听位数
    if (field.text.length &amp;gt;= 11) {
        dispatch_async(dispatch_get_main_queue(), ^{
            //输入框取消响应
            [field resignFirstResponder];
            //验证码输入框 响应键盘
            [self.codeField becomeFirstResponder];

        });
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;很愉快的提交了代码，但是测试的小伙伴告诉我，键盘切换的时间有卡顿。？？？？一脸懵逼！！&lt;/p&gt;

&lt;p&gt;这也会卡？&lt;/p&gt;

&lt;p&gt;然后想到了是不是因为动画引起的问题？
更改如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  //监听位数
    if (field.text.length &amp;gt;= 11) {
        dispatch_async(dispatch_get_main_queue(), ^{
            [UIView performWithoutAnimation:^{
                //输入框取消响应
                [field resignFirstResponder];
                //验证码输入框 响应键盘
                [self.codeField becomeFirstResponder];
            }];
        });
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;还是不行，是在没有办法了，最后搜索到这样一个答案：
&lt;a href=&quot;https://stackoverflow.com/questions/27098097/becomefirstresponder-not-working-in-ios-8?answertab=votes#tab-top&quot;&gt;stackoverflow&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A responder object only becomes the first responder if the current responder can resign first-responder status (canResignFirstResponder) and the new responder can become first responder.
You may call this method to make a responder object such as a view the first responder. However, you should only call it on that view if it is part of a view hierarchy. If the view’s window property holds a UIWindow object, it has been installed in a view hierarchy; if it returns nil, the view is detached from any hierarchy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[txtAddNew performSelector:@selector(becomeFirstResponder) withObject:nil afterDelay:0];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;心想这样总可以了吧。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    [field resignFirstResponder];
    [self.codeField performSelector:@selector(becomeFirstResponder) withObject:nil afterDelay:0];

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;。。。
还是不行。。&lt;/p&gt;

&lt;p&gt;最后把    &lt;code class=&quot;highlighter-rouge&quot;&gt;[field resignFirstResponder];&lt;/code&gt; 这样代码注释掉才可以。&lt;/p&gt;

&lt;p&gt;最终版本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    //监听位数
    if (field.text.length &amp;gt;= 11) {
        //切换键盘响应
        //解决切换键盘卡顿
        [self.codeField performSelector:@selector(becomeFirstResponder) withObject:nil afterDelay:0];
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;猜测应该是键盘所在的 &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; 切换导致的这个问题。&lt;/p&gt;

&lt;p&gt;如果先取消第一个输入框的响应，再让第二个输入框响应， 这样的话会先把当前键盘所在的 &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; 销毁，然后创建新的 &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;，就会导致卡顿。&lt;/p&gt;

&lt;p&gt;如果不先取消第一个键盘的响应，就不会销毁 window 也不会创建新的 window ，就不会卡顿。有时间了写个 demo 验证下。&lt;/p&gt;

&lt;p&gt;好尴尬，在模拟器上测试。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2017-07-08 17:45:07.888 TestBecomeFirstResponder[14397:582182] 窗口 = 0x7f8cc841cd70
2017-07-08 17:45:07.888 TestBecomeFirstResponder[14397:582182] 窗口 = 0x7f8cc85b2630
2017-07-08 17:45:07.889 TestBecomeFirstResponder[14397:582182] 窗口 = 0x7f8cc847e910
2017-07-08 17:45:07.889 TestBecomeFirstResponder[14397:582182] 




2017-07-08 17:45:08.973 TestBecomeFirstResponder[14397:582182] 窗口 = 0x7f8cc841cd70
2017-07-08 17:45:08.973 TestBecomeFirstResponder[14397:582182] 窗口 = 0x7f8cc85b2630
2017-07-08 17:45:08.974 TestBecomeFirstResponder[14397:582182] 窗口 = 0x7f8cc847e910
2017-07-08 17:45:08.974 TestBecomeFirstResponder[14397:582182] 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;窗口都没有变化。。。这让老夫如何是好！&lt;/p&gt;

</description>
        <pubDate>Sat, 08 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/07/08/%E8%BE%93%E5%85%A5%E6%A1%86%E5%88%87%E6%8D%A2%E9%94%AE%E7%9B%98%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/08/%E8%BE%93%E5%85%A5%E6%A1%86%E5%88%87%E6%8D%A2%E9%94%AE%E7%9B%98%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>

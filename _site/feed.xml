<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>三十一</title>
    <description>潜心修行中。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 05 Apr 2017 15:03:05 +0800</pubDate>
    <lastBuildDate>Wed, 05 Apr 2017 15:03:05 +0800</lastBuildDate>
    <generator>Jekyll v3.4.1</generator>
    
      <item>
        <title>利用CallKit 实现来电识别</title>
        <description>&lt;h1 id=&quot;利用callkit-实现来电识别&quot;&gt;利用CallKit 实现来电识别&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近项目中新增了一个需求，需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS 10&lt;/code&gt; 中新增的 &lt;code class=&quot;highlighter-rouge&quot;&gt;CallKit&lt;/code&gt; 来实现一个来电识别的功能。按照惯例，先在网上搜索了一下，看了几篇文章，觉得实现起来很简单嘛。于是就愉快的开始了，然后就开始遇见一个个坑，网上目前存在的文章都避重就轻的简单的实现了号码识别，但是关于号码规则、大数量的数据如何处理等都没有提及。这篇文字就记录下我个人在实现这个功能时遇到的坑以及如何解决的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一简单实现&quot;&gt;一，简单实现&lt;/h3&gt;

&lt;p&gt;如何实现就不在详细描写了，网上已经有很多的文章写了。&lt;/p&gt;

&lt;h3 id=&quot;二具体功能实现遇到的各种坑&quot;&gt;二，具体功能实现遇到的各种坑&lt;/h3&gt;

&lt;h4 id=&quot;号码规则&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;号码规则&lt;/code&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;号码必须进行排列，添加顺序为优先添加小的号码。譬如：123和132两个号码要先添加123，然后添加132.&lt;/li&gt;
  &lt;li&gt;号码的格式化，手机号码前面需要添加国家码，固话需要带有区号，然后区号去零，然后前面添加国家码。譬如手机号：185XXXXX8497  需要格式化为86185XXXXX8497；固话 0755-12345678 需要格式化为：8675512345678.&lt;/li&gt;
  &lt;li&gt;号码去重，一个手机号码只能添加一次，添加多次会开启失败。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;大数量是数据如何添加&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;大数量是数据如何添加&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;大数据不能一下读取到内存中，否则会导致打开失败。解决办法：从文件中一行行读取数据，使用后释放。我的号码库文件，大概这样的形式：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [
 {&quot;86196852102&quot;: &quot;骚扰电话&quot;},
 {&quot;86196852201&quot;: &quot;诈骗电话&quot;},
 {&quot;86196852202&quot;: &quot;骚扰电话&quot;},
 {&quot;86196852213&quot;: &quot;诈骗电话&quot;},
 {&quot;86201008613&quot;: &quot;广告推销&quot;},
 {&quot;86202096585&quot;: &quot;诈骗电话&quot;},
 {&quot;86211008611&quot;: &quot;广告推销&quot;},
 {&quot;86216618834&quot;: &quot;广告推销&quot;},
 {&quot;86219506524&quot;: &quot;骚扰电话&quot;},
 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;具体代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:groupIdentifierExtension];
    //文件路径
    containerURL = [containerURL URLByAppendingPathComponent:LocalstorageName];
    NSString* fileRoot = containerURL.path;
    FILE *file = fopen([fileRoot UTF8String], &quot;r&quot;);
    char buffer[1024];
    while (fgets(buffer, 1024, file) != NULL){
        @autoreleasepool {
            NSString* result = [NSString stringWithUTF8String:buffer];
            result = [result stringByReplacingOccurrencesOfString:@&quot;,&quot; withString:@&quot;&quot;];
            NSData *jsonData = [result dataUsingEncoding:NSUTF8StringEncoding];
            NSError *err;
            NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:jsonData
                                                                options:NSJSONReadingAllowFragments
                                                                  error:&amp;amp;err];
            if(err)
            {
            }else
            {
                NSString *number = dic.allKeys[0];
                NSString *name = dic[number];
                
                if (number == nil || name == nil)
                {
                }else {
//                    number = [self fixPhone:number];
                    CXCallDirectoryPhoneNumber phoneNumber = [number longLongValue];
                    [context addIdentificationEntryWithNextSequentialPhoneNumber:phoneNumber label:name];
                }

            }
            dic = nil;
        }
        
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;实际测试，将近100万的数据在 6S Plus 30S内可以完成加载。&lt;/p&gt;

&lt;h4 id=&quot;如何更新数据&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;如何更新数据&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;号码库可以通过下载进行更新，一般下载的是压缩包，解压缩后，把数据写进共享文件内，更新数据后，需要通知系统去刷新数据库，是数据生效。具体解压缩可以搜索： &lt;code class=&quot;highlighter-rouge&quot;&gt;SSZipArchive&lt;/code&gt; ,扩展和主APP数据扩展可以看这篇文章：&lt;a href=&quot;http://foggry.com/blog/2014/06/23/wwdc2014zhi-app-extensionsxue-xi-bi-ji/&quot;&gt;WWDC2014之App Extensions学习笔记&lt;/a&gt; 通知系统刷新号码数据库的具体代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  //IdentifierExtension 为扩展的 Bundle Identifier
   CXCallDirectoryManager *manager = [CXCallDirectoryManager sharedInstance];
    [manager reloadExtensionWithIdentifier:IdentifierExtension completionHandler:^(NSError * _Nullable error) {
    }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 29 Mar 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/29/CallKit/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/29/CallKit/</guid>
        
        <category>iOS</category>
        
        <category>CallKit</category>
        
        <category>来电识别</category>
        
        
      </item>
    
  </channel>
</rss>

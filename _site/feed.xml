<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>三十一</title>
    <description>潜心修行中。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 16 May 2017 14:48:49 +0800</pubDate>
    <lastBuildDate>Tue, 16 May 2017 14:48:49 +0800</lastBuildDate>
    <generator>Jekyll v3.4.1</generator>
    
      <item>
        <title>Javascrpt高级程序设计(第3版)读书笔记03</title>
        <description>&lt;h1 id=&quot;javascrpt高级程序设计第3版读书笔记03&quot;&gt;Javascrpt高级程序设计(第3版)读书笔记03&lt;/h1&gt;
&lt;h2 id=&quot;引用类型&quot;&gt;引用类型&lt;/h2&gt;
&lt;p&gt;引用类型是一种数据结构，用于将数据和功能组织在一起。通常也被称为类。引用类型的对象本身是放置在堆中的，对象引用是存在栈中的。&lt;/p&gt;
&lt;h3 id=&quot;堆栈&quot;&gt;堆、栈&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/jeffchen/archive/2006/12/28/605689.html&quot;&gt;堆栈的区别&lt;/a&gt;
堆（Heap）栈（Stack）&lt;/p&gt;

&lt;p&gt;1、内存分配方面：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;堆：一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事，分配方式是类似于链表。可能用到的关键字如下：new、malloc、delete、free等等。

栈：由编译器(Compiler)自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、申请方式方面：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;堆：需要程序员自己申请，并指明大小。在c中malloc函数如p1 = (char *)malloc(10)；在C++中用new运算符，但是注意p1、p2本身是在栈中的。因为他们还是可以认为是局部变量。

栈：由系统自动分配。 例如，声明在函数中一个局部变量 int b；系统自动在栈中为b开辟空间。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3、系统响应方面：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;堆：操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样代码中的delete语句才能正确的释放本内存空间。另外由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。

栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4、大小限制方面：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;堆：是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。

栈：在Windows下, 栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是固定的（是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5、效率方面：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;堆：是由new分配的内存，一般速度比较慢，而且容易产生内存碎片，不过用起来最方便，另外，在WINDOWS下，最好的方式是用VirtualAlloc分配内存，他不是在堆，也不是在栈是直接在进程的地址空间中保留一快内存，虽然用起来最不方便。但是速度快，也最灵活。

栈：由系统自动分配，速度较快。但程序员是无法控制的。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;6、存放内容方面：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。

栈：在函数调用时第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈，然后是函数中的局部变量。 注意: 静态变量是不入栈的。当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7、存取效率方面：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;堆：char *s1 = &quot;Hellow Word&quot;；是在编译时就确定的；

栈：char s1[] = &quot;Hellow Word&quot;； 是在运行时赋值的；用数组比用指针速度要快一些，因为指针在底层汇编中需要用edx寄存器中转一下，而数组在栈上直接读取。 ### Object 类型 目前看到的大多数引用类型值都是 `Object` 类型的实例。OC 里面的 `NSObject` 一样。 `Object` 实例有两种创建方式，第一张是使用 `new` 操作符后跟 `Object` 构造函数：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var person = new Object();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;另一种就是使用字面量表示法。目的是简化创建过程中包含大量属性的对象。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var person = {
    name : &quot;Yunis&quot;,
    age : 16
}

var person = {}; // new Object()  
person.name = &quot;Nicholas&quot;;
person.age = 29;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一般来说，访问对象的属性使用都是点语法，但是 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中可以使用方括号来访问对象的属性：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert(person[&quot;name&quot;]);//Yunis
alert(person.name);//Yunis
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过方括号访问属性，还有另外一个用处，有些属性中包含导致语法错误的字符、或者关键字、保留字：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;person[&quot;first name&quot;] = &quot;Yunis&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;一般来说，尽量使用点语法访问属性。&lt;/p&gt;

&lt;h3 id=&quot;array-类型&quot;&gt;Array 类型&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中的数组与其他语言的数组有很大的不同。
&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中数组中每一项都可以保存任何类型的数据。就是不同于其他语言，一个数组对象中，可以同时存在 字符串、数字、对象和数组等。&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 的数组还可以动态调整大小，可以随着数据的添加自动增长。 &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; 的创建方式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//创建一个空数组
var colors = new Array();

//这个是创建一个包含3个元素的数组
var colors = new Array(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;);

//这个是创建一个长度为20 的数组
var colors = new Array(20);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建的过程可以省略 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 关键字：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//创建一个空数组
var colors = Array();

//这个是创建一个包含3个元素的数组
var colors = Array(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;);

//这个是创建一个长度为20 的数组
var colors = Array(20);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也可以使用字面量创建：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//创建一个空数组
var colors = [];

//这个是创建一个包含3个元素的数组
var colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];


❗️❗️❗️❗️❗️各个浏览器的处理也不一致，不哟啊使用下面的写法❗️❗️❗️❗️
//❗️❗️❗️ 这样会创建一个包含两个数组的数组，一个数组长度是2，一个数组长度是3. ❗️❗️❗️ 
var colors = [2,3，];

//❗️❗️❗️ 这样会创建一个长度是4或者5的数组 ❗️❗️❗️ 
var colors = [,,,,];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;与其他语言不通，数组读取超过了初始化的长度，不会报错。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var colors = [&quot;u&quot;,&quot;j&quot;,];
alert(colors[100]); // &quot;undefined&quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;并且 数组的 length 属性 不是只读的，是可以修改的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var colors = [&quot;u&quot;,&quot;j&quot;,];
colors.length = 100;
alert(colors.length); // 100

var colors = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;];
//设置长度后，位于这个长度后的数据都会被清空，变为 undefined
colors.length = 2;
alert(colors); // a,b


//可以使用 length 属性 方便的在数组尾部添加数据
//因为数组的最后一项的索引始终是 length - 1 ，因此下一项的索引就是 length。
var colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];
colors[colors.length] = &quot;black&quot;;//&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;,&quot;black&quot;
colors[colors.length] = &quot;brown&quot;;//&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;,&quot;black&quot;,&quot;brown&quot;




//如果我们超出当前数组的 长度添加一个元素
var colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];
colors[99] = &quot;black&quot;;
//长度就变成了 100  但是 索引 3 - 98 之间值都是 undefined
alert(colors.length); // 100
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;检测数组&quot;&gt;检测数组&lt;/h4&gt;
&lt;p&gt;对于一个网页、或者一个全局作用域而言，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; 操作符就可以得到满意的结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//判断 value 是不是数组
if (value instanceof Array){ 
    // 是，执行相应的操作
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;但是在多个框架或者说多个不同的全局执行环境，就存在了不同版本的 Array 的构造函数，&lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; 就无法正确的工作了，需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.isArray()&lt;/code&gt; 方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//判断 value 是不是数组

if (Array.isArray(value)){
    // 是，执行相应的操作
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;转换方法&quot;&gt;转换方法&lt;/h4&gt;
&lt;p&gt;可以使用 join() 方法使用不同的分割符来构建字符串。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];
alert(colors.join(&quot;,&quot;));       //red,green,blue
alert(colors.join(&quot;||&quot;));      //red||green||blue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;栈方法&quot;&gt;栈方法&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中的数组可以表现的跟栈一样。栈的访问规则是后进先出（LIFO，Last-In-First-Out），也就是最后添加的数据会最早被移除。在栈中的推入和弹出操作只会发生在栈的顶部。&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 为数组提供了 &lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;pop()&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt; 方法可以接受任意数量的参数，把他们逐个添加到数组尾部，并返回修改后的数组长度。
&lt;code class=&quot;highlighter-rouge&quot;&gt;pop()&lt;/code&gt; 方法从数组末尾移除最后一项，并修改数组长度，然后返回移除的项。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var colors = new Array();
var count = colors.push(&quot;red&quot;, &quot;green&quot;);
alert(colors); //red,green

alert(count); //2
count = colors.push(&quot;black&quot;);
alert(count);     //3
var item = colors.pop();
alert(item);      //&quot;black&quot;
alert(colors.length);   //2




var colors = new Array(&quot;测试数据占位&quot;,&quot;测试数据占位01&quot;);
var count = colors.push(&quot;red&quot;, &quot;green&quot;);
alert(colors); //测试数据占位,测试数据占位01,red,green

alert(count); //4
count = colors.push(&quot;black&quot;);
alert(count);     //5
var item = colors.pop();
alert(item);      //&quot;black&quot;
alert(colors.length);   //4


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;队列方法&quot;&gt;队列方法&lt;/h4&gt;

&lt;p&gt;数组也可以像队列一样使用，队列的访问规则是先进先出（FIFO，First-In-First-Out）。从队列的首部移除项，尾部添加项。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; shift()&lt;/code&gt; 能够移除数组中的第一个项并返回该项，同时数组长度加1.&lt;/p&gt;

&lt;p&gt;结合之前的 &lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt; 方法，就可以像使用队列一样使用数组了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//创建数组
var colors = new Array();
//推入两项 colors 变为  red green
var count = colors.push(&quot;red&quot;, &quot;green&quot;);
alert(count); //2
//推入一项 colors 变为  red green black
count = colors.push(&quot;black&quot;);
alert(count);     //3

//取得第一项并移除 colors 变为  green black
var item = colors.shift();
alert(item); //&quot;red&quot;
alert(colors.length); //2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unshift()&lt;/code&gt;  与 ` shift()&lt;code class=&quot;highlighter-rouge&quot;&gt; 方法相反，可以在数组前面添加任意多个项并返回新数组的长度。因此 &lt;/code&gt;unshift()&lt;code class=&quot;highlighter-rouge&quot;&gt; 和 &lt;/code&gt;pop()` 方法也可以以相反的方向模拟队列。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var colors = new Array();
 var count = colors.unshift(&quot;red&quot;, &quot;green&quot;);
 alert(colors);//red green

 alert(count); //2
 count = colors.unshift(&quot;black&quot;,&quot;llll&quot;);
 alert(colors);//black llll red green

 alert(count);//4
 var item = colors.pop();
 alert(item);//green
 alert(colors.length);//3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;重排序方法&quot;&gt;重排序方法&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reverse()&lt;/code&gt; 反转数组[1,2,3] -&amp;gt; [3,2,1]
&lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; 默认排序是按照每一项的 Unicode 编码排序的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var colors = new Array(&quot;b&quot;,&quot;c&quot;,&quot;1&quot;,&quot;3&quot;,&quot;a&quot;,&quot;z&quot;,&quot;f&quot;);
colors.sort();
alert(colors);//1,3,a,b,c,f,z



var colors = new Array(&quot;b&quot;,&quot;c&quot;,&quot;1&quot;,&quot;111&quot;,&quot;3&quot;,&quot;a&quot;,&quot;z&quot;,&quot;f&quot;);
colors.sort();
alert(colors);//1,111,3,a,b,c,f,z
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以自己写一个比较规则的函数当做参数传递给 &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
function compare(value1, value2) {
    if (Number(value1) &amp;lt; Number(value2)) {
        return -1;
    } else if (Number(value1) &amp;gt; Number(value2)) {
        return 1;
    } else {                    
        return 0; 
    }                
}

var colors = new Array(&quot;1&quot;,&quot;2&quot;,&quot;5&quot;,&quot;4&quot;,&quot;3&quot;,&quot;22&quot;,&quot;11&quot;,&quot;9&quot;);
colors.sort(compare);
alert(colors);//1,2,3,4,5,9,11,22
   
   
           
var colors = new Array(&quot;b&quot;,&quot;c&quot;,&quot;1&quot;,&quot;111&quot;,&quot;3&quot;,&quot;a&quot;,&quot;z&quot;,&quot;f&quot;);
colors.sort(compare);
//❗️❗️❗️❗️  这到底是为什么。。有点晕
alert(colors);//b,c,1,3,111,a,z,f
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; 有点坑爹啊。&lt;/p&gt;

&lt;h4 id=&quot;操作方法&quot;&gt;操作方法&lt;/h4&gt;
&lt;h5 id=&quot;concat&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;concat()&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;concat()&lt;/code&gt; 可以根据单签数组中的所有项创建一个新的数组。这个方法会先创建一个当前数组的副本，然后将他接收的参数添加到这个副本的末尾，组合返回新构建的数组。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];
var colors2 = colors.concat(&quot;yellow&quot;, [&quot;black&quot;, &quot;brown&quot;]);
alert(colors);     //red,green,blue
alert(colors2);    //red,green,blue,yellow,black,brown
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;slice&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slice()&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;slice()&lt;/code&gt; 方法可以根据当前数组的一项或者多项创建一个新数组。可以接受一个或者两个参数（返回项的起始和结束位置）。如果只有一个参数，则该方法返回从改参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之前的项，但不包括结束位置的项。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;];
var colors2 = colors.slice(1);
var colors3 = colors.slice(1,4);
alert(colors2);   //green,blue,yellow,purple
alert(colors3);   //green,blue,yellow
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;splice&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;splice()&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;splice()&lt;/code&gt; 方法是数组中很强大的方法，有多中用法，主要的用法有3种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;删除 可以删除任意数量的项，只需要指定两个参数：要删除的第一项的位置和要删除的项数。例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;splice(0,2)&lt;/code&gt; 会删除数组的前两项。&lt;/li&gt;
  &lt;li&gt;插入 可以向指定位置插入任意数量的项，需要提供3个参数：起始位置、0（要删除的项个数）和要插入的项。如果需要插入多个项，可以再传入第4、5.以及任意多个项。例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;splice(2,0,&quot;red&quot;,&quot;green&quot;)&lt;/code&gt; 会从当前数组的位置2开始插入 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;red&quot;&lt;/code&gt; 和  &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;green&quot;&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;替换 可以向指定位置插入任意数量的项，切同时删除任意数量的项。需要提供3个参数：起始位置、要删除的项个数 和 要插入的项，插入的项数不必与删除的项数相同。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;splice()&lt;/code&gt; 方法始终会返回一个数组，该数组包含从原始数组中删除的项，如果没有删除返回一个空数组。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//删除
var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];
var removed = colors.splice(0,1);
alert(colors); // green,blue
alert(removed); // red 

//插入
removed = colors.splice(1, 0, &quot;yellow&quot;, &quot;orange&quot;);
alert(colors); // green,yellow,orange,blue
alert(removed); //返回一个空的数组

//替换
removed = colors.splice(1, 1, &quot;red&quot;, &quot;purple&quot;);
alert(colors); // green,red,purple,orange,blue
alert(removed); // yellow 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;位置方法&quot;&gt;位置方法&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;indexOf()&lt;/code&gt; 方法是从数组的开始位置向后查找
&lt;code class=&quot;highlighter-rouge&quot;&gt;lastIndexOf()&lt;/code&gt; 方法是从数组的末尾位置向前查找。
这两个方法都接收两个参数：要查找的项和 表示查找起点位置的索引（可选）。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var numbers = [1,2,3,4,5,4,3,2,1];

alert(numbers.indexOf(4));        //3
alert(numbers.indexOf(4, 4));     //5

alert(numbers.lastIndexOf(4)); //5
alert(numbers.lastIndexOf(4, 4)); //3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;迭代方法&quot;&gt;迭代方法&lt;/h4&gt;
&lt;p&gt;JavaScript 提供了5个迭代方法。每个方法都接收两个参数：&lt;strong&gt;要在每一项上运行的函数&lt;/strong&gt; 和 &lt;strong&gt;运行该函数的作用域对象&lt;/strong&gt;（可选，影响 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; 的值）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;every() 对数组中每一项都运行特定函数，如果改函数每一项都返回 true，则返回true。&lt;/li&gt;
  &lt;li&gt;some() 对数组中每一项都运行特定函数，如果改函数有任意一项返回 true，则返回true。&lt;/li&gt;
  &lt;li&gt;forEach() 对数组的每一项运行特定函数。没有返回值。&lt;/li&gt;
  &lt;li&gt;filter() 对数组的每一项运行特定函数。返回该函数会返回 true 的选项组成的数组。&lt;/li&gt;
  &lt;li&gt;map() 对数组的每一项运行特定函数。返回每次函数调用的结果组成的数组。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;var numbers = [1,2,3,4,5,4,3,2,1];
var everyResult = numbers.every(function(item, index, array){
    return (item &amp;gt; 2);
});
alert(everyResult); //false


var someResult = numbers.some(function(item, index, array){
    return (item &amp;gt; 2);
});
alert(someResult); //true



var filterResult = numbers.filter(function(item, index, array){
    return (item &amp;gt; 2);
});
alert(filterResult); //[3,4,5,4,3]



var mapResult = numbers.map(function(item, index, array){
    return item * 2;
});
alert(mapResult);  //[2,4,6,8,10,8,6,4,2]


numbers.forEach(function(item, index, array){
    //对每一项进行处理 for 循环
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;归并方法&quot;&gt;归并方法&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 提供了两个归并数组的方法 &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;reduceRight()&lt;/code&gt;。都会迭代数组中的所有项区别是，&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; 是从数组的第一项开始，&lt;code class=&quot;highlighter-rouge&quot;&gt;reduceRight()&lt;/code&gt; 是从数组的最后一项开始。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var values = [1,2,3,4,5];
var sum = values.reduce(function(prev, cur, index, array){
    return prev + cur;
});


第1次执行 prev 是1，cur 是2.
第2次执行 prev 是3，cur 是3.
第3次执行 prev 是6，cur 是4.
...
最后的结果

alert(sum); //15



var sum = values.reduceRight(function(prev, cur, index, array){
    return prev + cur;
});
第1次执行 prev 是5，cur 是4.
第2次执行 prev 是9，cur 是3.
第3次执行 prev 是12，cur 是2.
...
最后的结果

alert(sum);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;date-类型&quot;&gt;Date 类型&lt;/h3&gt;
&lt;p&gt;创建一个日期对象：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var now = new Date();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;调用 Date 构造函数而不传递参数的情况下，新创建的对象自动获取当前日期和时间。&lt;/p&gt;

&lt;p&gt;代码来说明一切：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 2005 年 5月 5日 下午 5点55分55秒
//这里5月是因为月份是基于0 为其实月份，即：0 表示一月。
var allFives = new Date(Date.UTC(2005, 4, 5, 17, 55, 55));

//计算执行时间
var start = Date.now();
doSomething();
var stop = Date.now(),
    result = stop   start;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;regexp-类型&quot;&gt;RegExp 类型&lt;/h3&gt;
&lt;p&gt;JavaScript 通过 RegExp 来支持正则表达式。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var expression = / pattern / flags ;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;pattern 代表正则表达式。
flags 代表正则表达式flags .&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;g 全局（global）模式，匹配所有。&lt;/li&gt;
  &lt;li&gt;i case-insensitive，不区分大小写。&lt;/li&gt;
  &lt;li&gt;m 表示多行（multiline）模式。在达到一行文本的末尾是还会继续查找下一行中是否存在与模式匹配的项。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//匹配所有的 “at”
var pattern1 = /at/g;

//匹配第一个 bat 或者 cat，不区分大小写
var pattern2 = /[bc]at/i;

//匹配所有以 at 结尾的3个字符的集合，不区分大小写
var pattern3 = /.at/gi;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在 JavaScript 使用正则表达式下列字符需要使用转义字符
&lt;code class=&quot;highlighter-rouge&quot;&gt;( [ { \ ^ $ | ) ? * + .]}&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//匹配第一个 “bat” 或者 “cat” 不区分大小写
var pattern1 = /[bc]at/i;

//匹配第一个&quot;[bc]at&quot; ，不区分大小写
var pattern2 = /\[bc\]at/i;

//匹配所有以 at 结尾的3个字符的集合，不区分大小写
var pattern3 = /.at/gi;

//匹配所有 “.at”，不区分大小写
var pattern4 var pattern4 = /\.at/gi;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;待续。。。。看到头晕 5.4&lt;/p&gt;

&lt;h3 id=&quot;function-类型&quot;&gt;Function 类型&lt;/h3&gt;
&lt;p&gt;函数也是对象，函数名 实际上就是指向函数对象的指针，不会与某个函数绑定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function sum (num1, num2) {
    return num1 + num2;
}
var sum = function(num1, num2){
    return num1 + num2;
};

alert(sum(10,10));        //20

var anotherSum = sum;
alert(anotherSum(10,10)); //20

sum = null;
alert(anotherSum(10,10)); //20
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;没有重载&quot;&gt;没有重载&lt;/h4&gt;
&lt;p&gt;将函数名称想象为指针，就很好理解了为什么 JavaScript 中没有函数重载的概念了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function addSomeNumber(num){
    return num + 100;
}
function addSomeNumber(num) {
    return num + 200;
}

var result = addSomeNumber(100); //300

var addSomeNumber = function (num){
    return num + 100;
};

addSomeNumber = function (num) { 
    return num + 200;
};
var result = addSomeNumber(100); //300
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;函数声明-和-函数表达式&quot;&gt;函数声明 和 函数表达式&lt;/h4&gt;
&lt;p&gt;解析器在向执行环境中加载数据时，对函数声明和函数表达式不是相同的处理，解析器会先读取函数声明，并使其在执行任何代码之前可用（可用访问），至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正的被解释执行。下面的代码完全可以正确的执行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert(sum(10,10));
function sum(num1, num2){
    return num1 + num2;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这是因为在代码执行之前，解析器就已经通过一个名为 函数声明提升（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。读取并将函数声明添加到执行环境中。对代码求值时， JavaScript 引擎 在第一遍会声明函数并将它们放到代码树的顶部。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert(sum(10,10));
var sum = function(num1, num2){
    return num1 + num2;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面代码会在运行期产生错误，原因是函数位于一个初始化语句中，而不是一个函数声明中。&lt;/p&gt;

&lt;h4 id=&quot;作为值的函数&quot;&gt;作为值的函数&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中 函数名本身就是变量，所以函数可以当做值来传递，还可以当做另一个函数的结果返回。&lt;/p&gt;
&lt;h4 id=&quot;函数的内部属性&quot;&gt;函数的内部属性&lt;/h4&gt;
&lt;p&gt;在函数内部有两个特殊的对象：&lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; 。&lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; 主要是用来保存函数的参数，这个对象还有一个名叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;callee&lt;/code&gt; 的属性，这个属性是一个指针，指向拥有 &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; 的函数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
function factorial(num){
        if (num &amp;lt;=1) {
            return 1;
        } else {
            return num * factorial(num-1)
        }
}

function factorial(num){
    if (num &amp;lt;=1) {
        return 1;
    } else {
        return num * arguments.callee(num-1)
} }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;函数内部还有一个特殊对象是 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;引用的是函数的执行环境对象。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.color = &quot;red&quot;;
var o = { color: &quot;blue&quot; };
function sayColor(){
    alert(this.color);
}
sayColor();     //&quot;red&quot;
o.sayColor = sayColor;
o.sayColor();   //&quot;blue&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;函数的属性和方法&quot;&gt;函数的属性和方法&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; 表示函数希望接收的命名参数的个数。
&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt; 保存了对象的所有实例方法。但是不能枚举。&lt;/p&gt;

&lt;p&gt;每个函数还包括两个非继承来的方法： &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;call()&lt;/code&gt;，这两个方法的用途是在给特定的作用域调用函数，实际上等于设置函数体内 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; 对象的值。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; 接收两个参数：一个是在其中运行函数的作用域，另一方是参数数组。其中第二个参数可以是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; 的实例，也可以是 &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; 对象。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function sum(num1, num2){
    return num1 + num2;
}

function callSum1(num1, num2){
    return sum.apply(this, arguments);//传入 arguments 对象
}

function callSum2(num1, num2){
    return sum.apply(this, [num1, num2]); //传入数组
}

alert(callSum1(10,10));   //20
alert(callSum2(10,10));   //20
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call()&lt;/code&gt; 函数必须明确的传入每一个参数。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;call()&lt;/code&gt; 真正强大是地方是能够扩充函数赖以运行的作用域。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.color = &quot;red&quot;;
var o = { color: &quot;blue&quot; };
function sayColor(){
    alert(this.color);
}
sayColor(); //red

sayColor.call(this); //red
sayColor.call(window); //red
sayColor.call(o); //blue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;apply()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;call()&lt;/code&gt; 扩充作用域的好处是对象不需要与方法有任何的耦合关系。&lt;/p&gt;

&lt;p&gt;JavaScript 5 中 定义了 &lt;code class=&quot;highlighter-rouge&quot;&gt;bind()&lt;/code&gt;，这个方法会创建一个函数的实例，其 this 值会被绑定到传给 &lt;code class=&quot;highlighter-rouge&quot;&gt;bind()&lt;/code&gt; 函数的值。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.color = &quot;red&quot;;
var o = { color: &quot;blue&quot; };

function sayColor(){
    alert(this.color);
}

var objectSayColor = sayColor.bind(o);
objectSayColor();    //blue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;基本包装类型&quot;&gt;基本包装类型&lt;/h4&gt;
&lt;p&gt;为了方便操作基本类型值，JavaScript 提供了3个特殊的引用类型： &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var s1 = &quot;some text&quot;;
var s2 = s1.substring(2);



&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的代码中 s1 包含一个字符串，属于基本类型值，第二行中就使用了 s1 的 substring() 方法，理论上来说，s1属于基本类型，基本类型不是对象，不应该有方法。这是因为，为了我们更直观的进行操作，后台自动帮助我们完成了处理。当第二行代码访问s1时，访问过程处于一种读取模式，也就是要从内存中读取这个字符串的值。而在读取模式中访问字符串时，后台会自动完成下列操作：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建一个 String 类型的实例；&lt;/li&gt;
  &lt;li&gt;在实例上调用指定的方法；&lt;/li&gt;
  &lt;li&gt;销毁这个实例。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体的代码可以想象成下面的代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var s1 = new String(&quot;some text&quot;);
var s2 = s1.substring(2);
s1 = null;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;引用类型和基本包装类型的主要区别就是对象的生存周期。使用 new 操作符创建的引用类型的实例，在执行流离开当前作用域之前一直都保存在内存中的，而自动创建的基本包装类型的对象，则只存在于一行代码的瞬间，然后立即被销毁。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var s1 = &quot;some text&quot;;
s1.color = &quot;red&quot;;
alert(s1.color);   //undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;String 方法 待续 编辑器已经卡的不行了&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;对象在 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中被称为引用类型的值，而且有一些内置的引用类型可以用来创建特定的对象。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;引用类型已传统的面向对象程序设计中的类相似，但实现不同；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; 是一个基础类型，其他所用类型都从 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; 继承了基本的行为；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; 类型是一组值的有序列表，同时还提供了操作和转换这些值的功能；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; 类型提供了有关日期和时间的信息，包括当前日期和时间以及相关的计算功能；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RegExp&lt;/code&gt; 类型是 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 支持正则表达式的一个借口，提供最基本的和一些高级的正则表达式功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;函数是 &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt; 类型的实例，因此函数也是对象。所以函数也拥有方法。
因为有了基本包装类型，所以 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中的基本类型可以被当做对象来访问。三种基本 包装类型分别是：&lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt; 、&lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;。以下是它们的共同特征：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每个包装类型都映射到同名的基本类型；&lt;/li&gt;
  &lt;li&gt;在读取模式下访问基本类型值时，就会创建对应的基本包装类型的一个对象，从而方便了数据操作；&lt;/li&gt;
  &lt;li&gt;操作基本类型值的语句一经执行完毕，就会立即销毁创建的包装对象。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 12 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/12/Javascrpt%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1(%E7%AC%AC3%E7%89%88)%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B003/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/12/Javascrpt%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1(%E7%AC%AC3%E7%89%88)%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B003/</guid>
        
        <category>Javascrpt</category>
        
        
      </item>
    
      <item>
        <title>Javascrpt高级程序设计(第3版)读书笔记02</title>
        <description>&lt;h1 id=&quot;javascrpt高级程序设计第3版读书笔记02&quot;&gt;Javascrpt高级程序设计(第3版)读书笔记02&lt;/h1&gt;

&lt;h2 id=&quot;变量作用域和内存问题&quot;&gt;变量、作用域和内存问题&lt;/h2&gt;
&lt;h3 id=&quot;基本类型和引用类型的值&quot;&gt;基本类型和引用类型的值&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 存在两种不同的数据类型的值：&lt;code class=&quot;highlighter-rouge&quot;&gt;基本类型值&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;引用类型值&lt;/code&gt;。
&lt;code class=&quot;highlighter-rouge&quot;&gt;基本类型值&lt;/code&gt; 指的是简单的数据段，为 &lt;code class=&quot;highlighter-rouge&quot;&gt;引用类型值&lt;/code&gt; 指那些可能由多个值构成的对象。
引用类型的值是保存在内存中的对象，&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 不允许直接访问内存中的位置，也就是不能直接操作对象的内存空间。操作对象时，实际是操作对象的引用而不是实际对象。（这种说法并不严格，当复制保存对象的某个变量时，操作的是对象的引用，但在为对象添加属性时，操作的是实际的对象。）&lt;/p&gt;
&lt;h4 id=&quot;动态的属性&quot;&gt;动态的属性&lt;/h4&gt;
&lt;p&gt;可以在 引用类型 创建后，对他添加属性和方法。&lt;/p&gt;
&lt;h4 id=&quot;复制变量值&quot;&gt;复制变量值&lt;/h4&gt;
&lt;p&gt;基本数据类型的复制是直接复制了一份值，引用数据类型，是复制了引用对象的指针，而不是引用对象本身。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var obj1 = new Object();
    var obj2 = obj1;
    obj1.name = &quot;Nicholas&quot;;
    alert(obj2.name);  //&quot;Nicholas&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;传递参数&quot;&gt;传递参数&lt;/h4&gt;
&lt;p&gt;JavaScript 中的参数都是按照值传递的。&lt;/p&gt;

&lt;h4 id=&quot;检查类型&quot;&gt;检查类型&lt;/h4&gt;
&lt;p&gt;要检查一个变量是不是基本的数据类型，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt; 是最佳的工具。而通常我们需要的是知道这个对象是什么类型的对象，这个时间，就需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; 操作符。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;result = variable instanceof constructor

alert(person instanceof Object); //变量 person 是 Object 吗？
alert(colors instanceof Array); //变量 colors 是 Array 吗？
alert(pattern instanceof RegExp); //变量 pattern 是 RegExp 吗？

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;执行环境及作用域&quot;&gt;执行环境及作用域&lt;/h2&gt;

&lt;p&gt;在一个页面中，第一次载入JS代码时创建一个全局执行环境，全局执行环境是最外围的执行环境，在Web浏览器中，全局执行环境被认为是window对象。因此，所有的全局变量和函数都是作为window对象的属性和方法创建的。
每进入一个执行环境，都会建立一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;变量对象（Variable Object）&lt;/code&gt;，环境中定义的变量和函数都保存在这个对象中。虽然我们编写的代码无法直接访问它，但是解析器在处理数据时在后台使用它。
每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中，当函数执行完毕，栈将环境弹出，把控制权返还给之前的执行环境。
当代码在一个执行环境中执行时，会创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;变量对象(Variable Object)&lt;/code&gt; 的一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;作用域链(Scope Chain)&lt;/code&gt;,  &lt;code class=&quot;highlighter-rouge&quot;&gt;作用域链(Scope Chain)&lt;/code&gt; 的用途是保证对执行环境有权访问的所有变量和函数的有序访问。 &lt;code class=&quot;highlighter-rouge&quot;&gt;作用域链(Scope Chain)&lt;/code&gt; 的顶端始终是当前执行代码所在环境的&lt;code class=&quot;highlighter-rouge&quot;&gt;变量对象(Variable Object)&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        var color = &quot;blue&quot;;
        function changeColor() {
            var anotherColor = &quot;red&quot;;
            function swapColors() {
                var tempColor = anotherColor;
                anotherColor = color;
                color = tempColor;
                //这里可以访问 color anotherColor和tempColor
            }
            //  这里可以访问color anotherColor，但不能访问tempColor
            swapColors();
        }
        //这里只能访问 color
        changeColor();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;如果这个环境是函数（如 swapColors()），则将其活动对象（activation object)作为变量对象。活动对象在最开始时只包含一个变量，就是函数内部的arguments对象。作用域链中的下一个Variable Object来自该函数(swapColors())的包含环境（也就是changeColor())，而再下一个Variable object来自再下一个包含环境。这样，一直延续到全局执行环境，全局执行环境的Variable Object始终是作用域链中的最后一个对象&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/ScopeChain.png&quot; alt=&quot;ScopeChain&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;全局环境有1个变量color和1个函数changecolor()。&lt;/li&gt;
  &lt;li&gt;changecolor()函数的局部环境中具有1个anothercolor属性和1个swapcolors函数，当然，changecolor函数中可以访问自身以及它外围（也就是全局环境）中的变量。&lt;/li&gt;
  &lt;li&gt;swapcolor()函数的局部环境中具有1个变量tempcolor。在该函数内部可以访问上面的2个环境（changecolor和window）中的所有变量，因为那2个环境都是它的父执行环境。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过上面的分析，我们可以得知内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。这些环境之间是线性、有次序的。每个环境都可以向上搜索作用域链，以便查询变量和函数名；但任何环境不能通过向下搜索作用域链条而进入另一个执行环境。对于上述例子的swapcolor()函数而言，其作用域链包括：swapcolor()的变量对象、changecolor（）变量对象和全局对象。swapcolor（）的局部环境开始先在自己的Variable Object中搜索变量和函数名，找不到，则向上搜索changecolor作用域链。。。。。以此类推。但是，changecolor()函数是无法访问swapcolor中的变量。&lt;/p&gt;

&lt;h3 id=&quot;延长作用域链&quot;&gt;延长作用域链&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript&lt;/code&gt; 的执行环境的类型共有两种：全局和局部（函数）。不过可以通过别的方法来延长作用域链。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;try-catch语句的catch块&lt;/li&gt;
  &lt;li&gt;with语句&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于catch语句来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。在IE8及之前的javascript实现中，存在一个与标准不一样的地方，即在catch语句中捕获的错误对象会被添加到执行环境的变量对象，而不是catch语句的变量对象中。换句话说，即使是在catch块的外部也可以访问到错误对象。IE9中修复了这个问题。也就是说，在IE9以后的版本中，只能在catch的内部访问到错误对象。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;person={name:&quot;yhb&quot;,age:22,height:175,wife:{name:&quot;lwy&quot;,age:21}};  
with(person.wife){  
    console.log(name);  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;with语句将person.wife添加到当前作用域链的头部，所以输出的就是：“lwy”.
with语句主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。&lt;/p&gt;

&lt;h3 id=&quot;没有块级作用域&quot;&gt;没有块级作用域&lt;/h3&gt;
&lt;p&gt;在其他语言中，由 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; 包含的代码块有自己的作用域，但是 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 不支持块级作用域。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (true) {
    // color 会被加入离它最近的执行环境中。
     var color = &quot;blue&quot;;
}
alert(color);    //&quot;blue&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;声明变量&quot;&gt;声明变量&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function add(num1, num2) {
    var sum = num1 + num2;
    return sum; 
}
var result = add(10, 20); //30
alert(sum); //由于sum 不是有效的变量，因此会导致错误。


function add(num1, num2) {
    //如果不添加 var 关键字，sum 会被添加到全局环境中。
    sum = num1 + num2;
    return sum; 
}
var result = add(10, 20); //30 
alert(sum); //30 
        
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;查找标识符&quot;&gt;查找标识符&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var scope=&quot;global&quot;;  
function t(){  
    console.log(scope);  //输出undefined
    var scope=&quot;local&quot;  
    console.log(scope); //输出  local
}  
t(); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第一句输出的是： “undefined”，而不是 “global”
第二讲输出的是：”local”
  你可能会认为第一句会输出：”global”,因为代码还没执行var scope=”local”,所以肯定会输出“global”。
  我说这想法完全没错，只不过用错了对象。我们首先要区分&lt;code class=&quot;highlighter-rouge&quot;&gt;Javascript&lt;/code&gt;的函数作用域与我们熟知的C/C++等的块级作用域。
  在C/C++中，花括号内中的每一段代码都具有各自的作用域，而且变量在声明它们的代码段之外是不可见的。而&lt;code class=&quot;highlighter-rouge&quot;&gt;Javascript&lt;/code&gt;压根没有块级作用域，而是函数作用域.
所谓函数作用域就是说：-》变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。
所以根据函数作用域的意思，可以将上述代码重写如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var scope=&quot;global&quot;;  
function t(){  
    var scope;  
    console.log(scope);  
    scope=&quot;local&quot;  
    console.log(scope);  
}  
t(); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;垃圾搜集&quot;&gt;垃圾搜集&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 具有自动垃圾收集机制，采用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;标记清除(mark-and-sweep)&lt;/code&gt;,当变量进入环境，就将标量标记为 “进入环境”，理论上来说，只要被标记为 “进入环境” 就不会释放变量占用的内存，而当变量离开环境是，将其标记为 “离开环境”。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 变量可以用来保存两种类型的值：基本类型和引用类型。&lt;/li&gt;
  &lt;li&gt;基本类型在内存中占用固定大小，因此被保存在栈内存中。&lt;/li&gt;
  &lt;li&gt;从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本。&lt;/li&gt;
  &lt;li&gt;引用类型的值是对象，保存在堆内存中。&lt;/li&gt;
  &lt;li&gt;包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针。&lt;/li&gt;
  &lt;li&gt;从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同一个对象。&lt;/li&gt;
  &lt;li&gt;确定一个值是那种基本的类型可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt; 操作符，而确定一个值是哪种引用类型可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; 操作符。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有的变量都存在于一个执行环境（也就是作用域）当中，这个执行环境决定了变量的声明周期，以及哪部分代码可以访问其中的变量。以下是关于执行环境总结：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;执行环境有全局执行环境和函数执行环境。&lt;/li&gt;
  &lt;li&gt;每一次进入一个新的执行环境，都会创建一个用于搜索变量和函数的作用域链。&lt;/li&gt;
  &lt;li&gt;函数的局部环境不仅有权访问函数作用域的变量，而且有权访问其包含环境（父环境），乃至全局环境。&lt;/li&gt;
  &lt;li&gt;全局环境只能访问全局环境中定义的变量和函数，不能直接访问局部环境的任何数据。&lt;/li&gt;
  &lt;li&gt;变量的执行环境有助于确定应该何时释放内存。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 是一门自动回收垃圾的语言，开发人员不用关心内存分配和回收的问题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;离开作用域的值将被自动标记为可以回收，因此 将在垃圾回收期间被删除。&lt;/li&gt;
  &lt;li&gt;”标记清除“是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然后在回收其内存。&lt;/li&gt;
  &lt;li&gt;另一种垃圾收集算法是”引用计数“，这种算法的思想是跟踪记录所有值被引用的次数。 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 引擎目前都不再使用这种算法，但在IE 中访问非原生的 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 对象（如 &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt; 元素）时，这种算法仍然可能导致问题。&lt;/li&gt;
  &lt;li&gt;但代码中出现循环引用时的，”引用计数”的算法就会导致问题。&lt;/li&gt;
  &lt;li&gt;解除变量的引用不仅有助于消除循环引用的现象，而且对垃圾回收也有好处。为了确保有效的回收内存，应该及时的解除不在使用的全局变量、全局对象属性已经循环引用变量的引用。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 11 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/11/Javascrpt%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1(%E7%AC%AC3%E7%89%88)%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B002/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/11/Javascrpt%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1(%E7%AC%AC3%E7%89%88)%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B002/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>Javascrpt高级程序设计(第3版)读书笔记01</title>
        <description>&lt;h1 id=&quot;javascrpt高级程序设计第3版读书笔记01&quot;&gt;Javascrpt高级程序设计(第3版)读书笔记01&lt;/h1&gt;

&lt;h3 id=&quot;script-元素&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 元素&lt;/h3&gt;
&lt;p&gt;向 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; 页面加入 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 的主要方法，就是使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 。
包括6个属性：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; 可选。表示立即下载脚本，但不妨碍页面的其他操作，比如下载其他资源或者脚本。只对外部脚本文件有效。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;charset&lt;/code&gt; 可选。 表示通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; 属性指定的代码的字符集。由于大多数浏览器会忽略它的值，因此这个属性很少有人用。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; 可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本有效。IE7 级更早的版本对嵌入脚本也支持这个属性。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;language&lt;/code&gt; 已废弃。用来表示编写代码使用的脚本语言。（如JavaScript、VBScript）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; 可选。表示包含要执行代码的外部文件。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; 可选。可以看成是 language 的替代属性。 表示编写代码使用脚本语言的类型（也称为MIME类型）。虽然 &lt;code class=&quot;highlighter-rouge&quot;&gt;text/javascript&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;text/ecmascript&lt;/code&gt; 都已经不被推荐使用,但人们一直以来使用个还是 &lt;code class=&quot;highlighter-rouge&quot;&gt;text/javascript&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 的方式有两种在：直接在页面中嵌入 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 代码和包含外部 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 文件。&lt;/p&gt;

&lt;p&gt;包含在 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 内部的 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 的代码会被从上到下依次解释。浏览器会先解析完不使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; 的属性的 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 元素中的代码，然后再解析后面的内容，所以一般应该把 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 元素放在页面最后，即主要内容后面，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;标签前面。
带有 &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; 属性的 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 标签会忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 标签之间包含的 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 代码。&lt;/p&gt;

&lt;h4 id=&quot;应当尽量使用外部文件&quot;&gt;应当尽量使用外部文件&lt;/h4&gt;
&lt;p&gt;虽然直接在 &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 元素 中直接嵌入 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 代码没什么问题，但是一般认为最好的做法还是尽可能的使用外部文件来包含 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 代码，好处包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可维护性 避免 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; 页面过于臃肿，同时把 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 文件放在一个文件夹下面，利于维护。&lt;/li&gt;
  &lt;li&gt;可缓存 浏览器能够根据具体的设置 缓存链接的所有外部 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 文件。也就是如果两个页面使用同一个文件，就无需再次下载。加快了页面的加载速度。&lt;/li&gt;
  &lt;li&gt;适应未来 通过外部文件来包含 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 无需使用 XHTML 或注释hack。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;noscript-元素&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;noscript&lt;/code&gt; 元素&lt;/h3&gt;
&lt;p&gt;兼容早期不支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 的浏览器，这个元素可以包含能够出现在 &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; 的任何 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; 元素 （&lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 除外），包含在 &lt;code class=&quot;highlighter-rouge&quot;&gt;noscript&lt;/code&gt; 元素的内容会在下面两张情况显示：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;浏览器不支持脚本；&lt;/li&gt;
  &lt;li&gt;浏览器支持脚本，但是脚本被禁止。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;基本概念&quot;&gt;基本概念&lt;/h3&gt;
&lt;h4 id=&quot;语法&quot;&gt;语法&lt;/h4&gt;
&lt;h5 id=&quot;区分大小写&quot;&gt;区分大小写&lt;/h5&gt;
&lt;p&gt;变量、函数名、操作符、语言中的一切，都区分大小写。&lt;/p&gt;
&lt;h5 id=&quot;标识符&quot;&gt;标识符&lt;/h5&gt;
&lt;p&gt;标识符指的是变量、函数、属性的名字，或者函数的参数。有以下规则：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;第一个字符必须是一个字母、下划线（_）或者一个美元符号（$）；&lt;/li&gt;
  &lt;li&gt;其他字符可以是字母、下划线、美元符号或者数字；&lt;/li&gt;
  &lt;li&gt;惯例是采用驼峰命名法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;注释&quot;&gt;注释&lt;/h5&gt;
&lt;p&gt;// 单行注释
/* */ 多行注释&lt;/p&gt;

&lt;h5 id=&quot;严格模式&quot;&gt;严格模式&lt;/h5&gt;
&lt;p&gt;目前来说就是对一些不确定的行为进行处理、对某些不安全的操作抛出错误。 还不是很理解。启用的话 需要在函数体前面加入 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;use strict&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&quot;语句&quot;&gt;语句&lt;/h5&gt;
&lt;p&gt;语句已一个分号结尾，如果没有分号，由编译器决定什么时间结尾。&lt;/p&gt;

&lt;h5 id=&quot;变量&quot;&gt;变量&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中的变量是松散类型，就是可以用来保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符。未初始化的变量，会保存一个特殊值 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;。变量在初始化后，可以改变变量的类型，虽然并不推荐，但是这样做是可以的。&lt;/p&gt;

&lt;h4 id=&quot;数据类型&quot;&gt;数据类型&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中包括5种简单的数据类型 &lt;code class=&quot;highlighter-rouge&quot;&gt;Undefined&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Null&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;。简单数据类型值无法被改变，每次赋值的时候，都是赋值一份新的值。还有一种复杂的数据类型 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; 本质是有一组无序的键值对组成的。&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 不支持任何创建自定义类型的机制，所有值的最终都将是上述6种数据类型之一。好像只有6种数据类型不能表示所有的数据，但是，由于 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 数据类型具有动态性，因此的确没有再定义其他数据类型的必要了。&lt;/p&gt;

&lt;h5 id=&quot;typeof-操作符&quot;&gt;typeof 操作符&lt;/h5&gt;
&lt;p&gt;typeof 是一个一元运算，放在一个运算数之前，运算数可以是任意类型。
它返回值是一个字符串，该字符串说明运算数的类型。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对于数字类型的操作数而言， typeof 返回的值是 number。&lt;/li&gt;
  &lt;li&gt;对于字符串类型， typeof 返回的值是 string。&lt;/li&gt;
  &lt;li&gt;对于布尔类型， typeof 返回的值是 boolean 。&lt;/li&gt;
  &lt;li&gt;对于对象、数组、null 返回的值是 object 。&lt;/li&gt;
  &lt;li&gt;对于函数类型，返回的值是 function。&lt;/li&gt;
  &lt;li&gt;如果运算数是没有定义的（比如说不存在的变量、函数或者undefined），将返回undefined。&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;undefined-类型&quot;&gt;Undefined 类型&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Undefined&lt;/code&gt; 类型只有一个值，即特殊的 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;， 一个没有被赋值的变量会有个默认值 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;。&lt;/p&gt;

&lt;h5 id=&quot;null-类型&quot;&gt;Null 类型&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Null&lt;/code&gt; 是第二个只有一个值的数据类型，这个特殊的值是 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;。从逻辑角度来看， &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 值表示一个空对象的指针，而这也正是使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt; 操作符检查 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 值时会返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; 的原因。
如果一个变量准备保存对象，那么最好将该变量初始化为 null 而不是其他值。这样一来只需要检查 null 值就可以判断变量是否已经保存了一个对象的引用。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (car != null){
    //   car         
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;undefined 值是派生自 null。因此比较 null 和 undefined 是返回值是 true。&lt;/p&gt;
&lt;h5 id=&quot;boolean-类型&quot;&gt;Boolean 类型&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt; 类型 只有两个字面值： &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;。&lt;/p&gt;

&lt;h5 id=&quot;number-类型&quot;&gt;Number 类型&lt;/h5&gt;
&lt;h6 id=&quot;浮点数值&quot;&gt;浮点数值&lt;/h6&gt;
&lt;p&gt;浮点数值，就是数值中必须包含一个小数点，且小数点后面必须至少有以为数字。如果浮点数本身表示是一个整数（如1.0或者1.），会被转换为整数（1）。
对于那些极大或者极小的数，可以使用科学计数法表示：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;3.125e7 表示31250000  计算方法为：3.125 * 10^7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;数值范围&quot;&gt;数值范围&lt;/h6&gt;
&lt;p&gt;Number.MIN_VALUE 表示最小数，一般为 5e-324，Number.MAX_VALUE 表示最大数,一般为1.7976931348623157e+308。如果超出这个范围，会被转换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Infinity&lt;/code&gt;，将无法再参与计算。判断一个数值是个超出范围，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;isFinite()&lt;/code&gt; 函数。&lt;/p&gt;

&lt;h6 id=&quot;nan&quot;&gt;NaN&lt;/h6&gt;

&lt;p&gt;NaN,非数值的一个特殊的数值。这个数值用来表示本来要返回数值的操作数未返回数值的情况（这样做的好处是不会抛出错误）。
NaN 本身有两个特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;任何涉及 NaN 的操作，都会返回 NaN，&lt;/li&gt;
  &lt;li&gt;NaN 与任何值都不等，包括 NaN本身。判断是否是 NaN 需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;isNaN()&lt;/code&gt; 函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;数值转换&quot;&gt;数值转换&lt;/h6&gt;

&lt;p&gt;有3个函数可以把非数值转换为数值：&lt;code class=&quot;highlighter-rouge&quot;&gt;Number() parseInt()  parseFloat()&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Number()&lt;/code&gt; 转换有如下规则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果是 Boolean 值，true 和 false 分别转换为 1 和 0；&lt;/li&gt;
  &lt;li&gt;如果是数字值，只是简单的传入传出；&lt;/li&gt;
  &lt;li&gt;如果是 null，返回 0；&lt;/li&gt;
  &lt;li&gt;如果是 undefined ，返回 NaN；&lt;/li&gt;
  &lt;li&gt;如果是字符串，有以下规则：
    &lt;ol&gt;
      &lt;li&gt;如果字符串只包含数字，转换为十进制的数值。（”1” -&amp;gt; 1,”011”-&amp;gt; 11）&lt;/li&gt;
      &lt;li&gt;如果字符串中包含有效的浮点格式，转换为对应的浮点数值。&lt;/li&gt;
      &lt;li&gt;如果对象包含有效的十六进制格式，转换为相同大小的十进制整数值。(“1.1” -&amp;gt; 1.1)&lt;/li&gt;
      &lt;li&gt;如果字符串是空的（不包含任何字符），转为 0；(“”-&amp;gt;0)&lt;/li&gt;
      &lt;li&gt;如果字符串中包含上述格式之外的字符，转换为 NaN。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;如果是对象，调用对象的 valueOf()，然后依据前面的规则转换返回值。如果转换的结果是NaN，调用对象的 toString()方法，然后在依次调用前面的规则转换返回的字符串值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parseInt()&lt;/code&gt; 函数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;忽略字符串前面的空格，直到找到第一非空格的字符。&lt;/li&gt;
  &lt;li&gt;如果第一个字符不是数字或者负号，返回NaN；&lt;/li&gt;
  &lt;li&gt;空字符串返回NaN&lt;/li&gt;
  &lt;li&gt;如果第一个字符就是数字，继续解析下面的字符，直到完全解析完或者遇到了非数字字符。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;p&gt;``` parseInt(“1234blue”); //1234
parseInt(“”); //NaN
parseInt(“0xA”); //10 (16进制)
parseInt(22.5); //22
parseInt(“070”) //56(8进制)
parseInt(“70”); //70
parseInt(“0xf”); //15(16进制)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

`parseFloat()` 函数：


```parseFloat(&quot;1234blue&quot;); //1234
parseFloat(&quot;0xA&quot;); //0
parseFloat(&quot;22.5&quot;); //22.5
parseFloat(&quot;22.34.5&quot;); //22.34
parseFloat(&quot;0908.5&quot;); 908.5
parseFloat(&quot;3.125e7&quot;); //31250000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;string-类型&quot;&gt;String 类型&lt;/h5&gt;

&lt;p&gt;可以使用单引号和双引号来表示字符串，”hello” 和 ‘hello’都是正确的，但是不能使用一个单引号和一个双引号。&lt;/p&gt;

&lt;h6 id=&quot;字符字面量&quot;&gt;字符字面量&lt;/h6&gt;
&lt;p&gt;String 数据类型包含一些特殊的字符字面量，也就转义序列，用于表示非打印字符，或者具有其他用途的字符。&lt;/p&gt;

&lt;p&gt;```\n 换行
\t 制表
\b 空格
\r 回车
\f 换页 
\ 斜杠
' 单引号
&quot; 双引号
\xnn 16进制 n 为 （0 -F）例： \x41 表示为 A
\unnn 以16进制代码 nnnn 表示的 Unicode 字符，其中n 为 0 - F ，例如\u03a3 表示希腊字符Σ。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;###### 字符串的特点
字符串的值类型，是不可变的。要改变某个变量保存的值，必须先销毁原来的字符串，然后创建新的字符串填充给变量。
###### 转换为字符串
要把一个值转换为字符串有两种方法：

* 第一种是几乎每个值都有的 `toString()` 方法。
* 在不知道要转换的值是不是 `null` 或 `undefined` 的情况下，还可以使用 `String()` ，这个函数可以将任何类型转换为字符串。`String()` 函数遵循以下规则：
    1. 如果值有 `toString()` 方法，使用 `toString()` 方法并返回响应结果；
    2. 如果值是 `null` ，则返回 &quot;null&quot;;
    3. 如果值是 `undefined` ，则返回 &quot;undefined&quot;



例子：

```JavaScript
var age = 11;
var ageAsString = age.toString(); //    &quot;11&quot; var found = true;
var foundAsString = found.toString(); //    &quot;true&quot;


var num = 10;
alert(num.toString());// &quot;10&quot;
alert(num.toString(2));// &quot;1010&quot;
alert(num.toString(8));// &quot;12&quot;
alert(num.toString(10));// &quot;10&quot;
alert(num.toString(16));// &quot;a&quot;


var value1 = 10;
var value2 = true;
var value3 = null;
var value4;
alert(String(value1));// &quot;10&quot;
alert(String(value2));// &quot;true&quot;
alert(String(value3));// &quot;null&quot;
alert(String(value4));// &quot;undefined&quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;object-类型&quot;&gt;Object 类型&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ECMAScript&lt;/code&gt; 中对象其实就是一组数据和功能的集合。对象可以通过执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 操作符后跟要创建的对象类型名称来创建。
&lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; 的每一个实例都有如下方法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; 保存着用于创建当前对象的函数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hasOwnProperty(propertyName)&lt;/code&gt; 用于检测 &lt;code class=&quot;highlighter-rouge&quot;&gt;propertyName&lt;/code&gt; 是否在当前实例的属性中。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isPrototypeOf(object)&lt;/code&gt; 用于检测传入的对象 &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; 是否是当前本对象的原型，表示指定的对象是否在本对象的原型链中。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;propertyIsEnumerable(propertyName)&lt;/code&gt; 判断指定属性是否可枚举，内部属性设置参见 ECMAScript DontEnum attribute&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toLocaleString()&lt;/code&gt; 返回对象的字符串表示，该字符串与执行环境的地区对应。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; 返回对象的字符串表示&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;valueOf()&lt;/code&gt; 返回对象的字符串、数值、布尔值表示 。通常与 &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; 方法的返回值一致。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;函数&quot;&gt;函数&lt;/h4&gt;
&lt;h5 id=&quot;理解参数&quot;&gt;理解参数&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中函数的参数与其他大多数语言不同，&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 函数不介意传递的参数有多少个，也不在乎传递过来的是什么类型。出现这样的原因是，&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中参数在内部通过数组来表示的。函数接收到的始终是一个数组，而不关心数组的个数、以及数组里面的数据类型。在函数体内部，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; 对象来访问参数数组。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function howManyArgs() {
    alert(arguments.length);
}
howManyArgs(&quot;string&quot;, 45);  //2
howManyArgs();              //0
howManyArgs(12);            //1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;没有重载&quot;&gt;没有重载&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 没有传统意义的那样实现重载。
如果在 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 定义两个名字完全相同的函数，则改名字只属于后定义的函数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function addSomeNumber(num){
    return num + 100;
}
function addSomeNumber(num) {
    return num + 200;
}
var result = addSomeNumber(100);//300
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;小结&quot;&gt;小结&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中基本的数据类型包括 &lt;code class=&quot;highlighter-rouge&quot;&gt;Undefined&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Null&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Number&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中没有区分 整数和浮点数，Number 用于表示所有数值。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 中的复杂数据类型 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; 类型，是这门语言中所有对象的基础类型。&lt;/li&gt;
  &lt;li&gt;严格模式为这门语言容易出错的地方加了限制。&lt;/li&gt;
  &lt;li&gt;无需指定函数的返回值，&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 的函数可以在任何时间返回任何值。实际上未指定返回值的函数返回的是一个特殊的 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; 值。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 也没有函数签名的概念，因为其函数参数是一个包含零个过多个值的数组形式传递的。&lt;/li&gt;
  &lt;li&gt;可以向 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 的函数传递任意数量的参数，可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt; 对象来访问参数。&lt;/li&gt;
  &lt;li&gt;由于不存在函数签名的特性，&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 函数不能重载。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/10/Javascrpt%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1(%E7%AC%AC3%E7%89%88)%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B001/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/10/Javascrpt%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1(%E7%AC%AC3%E7%89%88)%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B001/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>JavaScript学习01</title>
        <description>&lt;h1 id=&quot;javascript学习01&quot;&gt;JavaScript学习01&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;开始观看这系列文章 
  &lt;a href=&quot;https://yq.aliyun.com/articles/30980&quot;&gt;从零开始学_JavaScript_系列（一）初步概念、工具选择、简单内容输出、加载js文件&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;script-标签&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; 标签&lt;/h3&gt;
&lt;p&gt;HTML的脚本必须位于 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 之中。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;

JS脚本

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;标签&quot;&gt;标签&lt;/h3&gt;
&lt;p&gt;成对出现的&amp;lt;&amp;gt;（共2组）就是标签。
如 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;文本&amp;lt;/p&amp;gt;&lt;/code&gt; 就是一组标签。&lt;/p&gt;

&lt;p&gt;标签可以加id，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p id=&quot;abc&quot;&amp;gt;文本&amp;lt;/p&amp;gt;&lt;/code&gt; ，id用于之后寻找其使用。&lt;/p&gt;

&lt;p&gt;寻找id使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;getElementById(&quot;abc&quot;)&lt;/code&gt; 这样的办法。&lt;/p&gt;

&lt;p&gt;然后在这样的命令后面加对应的东西，如innerHTML（文本替换），value（得到值）。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p id=&quot;abc&quot;&amp;gt;abc&amp;lt;/p&amp;gt;

&amp;lt;button type=&quot;button&quot; onclick=&quot;run()&quot;&amp;gt;点击&amp;lt;/button&amp;gt;

&amp;lt;script&amp;gt;

function run()
{
document.getElementById(&quot;abc&quot;).innerHTML=&quot;ppp&quot;;

}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;像这样的代码，在执行时，用ppp文本替换abc文本。&lt;/p&gt;

&lt;p&gt;第一行是输出文字abc，然后给他一个id（用来找她）。&lt;/p&gt;

&lt;p&gt;第二行是输出一个按钮（button），按钮上面的文字是点击。&lt;/p&gt;

&lt;p&gt;第三行到最后 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 是js脚本。这个脚本里面包含了一个函数（function）；&lt;/p&gt;

&lt;p&gt;函数的效果是，在标签id为abc的地方（通过getElementById获得），用文本ppp替换之。&lt;/p&gt;

&lt;h3 id=&quot;输出时间&quot;&gt;输出时间&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p id=&quot;time&quot;&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;script&amp;gt;

var nowtime=new Date(); //获得时间

localtime=nowtime.toString(); //将时间转为字符串

document.getElementById(&quot;time&quot;).innerHTML=localtime; //在id为time的地方输出时间，注意，time需要在这行之前才可以

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;关于时间的其他函数&quot;&gt;关于时间的其他函数：&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hour=nowtime.getHours(); //将小时赋给hour

min=nowtime.getMinutes(); //分钟

second=nowtime.getSeconds(); //秒

day=nowtime.getDate(); //天

mon=nowtime.getMonth(); //月

year=nowtime.getFullYear(); //年

datashow=year+&quot;年&quot;+mon+&quot;月&quot;+day+&quot;日&quot;+hour+&quot;时&quot;+min+&quot;分&quot;+second+&quot;秒&quot;;

document.getElementById(&quot;time&quot;).innerHTML=datashow; //在id为time的地方输出时间，注意，time需要在这行之前才可以
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;导入一个js文件&quot;&gt;导入一个js文件&lt;/h3&gt;

&lt;p&gt;使用&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;time.js&quot;&amp;gt;&lt;/code&gt; //读取time.js这个JavaScript文件内容&lt;/p&gt;

&lt;p&gt;&amp;lt;/script&amp;gt;&lt;/p&gt;

&lt;p&gt;然后可以将之前的关于time的js命令，放入time.js文件内（无需加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签）即可。&lt;/p&gt;

&lt;h3 id=&quot;事件处理程序&quot;&gt;事件处理程序&lt;/h3&gt;

&lt;p&gt;在发生某种事件时，怎么处理。&lt;/p&gt;

&lt;p&gt;先上代码：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;01.png&quot; onmouseover=&quot;src='02.png'&quot; onmouseout=&quot;src='01.png'&quot;&amp;gt; &amp;lt;!-- 这行的意思是，插入一个图片，初始是01.png，鼠标移动上去后，是02.png，移动走又变回01.png了--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;位置是在第一个标签之中，类型有（似乎对大小写并不敏感，即onMouseOver和onmouseover是一样的）&lt;/p&gt;

&lt;p&gt;①按下时：onclick=”执行的语句”;&lt;/p&gt;

&lt;p&gt;②鼠标移动到上面时：onMouseOver=”执行的语句”;&lt;/p&gt;

&lt;p&gt;③鼠标离开：onMouseOut=”执行的语句”;&lt;/p&gt;

&lt;p&gt;④点击后生效：onClick=”执行的语句”;（仅限鼠标左键）&lt;/p&gt;

&lt;p&gt;⑤鼠标按下后生效：onMouseDown=”执行的语句”;（左右键都有用）&lt;/p&gt;

&lt;p&gt;⑥增加条件判断（初始1#图片，第一次点击更换为2#图片，再次点击更换为1#图片，然后交替）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img id=&quot;01png&quot; src=&quot;01.png&quot;onclick=&quot;png01()&quot;&amp;gt;

&amp;lt;script&amp;gt;

i=0;//需要在外面声明才行

function png01()

{

if(i==0){i=1;document.getElementById(&quot;01png&quot;).src=&quot;02.png&quot;;}//判断更改图片

else{i=0;document.getElementById(&quot;01png&quot;).src=&quot;01.png&quot;;}//判断更改图片

}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;⑦鼠标在上面是一个鼠标，鼠标离开又是另外一个图片&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img id=&quot;01png&quot; src=&quot;01.png&quot; onmouseover=&quot;src='02.png'&quot; onmouseout=&quot;src='01.png'&quot;&amp;gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;⑧判断路径中，文件名是否有某个关键词；&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function mouseover()

{

png=document.getElementById(&quot;01png&quot;);

if(png.src.match(&quot;01.png&quot;)) //如果路径中有关键词01，

{

png.src=&quot;02.png&quot;;

}

else

{

png.src=&quot;01.png&quot;;

}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;注释&quot;&gt;注释&lt;/h3&gt;
&lt;p&gt;html注释的语法是：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; &amp;lt;!--这里面写注释--&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;js注释的语法：&lt;/p&gt;

&lt;p&gt;js标签之内（即 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 之间的部分），可以像c++那样用双斜线。&lt;/p&gt;

&lt;h3 id=&quot;图片&quot;&gt;图片&lt;/h3&gt;

&lt;p&gt;①标签&amp;lt;img src=”图片链接”&amp;gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;http://s1.sinaimg.cn/middle/60de1da3n796eef141460&amp;amp;690&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;②限制高度和宽度（会导致图片变形）：width=””和height=””;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;http://s1.sinaimg.cn/middle/60de1da3n796eef141460&amp;amp;690&quot; width=&quot;100&quot; heigth=&quot;100&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;③在文字之中插入图片：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;右边是一个美女图片&amp;lt;img id=&quot;01png&quot; src=&quot;http://s1.sinaimg.cn/middle/60de1da3n796eef141460&amp;amp;690&quot;  width=&quot;200&quot; height=&quot;200&quot; onmouseover=&quot;mouseover()&quot; onmouseout=&quot;mouseover()&quot;&amp;gt; 左边是美女图片&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;超链接&quot;&gt;超链接&lt;/h3&gt;

&lt;p&gt;在使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=”链接地址”&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; 即可，将触发链接的内容加入到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 中间如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot;&amp;gt; &amp;lt;!--加入target=&quot;_blank&quot;表示是新窗口，不加则是在之前的窗口--&amp;gt;

    &amp;lt;img id=&quot;01png&quot; src=&quot;01.png&quot;  width=&quot;100&quot; height=&quot;100&quot; onmouseover=&quot;mouseover()&quot; onmouseout=&quot;mouseover()&quot;&amp;gt;

&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;①如果是链接到本地（或者网站某个地址），则使用相对路径；&lt;/p&gt;

&lt;p&gt;②链接到同一个页面的不同位置，参考链接：http://www.w3school.com.cn/tiy/t.asp?f=html_link_locations&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#C4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;查看 Chapter 4。&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Chapter 4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 9&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 11&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 12&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 13&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 14&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 15&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 16&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Chapter 17&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This chapter explains ba bla bla&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;③如果图片不能存在的话，用文本替代：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;不存在的图片.png&quot; alt=&quot;这里是不存在的图片&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;使用div来布局&quot;&gt;使用div来布局&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 布局的好处是，提前把网站页面划分为若干个区域，然后设置好每个区域的大小。&lt;/p&gt;

&lt;p&gt;如图片，先将页面分为3个区域。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160331173243153&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在每个区域中再细分。
①一般在div中使用class属性：&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div class=”某个样式”&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后这个div则使用class的这个样式了。&lt;/p&gt;

&lt;p&gt;②一个div实际上是一行（也就是说不同div之间是换行），但貌似可以通过class来让其位于不同的位置。&lt;/p&gt;

&lt;p&gt;更深的话，是跟DOM有关的。&lt;/p&gt;

</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/10/JavaScript%E5%AD%A6%E4%B9%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/10/JavaScript%E5%AD%A6%E4%B9%A0/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>(转)Tips:取消UICollectionView的隐式动画</title>
        <description>&lt;h1 id=&quot;转tips取消uicollectionview的隐式动画&quot;&gt;(转)Tips:取消UICollectionView的隐式动画&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;原文地址在串哥的博客 &lt;a href=&quot;http://adad184.com/2015/11/10/disable-uicollectionview-implicit-animation/&quot;&gt;Tips:取消UICollectionView的隐式动画&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;UICollectionView在 &lt;code class=&quot;highlighter-rouge&quot;&gt;reloadItems&lt;/code&gt; 的时候 默认会附加一个隐式的fade动画 有时候很讨厌 尤其是当你的cell是复合cell的情况下 (比如cell使用到了UIStackView)&lt;/p&gt;

&lt;p&gt;下面几种方法都可以帮你去除这些动画&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//方法一
[UIView performWithoutAnimation:^{

    [collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForItem:index inSection:0]]];
}];

//方法二
[UIView animateWithDuration:0 animations:^{
    [collectionView performBatchUpdates:^{
        [collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForItem:index inSection:0]]];
    } completion:nil];
}];
    
//方法三
[UIView setAnimationsEnabled:NO];
[self.trackPanel performBatchUpdates:^{
    [collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForItem:index inSection:0]]];
} completion:^(BOOL finished) {
    [UIView setAnimationsEnabled:YES];
}];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果你的APP只支持iOS7+ 推荐使用第一种方式 &lt;code class=&quot;highlighter-rouge&quot;&gt;performWithoutAnimation&lt;/code&gt; (感谢@sunnyxx的tip) 简单方便&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;but&lt;/p&gt;

&lt;p&gt;问题还没有结束 上面介绍的方法只能解决UIView的Animation 如果你的cell中还包含有CALayer的动画 比如这样&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)layoutSubviews
{
    [super layoutSubviews];
    
    self.frameLayer.frame = self.frameView.bounds;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述情况多用于自定义控件使用了layer.mask的情况 如果有这种情况 上面提到的方法是无法取消CALayer的动画的 但是解决办法也很简单&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)layoutSubviews
{
    [super layoutSubviews];
    
    [CATransaction begin];
    [CATransaction setDisableActions:YES];
    
    self.frameLayer.frame = self.frameView.bounds;
    
    [CATransaction commit];
    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;done!&lt;/p&gt;

</description>
        <pubDate>Tue, 09 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/09/Tips-%E5%8F%96%E6%B6%88UICollectionView%E7%9A%84%E9%9A%90%E5%BC%8F%E5%8A%A8%E7%94%BB/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/09/Tips-%E5%8F%96%E6%B6%88UICollectionView%E7%9A%84%E9%9A%90%E5%BC%8F%E5%8A%A8%E7%94%BB/</guid>
        
        <category>动画</category>
        
        <category>Tips</category>
        
        
      </item>
    
      <item>
        <title>关于 App Store 审核的一些事</title>
        <description>&lt;h1 id=&quot;关于-app-store-审核的一些事&quot;&gt;关于 App Store 审核的一些事&lt;/h1&gt;

&lt;h4 id=&quot;事情经过&quot;&gt;事情经过&lt;/h4&gt;
&lt;p&gt;因为一个功能应不应该使用内购，跟苹果爸爸来回周旋了一个月，其间又是邮件又是电话，直到最后申诉，苹果爸爸才正视我的述求，最终通过了审核。
当我几次 态度明确的 通过邮件、视频回复审核人员，我们基于付费的功能是与 app 的使用没有关系的，对方打来电话，告诉我：您这个 app 我们也是几次商讨后才认为是需要使用内购的，巴拉巴拉一堆话。我就说根据你们的审核条例：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;3.1.5 App 之外的实物商品和服务：如果 app 允许用户购买将在 app 之外使用的商品或服务，则必须使用 IAP 以外的购买方式来收取相应款项，如 Apple Pay 或传统的信用卡入口。App 可支持获批虚拟货币的流通（如比特币、狗币），前提条件是，在该 app 能够正常使用的地区，前述做法必须遵守各州法律和联邦法律。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们这个app是不需要通过内购的。&lt;/p&gt;

&lt;p&gt;审核人员：如果您觉得我们的审核有问题的话，您向审查委员会提起申诉好了，但是我需要告诉您，审查委员会也是我们的人，而且我们之前已经请求过审查委员会的意见，所以如果您提起申诉，结果还是一样的。&lt;/p&gt;

&lt;p&gt;我：难道你们的审核条款是摆设吗（大概是这样的话，有点记不清楚了。）&lt;/p&gt;

&lt;p&gt;审核人员：只要你通过 Apple 这个平台进行推广你的付费服务，就需要使用内购。&lt;/p&gt;

&lt;p&gt;日了狗了！！&lt;/p&gt;

&lt;p&gt;抱着一线生机的提起了申诉，今天早上一来，申诉通过了，并且审核也已经通过了。&lt;/p&gt;
&lt;h4 id=&quot;收获&quot;&gt;收获&lt;/h4&gt;
&lt;p&gt;通过这件事，知道了几点：&lt;/p&gt;
&lt;h5 id=&quot;1苹果审核人员的标准不一致&quot;&gt;1，苹果审核人员的标准不一致。&lt;/h5&gt;

&lt;p&gt;我们的app 是一个上线时间很长的app，之前每次更新基本上第二天就可以审核上线了。但这次扯淡就扯了一个月。猜测是不同的审核人员的审核标准不一致。&lt;/p&gt;
&lt;h5 id=&quot;2审核人员会言语上误导你&quot;&gt;2，审核人员会言语上误导你。&lt;/h5&gt;

&lt;p&gt;审核人员告诉我是经过了审查委员会的意见进行的处理，但是当我提起申诉，app 就通过了审核。要么是审核人员说谎了，要么就是审查委员会之前的标准也是不一致的。&lt;/p&gt;
&lt;h5 id=&quot;3只要你确认你是-app-符合审核规则一定要坚持&quot;&gt;3，只要你确认你是 app 符合审核规则，一定要坚持&lt;/h5&gt;

&lt;p&gt;在审核人员打来电话后，通过她的话语，感觉申诉通过的几率也不是很大，我们这边差点要改一系列的逻辑实现，最后领导拍板，我们的app 符合他们的审核条例，为什么审核不给过，去申诉，先看看申诉结果以后再讨论。&lt;/p&gt;

&lt;h4 id=&quot;最后&quot;&gt;最后&lt;/h4&gt;
&lt;p&gt;也许只是因为最近 微信 的打赏功能闹得沸沸扬扬，苹果爸爸审核的严格了。。&lt;/p&gt;

</description>
        <pubDate>Mon, 08 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/08/%E5%85%B3%E4%BA%8E-App-Store-%E5%AE%A1%E6%A0%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/08/%E5%85%B3%E4%BA%8E-App-Store-%E5%AE%A1%E6%A0%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/</guid>
        
        <category>App Store</category>
        
        
      </item>
    
      <item>
        <title>让你眼前一亮的代码</title>
        <description>&lt;h1 id=&quot;让你眼前一亮的代码&quot;&gt;让你眼前一亮的代码&lt;/h1&gt;

&lt;p&gt;本文记录一下，我见到的让我觉得眼前一亮的代码，闭门造车了好久，一直在吃老本，没有提升，突然见到这样的代码，真的觉得受益匪浅，就自己重写并记录下，水平有限，请看到的列位大神不要见笑。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;所有的代码都已经上传 ，地址为：&lt;a href=&quot;https://github.com/yunisSong/MagicCode&quot;&gt;MagicCode&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;uitableview&quot;&gt;UITableView&lt;/h3&gt;
&lt;h4 id=&quot;uitableview-代理封装&quot;&gt;UITableView 代理封装&lt;/h4&gt;
&lt;p&gt;传统的 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; 使用，会有一大堆代理方法，看起来比较乱，封装后形式如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    UITableView *table = ({
        UITableView *baseTableView    = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStylePlain];
        baseTableView.estimatedRowHeight = 100;
        baseTableView.rowHeight = UITableViewAutomaticDimension;
        [baseTableView registerClass:[DemoTableViewCell class] forCellReuseIdentifier:PhotoCellIdentifier];
        baseTableView;
    });
    [table addHelper:^(SYTableViewHelper *help)
     {
         help.addItem(source)
         .configureCell(^(DemoTableViewCell *cell, NSString *photo)
                        {
                            cell.textLabel.text = photo;
                        })
         .addSelectCell(^(NSIndexPath *index)
                        {
                            NSLog(@&quot;indexRow = %ld&quot;,(long)index.row);
                        })
         .addCellIdentifier(PhotoCellIdentifier);
         
     }];
    [self.view addSubview:table];
    
    [table mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.equalTo(self.view);
    }];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;具体的就是使用一个帮助类，把 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; 的代理都丢到帮助类里面处理，因为最近痴迷于链式语法，就使用链式实现了一遍,一般简单的需求都可以用下，如果需要使用其他的代理方法，就自己再添加了。
&lt;img src=&quot;https://raw.githubusercontent.com/yunisSong/MagicCode/master/Pic/tableviewDemo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;uitableview-一句话空数据占位视图&quot;&gt;UITableView 一句话空数据占位视图&lt;/h4&gt;
&lt;p&gt;开发中，如果请求返回数据为空，需要有一视图提示用户，数据为空。这个是之前看陈一龙的微博看到的，自己就又实现了下。具体代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (self.emptyViewTitle)
    {
        [tableView tableViewDisplayEmptyViewWithTitle:self.emptyViewTitle
                               ifNecessaryForRowCount:self.items.count];
    }
    return self.items.count;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我这边就显示了一个提示的文字，简单的实现了，如果需要显示美观的视图，自己修改下就可以用了，思路都是一样的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yunisSong/MagicCode/master/Pic/tableviewEmptyDemo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;uiimageview&quot;&gt;UIImageView&lt;/h3&gt;
&lt;h4 id=&quot;0行代码完成头像设置功能&quot;&gt;0行代码完成头像设置功能&lt;/h4&gt;
&lt;p&gt;最初是在 &lt;a href=&quot;https://github.com/FengDeng/DFHeadImageView&quot;&gt;DFHeadImageView&lt;/a&gt; ,通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt; 封装，使用 &lt;a href=&quot;https://github.com/FengDeng/DFHeadImageView&quot;&gt;DFHeadImageView&lt;/a&gt; 可以直接完成设置头像的功能，不需要再额外写获取图片的方法。最好自己试着仿写了一遍。&lt;/p&gt;

</description>
        <pubDate>Fri, 05 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/05/%E8%AE%A9%E4%BD%A0%E7%9C%BC%E5%89%8D%E4%B8%80%E4%BA%AE%E7%9A%84%E4%BB%A3%E7%A0%81/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/05/%E8%AE%A9%E4%BD%A0%E7%9C%BC%E5%89%8D%E4%B8%80%E4%BA%AE%E7%9A%84%E4%BB%A3%E7%A0%81/</guid>
        
        <category>奇巧淫技</category>
        
        
      </item>
    
      <item>
        <title>链式语法学习</title>
        <description>&lt;h1 id=&quot;链式语法学习&quot;&gt;链式语法学习&lt;/h1&gt;

&lt;h4 id=&quot;为什么要写一个链式语法的库&quot;&gt;为什么要写一个链式语法的库&lt;/h4&gt;
&lt;p&gt;最近看了 &lt;a href=&quot;https://github.com/jhurray/JHChainableAnimations&quot;&gt;JHChainableAnimations&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/SnapKit/Masonry&quot;&gt;Masonry&lt;/a&gt; 觉得链式语法写起来用的好爽，就萌生了使用 链式 编写最近使用的一个库，然后又看到了 &lt;a href=&quot;http://www.jianshu.com/u/0cf7d455eb9e&quot;&gt;sindri的小巢&lt;/a&gt; 的这篇文章 &lt;a href=&quot;http://www.jianshu.com/p/031818e48550&quot;&gt;iOS开发-链式实现数据源&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在文章的最后，作者展示了这样的一段代码：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;user/getUserInfo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// request success&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// request failed&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;好了，就写一个网路的链式调用库，当做一次链式语法的实践。&lt;/p&gt;

&lt;h4 id=&quot;具体如何实现&quot;&gt;具体如何实现&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/SYrequest.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;提供调用的方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (apiAddress )requestURLString;
+ (apiAddress)Get;
+ (apiAddress)Post;
- (apiAddress )requestURLString;
- (apiAddress)Get;
- (apiAddress)Post;

- (head)addHeadersy;
- (params)addParameters;
- (body)addBody;
- (httpMethod)httpMethod;
- (parameterEncoding)addParameterEncoding;

- (startRequest)start;
- (cancelRequest)cancel;
- (suspendRequest)suspend;
- (resumeRequest)resume;


- (response)response;


- (void)clearCompletionBlock;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    SYRequest *requset = [[SYRequest alloc] init];
    requset.requestURLString(@&quot;https://www.metaweather.com/api/location/search/&quot;)
            .httpMethod(SYHTTPMethod_GET)
            .addParameters(@{@&quot;query&quot;:@&quot;sa&quot;})
            .start(^(BOOL sucess,id responseData,NSError *error){
                NSDictionary *jsonDic = [NSJSONSerialization JSONObjectWithData:responseData options:0 error:nil];
                NSLog(@&quot;jsonDic = %@&quot;,jsonDic);
            });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    SYRequest.requestURLString(@&quot;https://www.metaweather.com/api/location/search/&quot;)
    .httpMethod(SYHTTPMethod_GET)
    .addParameters(@{@&quot;query&quot;:@&quot;sa&quot;})
    .start(^(BOOL sucess,id responseData,NSError *error){
        NSDictionary *jsonDic = [NSJSONSerialization JSONObjectWithData:responseData options:0 error:nil];
        NSLog(@&quot;jsonDic = %@&quot;,jsonDic);
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;具体的就没什么说的，实现起来就是这样： &lt;code class=&quot;highlighter-rouge&quot;&gt;方法的返回值是block,block必须有返回值（本身对象），block参数（需要操作的值）&lt;/code&gt;,只要按照这个条件写，就可以写出一个自己的链式库。&lt;/p&gt;

&lt;p&gt;具体代码地址 &lt;a href=&quot;https://github.com/yunisSong/SYRequest&quot;&gt;SYRequest&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 25 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/25/%E9%93%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/25/%E9%93%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</guid>
        
        <category>链式</category>
        
        
      </item>
    
      <item>
        <title>（转）制作一个苦力</title>
        <description>&lt;h1 id=&quot;转制作一个苦力&quot;&gt;（转）制作一个苦力&lt;/h1&gt;

&lt;p&gt;创造一个工具，为自己，也为他人。&lt;/p&gt;

&lt;p&gt;作者：&lt;a href=&quot;https://twitter.com/nixzhu&quot;&gt;@nixzhu&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现今，几乎所有的 API 都返回 JSON，但 JSON 是一种文本数据，为了使访问更加安全和自然，传递更加方便，我们通常会将它转换为客户端模型，而不仅仅将其当作一个字典来使用。&lt;/p&gt;

&lt;p&gt;通常，我们会有服务器端所提供的 API 的文档，里面会描述每个 API 可能返回的数据。据此，作为客户端开发者，根据这些信息，我们就能设计出适合客户端使用的模型，或者接口、协议等。&lt;/p&gt;

&lt;p&gt;可是，如果 API 很多，那可能模型也会很多。假如我们用结构体来做模型，光是每个模型的属性（以及从字典到模型的转换代码）都够我们写上一段时间，而且这个过程并不有趣。&lt;/p&gt;

&lt;p&gt;有一些框架可以帮助我们做“从字典到模型的转换”这一步，但我们仍然要先定义好结构体（或者类）。&lt;/p&gt;

&lt;p&gt;如果一件事情对人类而言枯燥无趣，通常计算机就会很喜欢。如果我们能让计算机帮我们从 JSON 直接生成模型，然后我们再来对模型做一些修改和调整，那我们应该就像一个人了。&lt;/p&gt;

&lt;p&gt;开发者当然是人，而且是刚好能够用计算机制造工具的人。&lt;/p&gt;

&lt;p&gt;JSON 里有些什么信息呢？足够帮助我们生成模型吗？下面来看一个简单的例子。假如有如下 JSON：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NIX&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;skills&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Swift on iOS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C on Linux&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;motto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Love you love.&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而我们期望得到如下模型：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;skills&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;motto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过观察可知，JSON 就像一个字典，有 key 和 value，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; 为 key，其值 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;NIX&quot;&lt;/code&gt; 是一个字符串。对应到模型里即属性 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;，类型为 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;。其它依次类推即可。其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;skills&lt;/code&gt; 比较特殊，是一个数组，而且其元素是字符串，所以对应到模型属性 &lt;code class=&quot;highlighter-rouge&quot;&gt;skills&lt;/code&gt; 的类型为 &lt;code class=&quot;highlighter-rouge&quot;&gt;[String]&lt;/code&gt;。这个 JSON 比较简单，在更复杂的 JSON 里，有可能 key 对应的 value 也是一个字典，数组里也很可能不是基本类型，也是一个个字典。还有 key 可能没有 value，而对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;除了模型结构体的名字 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 外，其它信息都应该能从 JSON 中推断出来。也就是说，我们要写一个解析器，它能将 JSON 里的信息提取出来，用于生成我们需要的结构体。&lt;/p&gt;

&lt;p&gt;那解析器怎么写？不要慌，我们先看看 JSON 的定义：&lt;a href=&quot;http://www.json.org/json-zh.html&quot;&gt;http://www.json.org/json-zh.html&lt;/a&gt;，这份说明很短，应该不难看懂。&lt;/p&gt;

&lt;p&gt;我再节录一点如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JSON建构于两种结构：&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;“名称/值”对的集合（A collection of name/value pairs）。不同的语言中，它被理解为对象（object），纪录（record），结构（struct），字典（dictionary），哈希表（hash table），有键列表（keyed list），或者关联数组 （associative array）。&lt;/li&gt;
    &lt;li&gt;值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对象是一个无序的“‘名称/值’对”集合。一个对象以“{”（左括号）开始，“}”（右括号）结束。每个“名称”后跟一个“:”（冒号）；“‘名称/值’ 对”之间使用“,”（逗号）分隔。
数组是值（value）的有序集合。一个数组以“[”（左中括号）开始，“]”（右中括号）结束。值之间使用“,”（逗号）分隔。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;后面还定义了&lt;code class=&quot;highlighter-rouge&quot;&gt;值（value）&lt;/code&gt;的具体类型，如字符串、数组、布尔值、空等。而且要注意，value 还可以是对象或数组，也就是说，JSON 是一种可递归的数据结构，因此它可以表征很复杂的数据。&lt;/p&gt;

&lt;p&gt;总结一下，JSON 里包含的基本单位有这么几种：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对象开始符 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;对象结束符 &lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;数组开始符 &lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;数组结束符 &lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;键值分隔符 &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;键值对分隔符 &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;布尔值，真 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;布尔值，假 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;数字 &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;-0.99&lt;/code&gt; …&lt;/li&gt;
  &lt;li&gt;字符串 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;name&quot;&lt;/code&gt; 或&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;NIX&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;空 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不要觉得复杂，因为并没有多少种。注意其中的“字符串”既可以用来表示 key，也可以作为 value 的一种。&lt;/p&gt;

&lt;p&gt;很明显，有的基本单位就是一个字符而已，但有的不是，比如布尔值、数字、字符串等。这是一种重要的洞见，这说明我们不该将 JSON 当做一个字符串来看待，而应该将其当做一种“基本单位串”。&lt;/p&gt;

&lt;p&gt;这里的“基本单位”，在计算机科学里，被称为“Token”，也就是说，JSON 是由一个个 Token 串联起来的。当我们能用 Token 串来看待 JSON 时，我们思考解析的过程会更清晰，不用再纠结于字符。&lt;/p&gt;

&lt;p&gt;再看一个更简单的 JSON:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NIX&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在计算机“看来”是这样：&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\n\t&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NIX&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\n\t&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;，一个字符串，包含换行符&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;、制表符&lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt;和空格&lt;code class=&quot;highlighter-rouge&quot;&gt; &lt;/code&gt;（注意这里为了表示方便，并未转义&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;）。
如果我们去除这些空白符，就有：&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NIX&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;，看起来好多了。&lt;/p&gt;

&lt;p&gt;以我们对 JSON 的理解，我们再对其作分割，就有：&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;name&quot;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;NIX&quot;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;age&quot;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;18&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;，共9个独立的部分。
很明显我们的大脑知道如何“正确”分割，这里的正确指的是符合 JSON 的定义。比如，当我们看到&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;时就知道这个 JSON 是一个字典，看到&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;name&quot;&lt;/code&gt;及其后的&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;时，我们就知道 name 是一个 key，再后面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;NIX&quot;&lt;/code&gt; 就是 value 了。看到&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;时就知道这个键值对结束（也预示下一个键值对要开始）。当我们看到&lt;code class=&quot;highlighter-rouge&quot;&gt;18&lt;/code&gt;时，我们除了知道它时一个 value 外，还知道它是一个数字，而不是字符串，因为字符串都有双引号包围。&lt;/p&gt;

&lt;p&gt;这些独立的部分不应该再被分割，不然其意义就不明确了，这种不能被分割的部分就是 Token。&lt;/p&gt;

&lt;p&gt;Swift 的 enum 特别适合用来表示不同的 Token，于是有：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BeginObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// {&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EndObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BeginArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// [&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EndArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// ]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Colon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// :&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Comma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// ,&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// true or false&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NumberType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NumberType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 42, -0.99&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// &quot;name&quot;, &quot;NIX&quot;, ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Null&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;作为一种合理的简化，Number 只考虑整型和简单的浮点型。&lt;/p&gt;

&lt;p&gt;那么上面的9个独立部分就可以表示为：&lt;code class=&quot;highlighter-rouge&quot;&gt;.BeginObject(&quot;{&quot;)&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.String(&quot;name&quot;)&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.Colon(&quot;:&quot;)&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.String(&quot;NIX&quot;)&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.Comma(&quot;,&quot;)&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.String(&quot;age&quot;)&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.Colon(&quot;:&quot;)&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.Number(.Int(18))&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.EndObject(&quot;}&quot;)&lt;/code&gt;，也就是一个 Token 串了。&lt;/p&gt;

&lt;p&gt;那么，我们的第一步就将 JSON 字符串转换为 Token 串，为后面的解析（所谓解析，是将 Token 串转化为一个中间数据结构，这个结构里有我们最后所要生成的模型所需要的所有信息）做准备。&lt;/p&gt;

&lt;p&gt;通常，在各种介绍“编译原理”的书籍中，会把这个步骤成为“词法分析”。又通常，会进一步介绍“正则表达式”和“状态机”，以便用它们写出做词法分析的工具。&lt;/p&gt;

&lt;p&gt;不过我们还不需要去学它们。对于 JSON 这种比较简单的数据表示，我们可以利用 NSScanner 来帮我们生成 Token 串。NSScanner 的文档&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSScanner_Class/&quot;&gt;在此&lt;/a&gt;，简单来说，它是一个根据一些预定义的模式，从一个字符串中寻找匹配模式的字符串，并在匹配后移动其内部的指针，以便继续扫描，直至结束。在任意一个模式匹配后，我们就可以利用匹配到的信息来生成 Token。&lt;/p&gt;

&lt;p&gt;其用法如下：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSScanner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\t\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;NIX&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\t\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: 18&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scanBeginObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scanString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intoString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BeginObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;scanBeginObject&lt;/code&gt;利用&lt;code class=&quot;highlighter-rouge&quot;&gt;scanner&lt;/code&gt;扫描&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;，若能找到，就返回一个 BeginObject Token。类似这样，我们能写出
    &lt;code class=&quot;highlighter-rouge&quot;&gt;scanEndObject&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;scanBeginArray&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;scanEndArray&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;scanColon&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;scanComma&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;scanBool&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;scanNumber&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;scanString&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;scanNull&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后，我们可以利用一个 while 循环，把 JSON 字符串转换为 Token 串：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateTokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atEnd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previousScanLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scanLocation&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scanBeginObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scanEndObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scanBeginArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scanEndArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scanColon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scanComma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scanBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scanNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scanString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scanNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;currentScanLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scanLocation&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentScanLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previousScanLocation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not found valid token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的函数依然只是看着比较长而已，实质非常简单。注意我们在一次循环里尽可能寻找合法的 Token，若最后 &lt;code class=&quot;highlighter-rouge&quot;&gt;currentScanLocation&lt;/code&gt; 没有大于 &lt;code class=&quot;highlighter-rouge&quot;&gt;previousScanLocation&lt;/code&gt;，那说明当前扫描没有找到合法的 Token，也就是说 JSON 字符串有语法问题。&lt;/p&gt;

&lt;p&gt;经过上面的步骤，我们应该已得到了一个 Token 数组，接下来就是解析了。不过我们首先要明确解析的目的，我们要生成一个中间结构来表示 JSON 的结构，根据前面提及的 JSON 定义，我们也不难写出如下 enum：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NumberType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NumberType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Null&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;indirect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;indirect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们将一个 JSON 看作一个 Value，而 Value 本身可以是布尔值、数字、字符串、null 或者递归结构（String: Value 字典，或者 Value 数组），这其实是一种&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95&quot;&gt;上下文无关文法&lt;/a&gt;的表示。我不打算在这里解释上下文无关文法的定义，但简单来说，当我们说一个 Value 是什么的时候，我们知道它可能表示一个布尔值、数字、……、或者与 Value 有关的结构（字典或数组），Value 本身可以作为构建 Value 的基石。&lt;/p&gt;

&lt;p&gt;有了 Value 的定义，那我们的解析函数可如下定义：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateTokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No tokens&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;哈哈，真实的&lt;code class=&quot;highlighter-rouge&quot;&gt;parse()&lt;/code&gt;当然不会这么短，不过我们知道它应该返回一个 Value（或 nil，表示解析失败）。&lt;/p&gt;

&lt;p&gt;有了 tokens，我们再定义一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;var next = 0&lt;/code&gt;，表示我们当前“查看”到哪一个 Token 了，然后我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;parse()&lt;/code&gt;内部定义一个&lt;code class=&quot;highlighter-rouge&quot;&gt;parseValue()&lt;/code&gt;，并在最后调用它，如下：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateTokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No tokens&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coolie_safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No token for parseValue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BeginArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arrayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nameIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nameToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coolie_safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;arrayName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capitalizedString&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BeginObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首先，Don’t Panic! 其实上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;parseValue()&lt;/code&gt;也并不复杂，不过是 case 较多（这由 Token 的种类决定）而已。它先用 next 取到当前的 Token，之后就 switch token 来具体处理。例如对于最复杂的&lt;code class=&quot;highlighter-rouge&quot;&gt;.BeginArray&lt;/code&gt;，它利用 next 回退了两个 Token，以拿到这个数组的名字（在这里，我们其实做了一种假设，即 JSON 的“基底”是一个字典，而数组只会出现在字典内部，因此数组一定有一个名字，这个名字对于我们后面的代码生成来说是必要的，而且这种假设也很合理，因为我们通常都会用一个 JSON 字典来表示一个模型），之后增加 next 跳过这个表示中括号的 Token，再调用了&lt;code class=&quot;highlighter-rouge&quot;&gt;parseArray&lt;/code&gt;（我们先不管它是怎么实现的，实际上，在编写解析器的过程中，这种“大局观”很重要，有时候必须从全局看问题）。对于&lt;code class=&quot;highlighter-rouge&quot;&gt;.BeginObject&lt;/code&gt;，它增加 next 以跳过这个表示大括号的 Token，然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;parseObject&lt;/code&gt;，其它类似（注意我们并没有 switch 所有的 case，这也是基于对 JSON 的理解）。&lt;/p&gt;

&lt;p&gt;很明显，我们还会在上面的注释处继续添加函数，其中最复杂的就是&lt;code class=&quot;highlighter-rouge&quot;&gt;parseArray&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;parseObject&lt;/code&gt;，我再稍微描述一下它们：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coolie_safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No token for parseArray&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EndArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coolie_safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EndArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseComma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expect comma&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nextToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coolie_safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNotEndArray&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid JSON, comma at end of array&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们先准备了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;var array = [Value]()&lt;/code&gt;用来装解析出的 values，然后判断 next 表示的 Token，如果是&lt;code class=&quot;highlighter-rouge&quot;&gt;.EndArray&lt;/code&gt;（右中括号），表示这是一个空的数组，因此立即返回，不然呢，就进入一个 while 循环。在 while 循环中，我们实际上身处第一个 Value，请回忆 Value 里 Array 的定义，Array 就是 Value 的数组（一种递归定义），因此，我们直接调用&lt;code class=&quot;highlighter-rouge&quot;&gt;parseValue&lt;/code&gt;即可，如果 JSON 没有语法问题，那么我们就能得到表示数组中第一个元素的 value，我们把这个 value 添加到 array 里。然后，我们取下一个 Token，经过前面&lt;code class=&quot;highlighter-rouge&quot;&gt;parseValue&lt;/code&gt;的解析，这一个 token 有这几种可能：右中括号（表示数组结束）、逗号（表示数组里还有更多元素），终究，我们的循环可以处理这些情况，并在合适的时候用 return 跳出循环。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coolie_safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No token for parseObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EndObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseColon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expect key : value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coolie_safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EndObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseComma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expect comma&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nextToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coolie_safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNotEndObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid JSON, comma at end of object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看完上面对&lt;code class=&quot;highlighter-rouge&quot;&gt;parseArray&lt;/code&gt;的分析，我想，&lt;code class=&quot;highlighter-rouge&quot;&gt;parseObject&lt;/code&gt;看起来也不会太难。只不过这次我们先定义一个&lt;code class=&quot;highlighter-rouge&quot;&gt;var dictionary = [String: Value]()&lt;/code&gt;来装结果，然后判断下一个 Token 是否表示对象结束（也即是右大括号），不然又进入 while 循环来继续解析，只需注意&lt;code class=&quot;highlighter-rouge&quot;&gt;guard let key = parseString(), _ = parseColon(), value = parseValue()&lt;/code&gt;，我们在其中取到了 key 和 value（中间的逗号被跳过了），确保 key 是一个 String，然后就可以将 value 装入我们早就准备好的 dictionary 里了。然后当然是继续判断，下一个 Token 要么是对象结束，要么是一个逗号。同样，不符合我们预期的 Token 当然表示 JSON 不合法。&lt;/p&gt;

&lt;p&gt;其它诸如&lt;code class=&quot;highlighter-rouge&quot;&gt;parseColon&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;parseComma&lt;/code&gt;等都比较简单，我就不贴代码分析了，感兴趣的读者可直接去&lt;a href=&quot;https://github.com/nixzhu/Coolie&quot;&gt;阅读代码&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;不出意外，我们得到了一个 Value，然后我们只需要根据我们对模型的需求写出一个生成函数，利用它生成模型和模型的构造方法，我们就得到一个苦力了。
目前我写了两个生成函数：&lt;code class=&quot;highlighter-rouge&quot;&gt;generateStruct&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;generateClass&lt;/code&gt;，分别用于生成 Swift struct 或 class（比较琐碎，也不贴代码分析了）。而且因为 Value 是递归的，因此我们生成的模型也是递归的。如果你所用的编程语言不支持递归定义，那可能要稍微麻烦一点。另外，为了方便开发者使用，我还写了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Arguments&lt;/code&gt;模块，用于解析命令行参数，感兴趣的读者可直接到 &lt;a href=&quot;https://github.com/nixzhu/Coolie&quot;&gt;Coolie 的 GitHub Repo&lt;/a&gt; 处研究。&lt;/p&gt;

&lt;p&gt;我想读者大概能够看出，其实 Coolie 是一个迷你的编译器，它有词法分析、语法分析、中间表示、代码生成，因此它能将一个 JSON 文件“编译”为一个 Swift 文件，而且因为其内部有一个中间表示（可看成 AST），所以根据不同的用途，它也可以生成其它语言的模型代码。&lt;/p&gt;

&lt;p&gt;苦力是我在写 &lt;a href=&quot;https://github.com/CatchChat/Yep&quot;&gt;Yep&lt;/a&gt; 的过程中被写模型代码的繁琐逼出来的（我也看了不少编译原理相关的资料），可惜做得太晚，自己倒没怎么用上，不过我希望其他开发者不用再这样受苦。&lt;/p&gt;

&lt;p&gt;===============&lt;/p&gt;

&lt;p&gt;欢迎转载，但请一定注明出处！ &lt;a href=&quot;https://github.com/nixzhu/dev-blog&quot;&gt;https://github.com/nixzhu/dev-blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;欢迎转发此条&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tweet &lt;a href=&quot;https://twitter.com/nixzhu/status/747964885770735617&quot;&gt;https://twitter.com/nixzhu/status/747964885770735617&lt;/a&gt; 或&lt;/li&gt;
  &lt;li&gt;微博 &lt;a href=&quot;http://weibo.com/2076580237/DCrSs4TbC&quot;&gt;http://weibo.com/2076580237/DCrSs4TbC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以分享此文或参与讨论！&lt;/p&gt;

&lt;p&gt;如果你认为这篇文章对你有所帮助，可用支付宝扫描下方二维码，以捐助慰劳作者的辛苦：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/nixzhu/dev-blog/raw/master/images/nixzhu_alipay.png&quot; alt=&quot;nixzhu的支付宝二维码&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 18 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/18/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8B%A6%E5%8A%9B/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/18/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%8B%A6%E5%8A%9B/</guid>
        
        <category>转载</category>
        
        <category>工具</category>
        
        
      </item>
    
      <item>
        <title>JHChainableAnimations源码学习</title>
        <description>&lt;h1 id=&quot;jhchainableanimations源码学习&quot;&gt;JHChainableAnimations源码学习&lt;/h1&gt;

&lt;h3 id=&quot;jhchainableanimations是什么&quot;&gt;JHChainableAnimations是什么&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JHChainableAnimations&lt;/code&gt; 是一个多系统动画封装的链式语法库。&lt;/p&gt;

&lt;p&gt;原有的OC代码如果我们想写一个动画，需要这样写。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
                          &lt;span class=&quot;nv&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;usingSpringWithDamping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;initialSpringVelocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;newPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animateWithDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
                              &lt;span class=&quot;nv&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIViewAnimationOptionCurveEaseIn&lt;/span&gt;
                         &lt;span class=&quot;nv&quot;&gt;animations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purpleColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;JHChainableAnimations&lt;/code&gt; 可以这样写：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;JHChainableAnimator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JHChainableAnimator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initWithView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;moveX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;thenAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purpleColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;easeIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;代码一下就显得特别清晰明了，&lt;code class=&quot;highlighter-rouge&quot;&gt;JHChainableAnimations&lt;/code&gt; 采用了现在流行的链式语法，跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;Masonry&lt;/code&gt; 一样的语法。&lt;/p&gt;
&lt;h4 id=&quot;链式语法的特点是什么&quot;&gt;链式语法的特点是什么&lt;/h4&gt;
&lt;p&gt;链式编程特点：方法的返回值是block,block必须有返回值（本身对象），block参数（需要操作的值）&lt;/p&gt;

&lt;h3 id=&quot;jhchainableanimations代码具体分析&quot;&gt;JHChainableAnimations代码具体分析&lt;/h3&gt;

&lt;p&gt;首先看一段代码&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;JHChainableAnimator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JHChainableAnimator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initWithView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;moveX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首先是将 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.myView&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;JHChainableAnimator *animator&lt;/code&gt; 关联起来，然后通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;JHChainableAnimator *animator&lt;/code&gt; 进行动画设置。&lt;/p&gt;

&lt;p&gt;第二行代码
&lt;code class=&quot;highlighter-rouge&quot;&gt;animator.moveX(100).animate(2);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;首先是 &lt;code class=&quot;highlighter-rouge&quot;&gt;animator&lt;/code&gt; 调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;moveX&lt;/code&gt; 方法生成动画样式，这个方法从字面上面看 就是 移动视图的X轴，然后调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;animate&lt;/code&gt; 执行动画，设置动画时间。具体看先 它是如何实现的。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JHChainableFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveX&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;JHChainableFloat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chainable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JHChainableFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addAnimationCalculationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__weak&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__weak&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JHChainableAnimator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;JHKeyframeAnimation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positionAnimation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;basicAnimationForKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;position.x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;positionAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;positionAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addAnimationFromCalculationBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positionAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addAnimationCompletionAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__weak&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__weak&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JHChainableAnimator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chainable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再来回顾下链式语法的特点：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;方法的返回值是block,block必须有返回值（本身对象），block参数（需要操作的值）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再来看上面这段代码：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;moveX&lt;/code&gt; 方法返回的是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;block chainable&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; 的参数是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt;，&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;block chainable&lt;/code&gt; 的返回值是当前类 &lt;code class=&quot;highlighter-rouge&quot;&gt;JHChainableAnimator&lt;/code&gt; 实例。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;完全符合链式语法的特点。&lt;/p&gt;
&lt;h4 id=&quot;movex-具体实现&quot;&gt;moveX 具体实现&lt;/h4&gt;
&lt;p&gt;然后再来看具体实现，&lt;code class=&quot;highlighter-rouge&quot;&gt;moveX&lt;/code&gt; 干了什么。&lt;/p&gt;

&lt;p&gt;首先是返回了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;，然后这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; 返回了这个类本身的实例。&lt;/p&gt;

&lt;h5 id=&quot;block-chainable-都做了什么&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;block chainable&lt;/code&gt; 都做了什么&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;生成一个可执行的动画
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addAnimationCalculationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__weak&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__weak&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JHChainableAnimator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;JHKeyframeAnimation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positionAnimation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;basicAnimationForKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;position.x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;positionAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;positionAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addAnimationFromCalculationBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positionAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;生成有个动画执行完毕的回调，修改视图属性
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addAnimationCompletionAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__weak&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__weak&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JHChainableAnimator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;返回 当前类本身&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;animate-具体实现&quot;&gt;animate 具体实现&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JHChainableAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animate&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;JHChainableAnimation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chainable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JHChainableAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animateWithCompletion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chainable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;华丽的分割线
—-&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;感觉自己的语言表示能力有问题，突然不知道该怎么往下说下去了。
这个地方。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;重新描述下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;首先是像&lt;/p&gt;
  &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JHChainableFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JHChainableFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JHChainablePoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveXY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JHChainableFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JHChainableFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  &lt;p&gt;这类方法调用的时间，会生成一些类的动画对象 &lt;code class=&quot;highlighter-rouge&quot;&gt;JHKeyframeAnimation&lt;/code&gt; 然后存储到 &lt;code class=&quot;highlighter-rouge&quot;&gt;JHAnimationChainLink&lt;/code&gt; 的动画数组里面。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;最终 &lt;code class=&quot;highlighter-rouge&quot;&gt;animate&lt;/code&gt; 方法是循环调用 类数组里面存储的 &lt;code class=&quot;highlighter-rouge&quot;&gt;JHAnimationChainLink&lt;/code&gt; 对象，执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;JHAnimationChainLink&lt;/code&gt; 对象的 &lt;code class=&quot;highlighter-rouge&quot;&gt;JHKeyframeAnimation&lt;/code&gt;动画数组。
大致就是这样执行的，但是具体的实现有好多细节，动画的添加，动画执行的回调，取得当前执行的动画、如何暂停动画等。感觉自己目前的功力还很难描述清楚。就暂时先告一段落了。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sat, 15 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/15/JHChainableAnimations%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/15/JHChainableAnimations%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</guid>
        
        <category>源码</category>
        
        <category>iOS</category>
        
        <category>链式编程</category>
        
        
      </item>
    
  </channel>
</rss>
